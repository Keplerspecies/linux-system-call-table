{"Man page": "<pre><br><span class=\"headline\">MKNOD(2)                  Linux Programmer's Manual                 MKNOD(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       mknod, mknodat - create a special or ordinary file<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;sys/stat.h&gt;</b><br>       <b>#include &lt;fcntl.h&gt;</b><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int mknod(const char *</b><i>pathname</i><b>, mode_t </b><i>mode</i><b>, dev_t </b><i>dev</i><b>);</b><br><br>       <b>#include &lt;fcntl.h&gt;           </b>/* Definition of AT_* constants */<br>       <b>#include &lt;sys/stat.h&gt;</b><br><br>       <b>int mknodat(int </b><i>dirfd</i><b>, const char *</b><i>pathname</i><b>, mode_t </b><i>mode</i><b>, dev_t </b><i>dev</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>mknod</b>():<br>           _BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE &gt;= 500 ||<br>           _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The system call <b>mknod</b>() creates a filesystem node (file, device<br>       special file, or named pipe) named <i>pathname</i>, with attributes<br>       specified by <i>mode</i> and <i>dev</i>.<br><br>       The <i>mode</i> argument specifies both the file mode to use and the type of<br>       node to be created.  It should be a combination (using bitwise OR) of<br>       one of the file types listed below and zero or more of the file mode<br>       bits listed in stat(2).<br><br>       The file mode is modified by the process's <i>umask</i> in the usual way: in<br>       the absence of a default ACL, the permissions of the created node are<br>       (<i>mode</i> &amp; ~<i>umask</i>).<br><br>       The file type must be one of <b>S_IFREG</b>, <b>S_IFCHR</b>, <b>S_IFBLK</b>, <b>S_IFIFO</b>, or<br>       <b>S_IFSOCK </b>to specify a regular file (which will be created empty),<br>       character special file, block special file, FIFO (named pipe), or<br>       UNIX domain socket, respectively.  (Zero file type is equivalent to<br>       type <b>S_IFREG</b>.)<br><br>       If the file type is <b>S_IFCHR </b>or <b>S_IFBLK</b>, then <i>dev</i> specifies the major<br>       and minor numbers of the newly created device special file<br>       (makedev(3) may be useful to build the value for <i>dev</i>); otherwise it<br>       is ignored.<br><br>       If <i>pathname</i> already exists, or is a symbolic link, this call fails<br>       with an <b>EEXIST </b>error.<br><br>       The newly created node will be owned by the effective user ID of the<br>       process.  If the directory containing the node has the set-group-ID<br>       bit set, or if the filesystem is mounted with BSD group semantics,<br>       the new node will inherit the group ownership from its parent<br>       directory; otherwise it will be owned by the effective group ID of<br>       the process.<br><br>   <b>mknodat()</b><br>       The <b>mknodat</b>() system call operates in exactly the same way as<br>       mknod(2), except for the differences described here.<br><br>       If the pathname given in <i>pathname</i> is relative, then it is interpreted<br>       relative to the directory referred to by the file descriptor <i>dirfd</i><br>       (rather than relative to the current working directory of the calling<br>       process, as is done by mknod(2) for a relative pathname).<br><br>       If <i>pathname</i> is relative and <i>dirfd</i> is the special value <b>AT_FDCWD</b>, then<br>       <i>pathname</i> is interpreted relative to the current working directory of<br>       the calling process (like mknod(2)).<br><br>       If <i>pathname</i> is absolute, then <i>dirfd</i> is ignored.<br><br>       See openat(2) for an explanation of the need for <b>mknodat</b>().<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       <b>mknod</b>() and <b>mknodat</b>() return zero on success, or -1 if an error<br>       occurred (in which case, <i>errno</i> is set appropriately).<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EACCES </b>The parent directory does not allow write permission to the<br>              process, or one of the directories in the path prefix of<br>              <i>pathname</i> did not allow search permission.  (See also<br>              path_resolution(7).)<br><br>       <b>EDQUOT </b>The user's quota of disk blocks or inodes on the filesystem<br>              has been exhausted.<br><br>       <b>EEXIST </b><i>pathname</i> already exists.  This includes the case where<br>              <i>pathname</i> is a symbolic link, dangling or not.<br><br>       <b>EFAULT </b><i>pathname</i> points outside your accessible address space.<br><br>       <b>EINVAL </b><i>mode</i> requested creation of something other than a regular<br>              file, device special file, FIFO or socket.<br><br>       <b>ELOOP  </b>Too many symbolic links were encountered in resolving<br>              <i>pathname</i>.<br><br>       <b>ENAMETOOLONG</b><br>              <i>pathname</i> was too long.<br><br>       <b>ENOENT </b>A directory component in <i>pathname</i> does not exist or is a<br>              dangling symbolic link.<br><br>       <b>ENOMEM </b>Insufficient kernel memory was available.<br><br>       <b>ENOSPC </b>The device containing <i>pathname</i> has no room for the new node.<br><br>       <b>ENOTDIR</b><br>              A component used as a directory in <i>pathname</i> is not, in fact, a<br>              directory.<br><br>       <b>EPERM  </b><i>mode</i> requested creation of something other than a regular<br>              file, FIFO (named pipe), or UNIX domain socket, and the caller<br>              is not privileged (Linux: does not have the <b>CAP_MKNOD</b><br>              capability); also returned if the filesystem containing<br>              <i>pathname</i> does not support the type of node requested.<br><br>       <b>EROFS  </b><i>pathname</i> refers to a file on a read-only filesystem.<br><br>       The following additional errors can occur for <b>mknodat</b>():<br><br>       <b>EBADF  </b><i>dirfd</i> is not a valid file descriptor.<br><br>       <b>ENOTDIR</b><br>              <i>pathname</i> is relative and <i>dirfd</i> is a file descriptor referring<br>              to a file other than a directory.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>mknodat</b>() was added to Linux in kernel 2.6.16; library support was<br>       added to glibc in version 2.4.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>mknod</b>(): SVr4, 4.4BSD, POSIX.1-2001 (but see below), POSIX.1-2008.<br><br>       <b>mknodat</b>(): POSIX.1-2008.<br></pre><br><h2>NOTES  </h2><pre><br>       POSIX.1-2001 says: \"The only portable use of <b>mknod</b>() is to create a<br>       FIFO-special file.  If <i>mode</i> is not <b>S_IFIFO </b>or <i>dev</i> is not 0, the<br>       behavior of <b>mknod</b>() is unspecified.\"  However, nowadays one should<br>       never use <b>mknod</b>() for this purpose; one should use mkfifo(3), a<br>       function especially defined for this purpose.<br><br>       Under Linux, <b>mknod</b>() cannot be used to create directories.  One<br>       should make directories with mkdir(2).<br><br>       There are many infelicities in the protocol underlying NFS.  Some of<br>       these affect <b>mknod</b>() and mknodat(2).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       chmod(2), chown(2), fcntl(2), mkdir(2), mount(2), socket(2), stat(2),<br>       umask(2), unlink(2), makedev(3), mkfifo(3), acl(5) path_resolution(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-05-07                         MKNOD(2)</span><br></pre><br>"}