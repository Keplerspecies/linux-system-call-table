{"Man page": "<pre><br><span class=\"headline\">SIGRETURN(2)              Linux Programmer's Manual             SIGRETURN(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       sigreturn,  rt_sigreturn  -  return  from  signal handler and cleanup<br>       stack frame<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>int sigreturn(...);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       If the Linux kernel determines that an unblocked signal is pending<br>       for a process, then, at the next transition back to user mode in that<br>       process (e.g., upon return from a system call or when the process is<br>       rescheduled onto the CPU), it saves various pieces of process context<br>       (processor status word, registers, signal mask, and signal stack<br>       settings) into the user-space stack.<br><br>       The kernel also arranges that, during the transition back to user<br>       mode, the signal handler is called, and that, upon return from the<br>       handler, control passes to a piece of user-space code commonly called<br>       the \"signal trampoline\".  The signal trampoline code in turn calls<br>       <b>sigreturn</b>().<br><br>       This <b>sigreturn</b>() call undoes everything that was done&#8212;changing the<br>       process's signal mask, switching signal stacks (see<br>       sigaltstack(2))&#8212;in order to invoke the signal handler.  It restores<br>       the process's signal mask, switches stacks, and restores the<br>       process's context (processor flags and registers, including the stack<br>       pointer and instruction pointer), so that the process resumes<br>       execution at the point where it was interrupted by the signal.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       <b>sigreturn</b>() never returns.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       Many UNIX-type systems have a <b>sigreturn</b>() system call or near<br>       equivalent.  However, this call is not specified in POSIX, and<br>       details of its behavior vary across systems.<br></pre><br><h2>NOTES  </h2><pre><br>       <b>sigreturn</b>() exists only to allow the implementation of signal<br>       handlers.  It should <b>never </b>be called directly.  Details of the<br>       arguments (if any) passed to <b>sigreturn</b>() vary depending on the<br>       architecture.<br><br>       Once upon a time, UNIX systems placed the signal trampoline code onto<br>       the user stack.  Nowadays, pages of the user stack are protected so<br>       as to disallow code execution.  Thus, on contemporary Linux systems,<br>       depending on the architecture, the signal trampoline code lives<br>       either in the vdso(7) or in the C library.  In the latter case, the C<br>       library supplies the location of the trampoline code using the<br>       <i>sa_restorer</i> field of the <i>sigaction</i> structure that is passed to<br>       sigaction(2), and sets the <b>SA_RESTORER </b>flag in the <i>sa_flags</i> field.<br><br>       The saved process context information is placed in a <i>ucontext_t</i><br>       structure (see <i>&lt;sys/ucontext.h&gt;</i>).  That structure is visible within<br>       the signal handler as the third argument of a handler established<br>       with the <b>SA_SIGINFO </b>flag.<br><br>       On some other UNIX systems, the operation of the signal trampoline<br>       differs a little.  In particular, on some systems, upon transitioning<br>       back to user mode, the kernel passes control to the trampoline<br>       (rather than the signal handler), and the trampoline code calls the<br>       signal handler (and then calls <b>sigreturn</b>() once the handler returns).<br><br>   <b>C library/kernel differences</b><br>       The original Linux system call was named <b>sigreturn</b>().  However, with<br>       the addition of real-time signals in Linux 2.2, a new system call,<br>       <b>rt_sigreturn</b>() was added to support an enlarged <i>sigset_t</i> type.  The<br>       GNU C library hides these details from us, transparently employing<br>       <b>rt_sigreturn</b>() when the kernel provides it.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       kill(2), restart_syscall(2), sigaltstack(2), signal(2),<br>       getcontext(3), signal(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                     SIGRETURN(2)</span><br></pre><br>"}