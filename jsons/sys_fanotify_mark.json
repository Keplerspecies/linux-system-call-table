{"Man page": "<pre><br><span class=\"headline\">FANOTIFY_MARK(2)          Linux Programmer's Manual         FANOTIFY_MARK(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       fanotify_mark - add, remove, or modify an fanotify mark on a filesys&#8208;<br>       tem object<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/fanotify.h&gt;</b><br><br>       <b>int fanotify_mark(int </b><i>fanotify_fd</i><b>, unsigned int </b><i>flags</i><b>,</b><br>                         <b>uint64_t </b><i>mask</i><b>, int </b><i>dirfd</i><b>, const char *</b><i>pathname</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       For an overview of the fanotify API, see fanotify(7).<br><br>       fanotify_mark(2) adds, removes, or modifies an fanotify mark on a<br>       filesystem object.  The caller must have read permission on the<br>       filesystem object that is to be marked.<br><br>       The <i>fanotify_fd</i> argument is a file descriptor returned by<br>       fanotify_init(2).<br><br>       <i>flags</i> is a bit mask describing the modification to perform.  It must<br>       include exactly one of the following values:<br><br>       <b>FAN_MARK_ADD</b><br>              The events in <i>mask</i> will be added to the mark mask (or to the<br>              ignore mask).  <i>mask</i> must be nonempty or the error <b>EINVAL </b>will<br>              occur.<br><br>       <b>FAN_MARK_REMOVE</b><br>              The events in argument <i>mask</i> will be removed from the mark mask<br>              (or from the ignore mask).  <i>mask</i> must be nonempty or the error<br>              <b>EINVAL </b>will occur.<br><br>       <b>FAN_MARK_FLUSH</b><br>              Remove either all mount or all non-mount marks from the<br>              fanotify group.  If <i>flags</i> contains <b>FAN_MARK_MOUNT</b>, all marks<br>              for mounts are removed from the group.  Otherwise, all marks<br>              for directories and files are removed.  No flag other than<br>              <b>FAN_MARK_MOUNT </b>can be used in conjunction with <b>FAN_MARK_FLUSH</b>.<br>              <i>mask</i> is ignored.<br><br>       If none of the values above is specified, or more than one is<br>       specified, the call fails with the error <b>EINVAL</b>.<br><br>       In addition, zero or more of the following values may be ORed into<br>       <i>flags</i>:<br><br>       <b>FAN_MARK_DONT_FOLLOW</b><br>              If <i>pathname</i> is a symbolic link, mark the link itself, rather<br>              than the file to which it refers.  (By default,<br>              <b>fanotify_mark</b>() dereferences <i>pathname</i> if it is a symbolic<br>              link.)<br><br>       <b>FAN_MARK_ONLYDIR</b><br>              If the filesystem object to be marked is not a directory, the<br>              error <b>ENOTDIR </b>shall be raised.<br><br>       <b>FAN_MARK_MOUNT</b><br>              Mark the mount point specified by <i>pathname</i>.  If <i>pathname</i> is<br>              not itself a mount point, the mount point containing <i>pathname</i><br>              will be marked.  All directories, subdirectories, and the<br>              contained files of the mount point will be monitored.<br><br>       <b>FAN_MARK_IGNORED_MASK</b><br>              The events in <i>mask</i> shall be added to or removed from the<br>              ignore mask.<br><br>       <b>FAN_MARK_IGNORED_SURV_MODIFY</b><br>              The ignore mask shall survive modify events.  If this flag is<br>              not set, the ignore mask is cleared when a modify event occurs<br>              for the ignored file or directory.<br><br>       <i>mask</i> defines which events shall be listened for (or which shall be<br>       ignored).  It is a bit mask composed of the following values:<br><br>       <b>FAN_ACCESS</b><br>              Create an event when a file or directory (but see BUGS) is<br>              accessed (read).<br><br>       <b>FAN_MODIFY</b><br>              Create an event when a file is modified (write).<br><br>       <b>FAN_CLOSE_WRITE</b><br>              Create an event when a writable file is closed.<br><br>       <b>FAN_CLOSE_NOWRITE</b><br>              Create an event when a read-only file or directory is closed.<br><br>       <b>FAN_OPEN</b><br>              Create an event when a file or directory is opened.<br><br>       <b>FAN_OPEN_PERM</b><br>              Create an event when a permission to open a file or directory<br>              is requested.  An fanotify file descriptor created with<br>              <b>FAN_CLASS_PRE_CONTENT </b>or <b>FAN_CLASS_CONTENT </b>is required.<br><br>       <b>FAN_ACCESS_PERM</b><br>              Create an event when a permission to read a file or directory<br>              is requested.  An fanotify file descriptor created with<br>              <b>FAN_CLASS_PRE_CONTENT </b>or <b>FAN_CLASS_CONTENT </b>is required.<br><br>       <b>FAN_ONDIR</b><br>              Create events for directories&#8212;for example, when opendir(3),<br>              readdir(3) (but see BUGS), and closedir(3) are called.<br>              Without this flag, only events for files are created.<br><br>       <b>FAN_EVENT_ON_CHILD</b><br>              Events for the immediate children of marked directories shall<br>              be created.  The flag has no effect when marking mounts.  Note<br>              that events are not generated for children of the<br>              subdirectories of marked directories.  To monitor complete<br>              directory trees it is necessary to mark the relevant mount.<br><br>       The following composed value is defined:<br><br>       <b>FAN_CLOSE</b><br>              A file is closed (<b>FAN_CLOSE_WRITE</b>|<b>FAN_CLOSE_NOWRITE</b>).<br><br>       The filesystem object to be marked is determined by the file<br>       descriptor <i>dirfd</i> and the pathname specified in <i>pathname</i>:<br><br>       *  If <i>pathname</i> is NULL, <i>dirfd</i> defines the filesystem object to be<br>          marked.<br><br>       *  If <i>pathname</i> is NULL, and <i>dirfd</i> takes the special value <b>AT_FDCWD</b>,<br>          the current working directory is to be marked.<br><br>       *  If <i>pathname</i> is absolute, it defines the filesystem object to be<br>          marked, and <i>dirfd</i> is ignored.<br><br>       *  If <i>pathname</i> is relative, and <i>dirfd</i> does not have the value<br>          <b>AT_FDCWD</b>, then the filesystem object to be marked is determined by<br>          interpreting <i>pathname</i> relative the directory referred to by <i>dirfd</i>.<br><br>       *  If <i>pathname</i> is relative, and <i>dirfd</i> has the value <b>AT_FDCWD</b>, then<br>          the filesystem object to be marked is determined by interpreting<br>          <i>pathname</i> relative the current working directory.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>fanotify_mark</b>() returns 0.  On error, -1 is returned, and<br>       <i>errno</i> is set to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBADF  </b>An invalid file descriptor was passed in <i>fanotify_fd</i>.<br><br>       <b>EINVAL </b>An invalid value was passed in <i>flags</i> or <i>mask</i>, or <i>fanotify_fd</i><br>              was not an fanotify file descriptor.<br><br>       <b>EINVAL </b>The fanotify file descriptor was opened with <b>FAN_CLASS_NOTIF</b><br>              and mask contains a flag for permission events (<b>FAN_OPEN_PERM</b><br>              or <b>FAN_ACCESS_PERM</b>).<br><br>       <b>ENOENT </b>The filesystem object indicated by <i>dirfd</i> and <i>pathname</i> does not<br>              exist.  This error also occurs when trying to remove a mark<br>              from an object which is not marked.<br><br>       <b>ENOMEM </b>The necessary memory could not be allocated.<br><br>       <b>ENOSPC </b>The number of marks exceeds the limit of 8192 and the<br>              <b>FAN_UNLIMITED_MARKS </b>flag was not specified when the fanotify<br>              file descriptor was created with fanotify_init(2).<br><br>       <b>ENOSYS </b>This kernel does not implement <b>fanotify_mark</b>().  The fanotify<br>              API is available only if the kernel was configured with<br>              <b>CONFIG_FANOTIFY</b>.<br><br>       <b>ENOTDIR</b><br>              <i>flags</i> contains <b>FAN_MARK_ONLYDIR</b>, and <i>dirfd</i> and <i>pathname</i> do not<br>              specify a directory.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>fanotify_mark</b>() was introduced in version 2.6.36 of the Linux kernel<br>       and enabled in version 2.6.37.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This system call is Linux-specific.<br></pre><br><h2>BUGS  </h2><pre><br>       The following bugs were present in Linux kernels before version 3.16:<br><br>       *  If <i>flags</i> contains <b>FAN_MARK_FLUSH</b>, <i>dirfd</i> and <i>pathname</i> must specify<br>          a valid filesystem object, even though this object is not used.<br><br>       *  readdir(2) does not generate a <b>FAN_ACCESS </b>event.<br><br>       *  If fanotify_mark(2) is called with <b>FAN_MARK_FLUSH</b>, <i>flags</i> is not<br>          checked for invalid values.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       fanotify_init(2), fanotify(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2014-10-02                 FANOTIFY_MARK(2)</span><br></pre><br>"}