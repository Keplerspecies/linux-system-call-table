{"Man page": "<pre><br><span class=\"headline\">CHOWN(2)                  Linux Programmer's Manual                 CHOWN(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       chown, fchown, lchown, fchownat - change ownership of a file<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int chown(const char *</b><i>pathname</i><b>, uid_t </b><i>owner</i><b>, gid_t </b><i>group</i><b>);</b><br>       <b>int fchown(int </b><i>fd</i><b>, uid_t </b><i>owner</i><b>, gid_t </b><i>group</i><b>);</b><br>       <b>int lchown(const char *</b><i>pathname</i><b>, uid_t </b><i>owner</i><b>, gid_t </b><i>group</i><b>);</b><br><br>       <b>#include &lt;fcntl.h&gt;           </b>/* Definition of AT_* constants */<br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int fchownat(int </b><i>dirfd</i><b>, const char *</b><i>pathname</i><b>,</b><br>                    <b>uid_t </b><i>owner</i><b>, gid_t </b><i>group</i><b>, int </b><i>flags</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>fchown</b>(), <b>lchown</b>():<br>           _BSD_SOURCE || _XOPEN_SOURCE &gt;= 500 ||<br>           _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED<br>           || /* Since glibc 2.12: */ _POSIX_C_SOURCE &gt;= 200809L<br><br>       <b>fchownat</b>():<br>           Since glibc 2.10:<br>               _XOPEN_SOURCE &gt;= 700 || _POSIX_C_SOURCE &gt;= 200809L<br>           Before glibc 2.10:<br>               _ATFILE_SOURCE<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       These system calls change the owner and group of a file.  The<br>       <b>chown</b>(), <b>fchown</b>(), and <b>lchown</b>() system calls differ only in how the<br>       file is specified:<br><br>       * <b>chown</b>() changes the ownership of the file specified by <i>pathname</i>,<br>         which is dereferenced if it is a symbolic link.<br><br>       * <b>fchown</b>() changes the ownership of the file referred to by the open<br>         file descriptor <i>fd</i>.<br><br>       * <b>lchown</b>() is like <b>chown</b>(), but does not dereference symbolic links.<br><br>       Only a privileged process (Linux: one with the <b>CAP_CHOWN </b>capability)<br>       may change the owner of a file.  The owner of a file may change the<br>       group of the file to any group of which that owner is a member.  A<br>       privileged process (Linux: with <b>CAP_CHOWN</b>) may change the group<br>       arbitrarily.<br><br>       If the <i>owner</i> or <i>group</i> is specified as -1, then that ID is not<br>       changed.<br><br>       When the owner or group of an executable file are changed by an<br>       unprivileged user the <b>S_ISUID </b>and <b>S_ISGID </b>mode bits are cleared.<br>       POSIX does not specify whether this also should happen when root does<br>       the <b>chown</b>(); the Linux behavior depends on the kernel version.  In<br>       case of a non-group-executable file (i.e., one for which the <b>S_IXGRP</b><br>       bit is not set) the <b>S_ISGID </b>bit indicates mandatory locking, and is<br>       not cleared by a <b>chown</b>().<br><br>   <b>fchownat()</b><br>       The <b>fchownat</b>() system call operates in exactly the same way as<br>       <b>chown</b>(), except for the differences described here.<br><br>       If the pathname given in <i>pathname</i> is relative, then it is interpreted<br>       relative to the directory referred to by the file descriptor <i>dirfd</i><br>       (rather than relative to the current working directory of the calling<br>       process, as is done by <b>chown</b>() for a relative pathname).<br><br>       If <i>pathname</i> is relative and <i>dirfd</i> is the special value <b>AT_FDCWD</b>, then<br>       <i>pathname</i> is interpreted relative to the current working directory of<br>       the calling process (like <b>chown</b>()).<br><br>       If <i>pathname</i> is absolute, then <i>dirfd</i> is ignored.<br><br>       The <i>flags</i> argument is a bit mask created by ORing together 0 or more<br>       of the following values;<br><br>       <b>AT_EMPTY_PATH </b>(since Linux 2.6.39)<br>              If <i>pathname</i> is an empty string, operate on the file referred<br>              to by <i>dirfd</i> (which may have been obtained using the open(2)<br>              <b>O_PATH </b>flag).  In this case, <i>dirfd</i> can refer to any type of<br>              file, not just a directory.  If <i>dirfd</i> is <b>AT_FDCWD</b>, the call<br>              operates on the current working directory.  This flag is<br>              Linux-specific; define <b>_GNU_SOURCE </b>to obtain its definition.<br><br>       <b>AT_SYMLINK_NOFOLLOW</b><br>              If <i>pathname</i> is a symbolic link, do not dereference it: instead<br>              operate on the link itself, like <b>lchown</b>().  (By default,<br>              <b>fchownat</b>() dereferences symbolic links, like <b>chown</b>().)<br><br>       See openat(2) for an explanation of the need for <b>fchownat</b>().<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       Depending on the filesystem, errors other than those listed below can<br>       be returned.<br><br>       The more general errors for <b>chown</b>() are listed below.<br><br>       <b>EACCES </b>Search permission is denied on a component of the path prefix.<br>              (See also path_resolution(7).)<br><br>       <b>EFAULT </b><i>pathname</i> points outside your accessible address space.<br><br>       <b>ELOOP  </b>Too many symbolic links were encountered in resolving<br>              <i>pathname</i>.<br><br>       <b>ENAMETOOLONG</b><br>              <i>pathname</i> is too long.<br><br>       <b>ENOENT </b>The file does not exist.<br><br>       <b>ENOMEM </b>Insufficient kernel memory was available.<br><br>       <b>ENOTDIR</b><br>              A component of the path prefix is not a directory.<br><br>       <b>EPERM  </b>The calling process did not have the required permissions (see<br>              above) to change owner and/or group.<br><br>       <b>EROFS  </b>The named file resides on a read-only filesystem.<br><br>       The general errors for <b>fchown</b>() are listed below:<br><br>       <b>EBADF  </b>The descriptor is not valid.<br><br>       <b>EIO    </b>A low-level I/O error occurred while modifying the inode.<br><br>       <b>ENOENT </b>See above.<br><br>       <b>EPERM  </b>See above.<br><br>       <b>EROFS  </b>See above.<br><br>       The same errors that occur for <b>chown</b>() can also occur for <b>fchownat</b>().<br>       The following additional errors can occur for <b>fchownat</b>():<br><br>       <b>EBADF  </b><i>dirfd</i> is not a valid file descriptor.<br><br>       <b>EINVAL </b>Invalid flag specified in <i>flags</i>.<br><br>       <b>ENOTDIR</b><br>              <i>pathname</i> is relative and <i>dirfd</i> is a file descriptor referring<br>              to a file other than a directory.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>fchownat</b>() was added to Linux in kernel 2.6.16; library support was<br>       added to glibc in version 2.4.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>chown</b>(), <b>fchown</b>(), <b>lchown</b>(): 4.4BSD, SVr4, POSIX.1-2001,<br>       POSIX.1-2008.<br><br>       The 4.4BSD version can be used only by the superuser (that is,<br>       ordinary users cannot give away files).<br><br>       <b>fchownat</b>(): POSIX.1-2008.<br></pre><br><h2>NOTES  </h2><pre><br>   <b>Ownership of new files</b><br>       When a new file is created (by, for example, open(2) or mkdir(2)),<br>       its owner is made the same as the filesystem user ID of the creating<br>       process.  The group of the file depends on a range of factors,<br>       including the type of filesystem, the options used to mount the<br>       filesystem, and whether or not the set-group-ID mode bit is enabled<br>       on the parent directory.  If the filesystem supports the <i>-o grpid</i><br>       (or, synonymously <i>-o bsdgroups</i>) and <i>-o nogrpid</i> (or, synonymously<br>       <i>-o sysvgroups</i>) mount(8) options, then the rules are as follows:<br><br>       * If the filesystem is mounted with <i>-o grpid</i>, then the group of a new<br>         file is made the same as that of the parent directory.<br><br>       * If the filesystem is mounted with <i>-o nogrpid</i> and the set-group-ID<br>         bit is disabled on the parent directory, then the group of a new<br>         file is made the same as the process's filesystem GID.<br><br>       * If the filesystem is mounted with <i>-o nogrpid</i> and the set-group-ID<br>         bit is enabled on the parent directory, then the group of a new<br>         file is made the same as that of the parent directory.<br><br>       As at Linux 2.6.25, the <i>-o grpid</i> and <i>-o nogrpid</i> mount options are<br>       supported by ext2, ext3, ext4, and XFS.  Filesystems that don't<br>       support these mount options follow the <i>-o nogrpid</i> rules.<br><br>   <b>Glibc notes</b><br>       On older kernels where <b>fchownat</b>() is unavailable, the glibc wrapper<br>       function falls back to the use of <b>chown</b>() and <b>lchown</b>().  When<br>       <i>pathname</i> is a relative pathname, glibc constructs a pathname based on<br>       the symbolic link in <i>/proc/self/fd</i> that corresponds to the <i>dirfd</i><br>       argument.<br><br>   <b>NFS</b><br>       The <b>chown</b>() semantics are deliberately violated on NFS filesystems<br>       which have UID mapping enabled.  Additionally, the semantics of all<br>       system calls which access the file contents are violated, because<br>       <b>chown</b>() may cause immediate access revocation on already open files.<br>       Client side caching may lead to a delay between the time where<br>       ownership have been changed to allow access for a user and the time<br>       where the file can actually be accessed by the user on other clients.<br><br>   <b>Historical details</b><br>       The original Linux <b>chown</b>(), <b>fchown</b>(), and <b>lchown</b>() system calls<br>       supported only 16-bit user and group IDs.  Subsequently, Linux 2.4<br>       added <b>chown32</b>(), <b>fchown32</b>(), and <b>lchown32</b>(), supporting 32-bit IDs.<br>       The glibc <b>chown</b>(), <b>fchown</b>(), and <b>lchown</b>() wrapper functions<br>       transparently deal with the variations across kernel versions.<br><br>       In versions of Linux prior to 2.1.81 (and distinct from 2.1.46),<br>       <b>chown</b>() did not follow symbolic links.  Since Linux 2.1.81, <b>chown</b>()<br>       does follow symbolic links, and there is a new system call <b>lchown</b>()<br>       that does not follow symbolic links.  Since Linux 2.1.86, this new<br>       call (that has the same semantics as the old <b>chown</b>()) has got the<br>       same syscall number, and <b>chown</b>() got the newly introduced number.<br></pre><br><h2>EXAMPLE  </h2><pre><br>       The following program changes the ownership of the file named in its<br>       second command-line argument to the value specified in its first<br>       command-line argument.  The new owner can be specified either as a<br>       numeric user ID, or as a username (which is converted to a user ID by<br>       using getpwnam(3) to perform a lookup in the system password file).<br><br>   <b>Program source</b><br>       #include &lt;pwd.h&gt;<br>       #include &lt;stdio.h&gt;<br>       #include &lt;stdlib.h&gt;<br>       #include &lt;unistd.h&gt;<br><br>       int<br>       main(int argc, char *argv[])<br>       {<br>           uid_t uid;<br>           struct passwd *pwd;<br>           char *endptr;<br><br>           if (argc != 3 || argv[1][0] == '\\0') {<br>               fprintf(stderr, \"%s &lt;owner&gt; &lt;file&gt;\\n\", argv[0]);<br>               exit(EXIT_FAILURE);<br>           }<br><br>           uid = strtol(argv[1], &amp;endptr, 10);  /* Allow a numeric string */<br><br>           if (*endptr != '\\0') {         /* Was not pure numeric string */<br>               pwd = getpwnam(argv[1]);   /* Try getting UID for username */<br>               if (pwd == NULL) {<br>                   perror(\"getpwnam\");<br>                   exit(EXIT_FAILURE);<br>               }<br><br>               uid = pwd-&gt;pw_uid;<br>           }<br><br>           if (chown(argv[2], uid, -1) == -1) {<br>               perror(\"chown\");<br>               exit(EXIT_FAILURE);<br>           }<br><br>           exit(EXIT_SUCCESS);<br>       }<br></pre><br><h2>SEE ALSO  </h2><pre><br>       chmod(2), flock(2), path_resolution(7), symlink(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-05-07                         CHOWN(2)</span><br></pre><br>"}