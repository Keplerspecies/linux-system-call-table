{"Man page": "<pre><br><span class=\"headline\">RESTART_SYSCALL(2)        Linux Programmer's Manual       RESTART_SYSCALL(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       restart_syscall  - restart a system call after interruption by a stop<br>       signal<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>int restart_syscall(void);</b><br><br>       <i>Note</i>: There is no glibc wrapper for this system call; see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>restart_syscall</b>() system call is used to restart certain system<br>       calls after a process that was stopped by a signal (e.g., <b>SIGSTOP </b>or<br>       <b>SIGTSTP</b>) is later resumed after receiving a <b>SIGCONT </b>signal.  This<br>       system call is designed only for internal use by the kernel.<br><br>       <b>restart_syscall</b>() is used for restarting only those system calls<br>       that, when restarted, should adjust their time-related parameters&#8212;<br>       namely poll(2) (since Linux 2.6.24), nanosleep(2) (since Linux 2.6),<br>       clock_nanosleep(2) (since Linux 2.6), and futex(2), when employed<br>       with the <b>FUTEX_WAIT </b>(since Linux 2.6.22) and <b>FUTEX_WAIT_BITSET </b>(since<br>       Linux 2.6.31) operations.  <b>restart_syscall</b>() restarts the interrupted<br>       system call with a time argument that is suitably adjusted to account<br>       for the time that has already elapsed (including the time where the<br>       process was stopped by a signal).  Without the <b>restart_syscall</b>()<br>       mechanism, restarting these system calls would not correctly deduct<br>       the already elapsed time when the process continued execution.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       The return value of <b>restart_syscall</b>() is the return value of whatever<br>       system call is being restarted.<br></pre><br><h2>ERRORS  </h2><pre><br>       <i>errno</i> is set as per the errors for whatever system call is being<br>       restarted by <b>restart_syscall</b>().<br></pre><br><h2>VERSIONS  </h2><pre><br>       The <b>restart_syscall</b>() system call is present since Linux 2.6.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This system call is Linux-specific.<br></pre><br><h2>NOTES  </h2><pre><br>       There is no glibc wrapper for this system call, because it is<br>       intended for use only by the kernel and should never be called by<br>       applications.<br><br>       The kernel uses <b>restart_syscall</b>() to ensure that when a system call<br>       is restarted after a process has been stopped by a signal and then<br>       resumed by <b>SIGCONT</b>, then the time that the process spent in the<br>       stopped state is counted against the timeout interval specified in<br>       the original system call.  In the case of system calls that take a<br>       timeout argument and automatically restart after a stop signal plus<br>       <b>SIGCONT</b>, but which do not have the restart_syscall(2) mechanism built<br>       in, then, after the process resumes execution, the time that the<br>       process spent in the stop state is <i>not</i> counted against the timeout<br>       value.  Notable examples of system calls that suffer this problem are<br>       ppoll(2), select(2), and pselect(2).<br><br>       From user space, the operation of <b>restart_syscall</b>() is largely<br>       invisible: to the process that made the system call that is<br>       restarted, it appears as though that system call executed and<br>       returned in the usual fashion.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       sigaction(2), sigreturn(2), signal(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2014-12-31               RESTART_SYSCALL(2)</span><br></pre><br>"}