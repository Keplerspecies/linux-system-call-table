{"Man page": "<pre><br><span class=\"headline\">GETTIMEOFDAY(2)           Linux Programmer's Manual          GETTIMEOFDAY(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       gettimeofday, settimeofday - get / set time<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/time.h&gt;</b><br><br>       <b>int gettimeofday(struct timeval *</b><i>tv</i><b>, struct timezone *</b><i>tz</i><b>);</b><br><br>       <b>int settimeofday(const struct timeval *</b><i>tv</i><b>, const struct timezone *</b><i>tz</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>settimeofday</b>(): _BSD_SOURCE<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The functions <b>gettimeofday</b>() and <b>settimeofday</b>() can get and set the<br>       time as well as a timezone.  The <i>tv</i> argument is a <i>struct timeval</i> (as<br>       specified in <i>&lt;sys/time.h&gt;</i>):<br><br>           struct timeval {<br>               time_t      tv_sec;     /* seconds */<br>               suseconds_t tv_usec;    /* microseconds */<br>           };<br><br>       and gives the number of seconds and microseconds since the Epoch (see<br>       time(2)).  The <i>tz</i> argument is a <i>struct timezone</i>:<br><br>           struct timezone {<br>               int tz_minuteswest;     /* minutes west of Greenwich */<br>               int tz_dsttime;         /* type of DST correction */<br>           };<br><br>       If either <i>tv</i> or <i>tz</i> is NULL, the corresponding structure is not set or<br>       returned.  (However, compilation warnings will result if <i>tv</i> is NULL.)<br><br>       The use of the <i>timezone</i> structure is obsolete; the <i>tz</i> argument should<br>       normally be specified as NULL.  (See NOTES below.)<br><br>       Under Linux, there are some peculiar \"warp clock\" semantics<br>       associated with the <b>settimeofday</b>() system call if on the very first<br>       call (after booting) that has a non-NULL <i>tz</i> argument, the <i>tv</i> argument<br>       is NULL and the <i>tz_minuteswest</i> field is nonzero.  (The <i>tz_dsttime</i><br>       field should be zero for this case.)  In such a case it is assumed<br>       that the CMOS clock is on local time, and that it has to be<br>       incremented by this amount to get UTC system time.  No doubt it is a<br>       bad idea to use this feature.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       <b>gettimeofday</b>() and <b>settimeofday</b>() return 0 for success, or -1 for<br>       failure (in which case <i>errno</i> is set appropriately).<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b>One of <i>tv</i> or <i>tz</i> pointed outside the accessible address space.<br><br>       <b>EINVAL </b>Timezone (or something else) is invalid.<br><br>       <b>EPERM  </b>The calling process has insufficient privilege to call<br>              <b>settimeofday</b>(); under Linux the <b>CAP_SYS_TIME </b>capability is<br>              required.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       SVr4, 4.3BSD.  POSIX.1-2001 describes <b>gettimeofday</b>() but not<br>       <b>settimeofday</b>().  POSIX.1-2008 marks <b>gettimeofday</b>() as obsolete,<br>       recommending the use of clock_gettime(2) instead.<br></pre><br><h2>NOTES  </h2><pre><br>       The time returned by <b>gettimeofday</b>() <i>is</i> affected by discontinuous<br>       jumps in the system time (e.g., if the system administrator manually<br>       changes the system time).  If you need a monotonically increasing<br>       clock, see clock_gettime(2).<br><br>       Macros for operating on <i>timeval</i> structures are described in<br>       timeradd(3).<br><br>       Traditionally, the fields of <i>struct timeval</i> were of type <i>long</i>.<br><br>       The <i>tz_dsttime</i> field has never been used under Linux.  Thus, the<br>       following is purely of historic interest.<br><br>       On old systems, the field <i>tz_dsttime</i> contains a symbolic constant<br>       (values are given below) that indicates in which part of the year<br>       Daylight Saving Time is in force.  (Note: this value is constant<br>       throughout the year: it does not indicate that DST is in force, it<br>       just selects an algorithm.)  The daylight saving time algorithms<br>       defined are as follows:<br><br>           <b>DST_NONE     </b>/* not on DST */<br>           <b>DST_USA      </b>/* USA style DST */<br>           <b>DST_AUST     </b>/* Australian style DST */<br>           <b>DST_WET      </b>/* Western European DST */<br>           <b>DST_MET      </b>/* Middle European DST */<br>           <b>DST_EET      </b>/* Eastern European DST */<br>           <b>DST_CAN      </b>/* Canada */<br>           <b>DST_GB       </b>/* Great Britain and Eire */<br>           <b>DST_RUM      </b>/* Romania */<br>           <b>DST_TUR      </b>/* Turkey */<br>           <b>DST_AUSTALT  </b>/* Australian style with shift in 1986 */<br><br>       Of course it turned out that the period in which Daylight Saving Time<br>       is in force cannot be given by a simple algorithm, one per country;<br>       indeed, this period is determined by unpredictable political<br>       decisions.  So this method of representing timezones has been<br>       abandoned.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       date(1), adjtimex(2), clock_gettime(2), time(2), ctime(3), ftime(3),<br>       timeradd(3), capabilities(7), time(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2012-04-26                  GETTIMEOFDAY(2)</span><br></pre><br>"}