{"Man page": "<pre><br><span class=\"headline\">SET_TID_ADDRESS(2)        Linux Programmer's Manual       SET_TID_ADDRESS(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       set_tid_address - set pointer to thread ID<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;linux/unistd.h&gt;</b><br><br>       <b>long set_tid_address(int *</b><i>tidptr</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       For each thread, the kernel maintains two attributes (addresses)<br>       called <i>set_child_tid</i> and <i>clear_child_tid</i>.  These two attributes<br>       contain the value NULL by default.<br><br>       <i>set_child_tid</i><br>              If a thread is started using clone(2) with the<br>              <b>CLONE_CHILD_SETTID </b>flag, <i>set_child_tid</i> is set to the value<br>              passed in the <i>ctid</i> argument of that system call.<br><br>              When <i>set_child_tid</i> is set, the very first thing the new thread<br>              does is to write its thread ID at this address.<br><br>       <i>clear_child_tid</i><br>              If a thread is started using clone(2) with the<br>              <b>CLONE_CHILD_CLEARTID </b>flag, <i>clear_child_tid</i> is set to the value<br>              passed in the <i>ctid</i> argument of that system call.<br><br>       The system call <b>set_tid_address</b>() sets the <i>clear_child_tid</i> value for<br>       the calling thread to <i>tidptr</i>.<br><br>       When a thread whose <i>clear_child_tid</i> is not NULL terminates, then, if<br>       the thread is sharing memory with other threads, then 0 is written at<br>       the address specified in <i>clear_child_tid</i> and the kernel performs the<br>       following operation:<br><br>           futex(clear_child_tid, FUTEX_WAKE, 1, NULL, NULL, 0);<br><br>       The effect of this operation is to wake a single thread that is<br>       performing a futex wait on the memory location.  Errors from the<br>       futex wake operation are ignored.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       <b>set_tid_address</b>() always returns the caller's thread ID.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>set_tid_address</b>() always succeeds.<br></pre><br><h2>VERSIONS  </h2><pre><br>       This call is present since Linux 2.5.48.  Details as given here are<br>       valid since Linux 2.5.49.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This system call is Linux-specific.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       clone(2), futex(2), gettid(2)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2014-07-08               SET_TID_ADDRESS(2)</span><br></pre><br>"}