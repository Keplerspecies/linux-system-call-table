{"Man page": "<pre><br><span class=\"headline\">MINCORE(2)                Linux Programmer's Manual               MINCORE(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       mincore - determine whether pages are resident in memory<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br>       <b>#include &lt;sys/mman.h&gt;</b><br><br>       <b>int mincore(void *</b><i>addr</i><b>, size_t </b><i>length</i><b>, unsigned char *</b><i>vec</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>mincore</b>(): _BSD_SOURCE || _SVID_SOURCE<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>mincore</b>() returns a vector that indicates whether pages of the<br>       calling process's virtual memory are resident in core (RAM), and so<br>       will not cause a disk access (page fault) if referenced.  The kernel<br>       returns residency information about the pages starting at the address<br>       <i>addr</i>, and continuing for <i>length</i> bytes.<br><br>       The <i>addr</i> argument must be a multiple of the system page size.  The<br>       <i>length</i> argument need not be a multiple of the page size, but since<br>       residency information is returned for whole pages, <i>length</i> is<br>       effectively rounded up to the next multiple of the page size.  One<br>       may obtain the page size (<b>PAGE_SIZE</b>) using <i>sysconf(_SC_PAGESIZE)</i>.<br><br>       The <i>vec</i> argument must point to an array containing at least<br>       <i>(length+PAGE_SIZE-1) / PAGE_SIZE</i> bytes.  On return, the least<br>       significant bit of each byte will be set if the corresponding page is<br>       currently resident in memory, and be clear otherwise.  (The settings<br>       of the other bits in each byte are undefined; these bits are reserved<br>       for possible later use.)  Of course the information returned in <i>vec</i><br>       is only a snapshot: pages that are not locked in memory can come and<br>       go at any moment, and the contents of <i>vec</i> may already be stale by the<br>       time this call returns.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>mincore</b>() returns zero.  On error, -1 is returned, and<br>       <i>errno</i> is set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EAGAIN </b>kernel is temporarily out of resources.<br><br>       <b>EFAULT </b><i>vec</i> points to an invalid address.<br><br>       <b>EINVAL </b><i>addr</i> is not a multiple of the page size.<br><br>       <b>ENOMEM </b><i>length</i> is greater than (<i>TASK_SIZE</i> - <i>addr</i>).  (This could occur<br>              if a negative value is specified for <i>length</i>, since that value<br>              will be interpreted as a large unsigned integer.)  In Linux<br>              2.6.11 and earlier, the error <b>EINVAL </b>was returned for this<br>              condition.<br><br>       <b>ENOMEM </b><i>addr</i> to <i>addr</i> + <i>length</i> contained unmapped memory.<br></pre><br><h2>VERSIONS  </h2><pre><br>       Available since Linux 2.3.99pre1 and glibc 2.2.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>mincore</b>() is not specified in POSIX.1, and it is not available on all<br>       UNIX implementations.<br></pre><br><h2>BUGS  </h2><pre><br>       Before kernel 2.6.21, <b>mincore</b>() did not return correct information<br>       for <b>MAP_PRIVATE </b>mappings, or for nonlinear mappings (established<br>       using remap_file_pages(2)).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       mlock(2), mmap(2)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2008-04-22                       MINCORE(2)</span><br></pre><br>"}