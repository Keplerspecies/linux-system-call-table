{"Man page": "<pre><br><span class=\"headline\">UMOUNT(2)                 Linux Programmer's Manual                UMOUNT(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       umount, umount2 - unmount filesystem<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/mount.h&gt;</b><br><br>       <b>int umount(const char *</b><i>target</i><b>);</b><br><br>       <b>int umount2(const char *</b><i>target</i><b>, int </b><i>flags</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>umount</b>() and <b>umount2</b>() remove the attachment of the (topmost)<br>       filesystem mounted on <i>target</i>.<br><br>       Appropriate privilege (Linux: the <b>CAP_SYS_ADMIN </b>capability) is<br>       required to unmount filesystems.<br><br>       Linux 2.1.116 added the <b>umount2</b>() system call, which, like <b>umount</b>(),<br>       unmounts a target, but allows additional <i>flags</i> controlling the<br>       behavior of the operation:<br><br>       <b>MNT_FORCE </b>(since Linux 2.1.116)<br>              Force unmount even if busy.  This can cause data loss.  (Only<br>              for NFS mounts.)<br><br>       <b>MNT_DETACH </b>(since Linux 2.4.11)<br>              Perform a lazy unmount: make the mount point unavailable for<br>              new accesses, immediately disconnect the filesystem and all<br>              filesystems mounted below it from each other and from the<br>              mount table, and actually perform the unmount when the mount<br>              point ceases to be busy.<br><br>       <b>MNT_EXPIRE </b>(since Linux 2.6.8)<br>              Mark the mount point as expired.  If a mount point is not<br>              currently in use, then an initial call to <b>umount2</b>() with this<br>              flag fails with the error <b>EAGAIN</b>, but marks the mount point as<br>              expired.  The mount point remains expired as long as it isn't<br>              accessed by any process.  A second <b>umount2</b>() call specifying<br>              <b>MNT_EXPIRE </b>unmounts an expired mount point.  This flag cannot<br>              be specified with either <b>MNT_FORCE </b>or <b>MNT_DETACH</b>.<br><br>       <b>UMOUNT_NOFOLLOW </b>(since Linux 2.6.34)<br>              Don't dereference <i>target</i> if it is a symbolic link.  This flag<br>              allows security problems to be avoided in set-user-ID-<i>root</i><br>              programs that allow unprivileged users to unmount filesystems.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       The error values given below result from filesystem type independent<br>       errors.  Each filesystem type may have its own special errors and its<br>       own special behavior.  See the Linux kernel source code for details.<br><br>       <b>EAGAIN </b>A call to <b>umount2</b>() specifying <b>MNT_EXPIRE </b>successfully marked<br>              an unbusy filesystem as expired.<br><br>       <b>EBUSY  </b><i>target</i> could not be unmounted because it is busy.<br><br>       <b>EFAULT </b><i>target</i> points outside the user address space.<br><br>       <b>EINVAL </b><i>target</i> is not a mount point.<br><br>       <b>EINVAL umount2</b>() was called with <b>MNT_EXPIRE </b>and either <b>MNT_DETACH </b>or<br>              <b>MNT_FORCE</b>.<br><br>       <b>EINVAL </b>(since Linux 2.6.34)<br>              <b>umount2</b>() was called with an invalid flag value in <i>flags</i>.<br><br>       <b>ENAMETOOLONG</b><br>              A pathname was longer than <b>MAXPATHLEN</b>.<br><br>       <b>ENOENT </b>A pathname was empty or had a nonexistent component.<br><br>       <b>ENOMEM </b>The kernel could not allocate a free page to copy filenames or<br>              data into.<br><br>       <b>EPERM  </b>The caller does not have the required privileges.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>MNT_DETACH </b>and <b>MNT_EXPIRE </b>are available in glibc since version 2.11.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       These functions are Linux-specific and should not be used in programs<br>       intended to be portable.<br></pre><br><h2>NOTES  </h2><pre><br>   <b>umount() and shared mount points</b><br>       Shared mount points cause any mount activity on a mount point,<br>       including umount(2) operations, to be forwarded to every shared mount<br>       point in the peer group and every slave mount of that peer group.<br>       This means that umount(2) of any peer in a set of shared mounts will<br>       cause all of its peers to be unmounted and all of their slaves to be<br>       unmounted as well.<br><br>       This propagation of unmount activity can be particularly surprising<br>       on systems where every mount point is shared by default.  On such<br>       systems, recursively bind mounting the root directory of the<br>       filesystem onto a subdirectory and then later unmounting that<br>       subdirectory with <b>MNT_DETACH </b>will cause every mount in the mount<br>       namespace to be lazily unmounted.<br><br>       To ensure umount(2) does not propagate in this fashion, the mount<br>       point may be remounted using a mount(2) call with a <i>mount_flags</i><br>       argument that includes both <b>MS_REC </b>and <b>MS_PRIVATE </b>prior to umount(2)<br>       being called.<br><br>   <b>Historical details</b><br>       The original <b>umount</b>() function was called as <i>umount(device)</i> and would<br>       return <b>ENOTBLK </b>when called with something other than a block device.<br>       In Linux 0.98p4, a call <i>umount(dir)</i> was added, in order to support<br>       anonymous devices.  In Linux 2.3.99-pre7, the call <i>umount(device)</i> was<br>       removed, leaving only <i>umount(dir)</i> (since now devices can be mounted<br>       in more than one place, so specifying the device does not suffice).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       mount(2), path_resolution(7), mount(8), umount(8)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-03-29                        UMOUNT(2)</span><br></pre><br>"}