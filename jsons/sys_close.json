{"Man page": "<pre><br><span class=\"headline\">CLOSE(2)                  Linux Programmer's Manual                 CLOSE(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       close - close a file descriptor<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int close(int </b><i>fd</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>close</b>() closes a file descriptor, so that it no longer refers to any<br>       file and may be reused.  Any record locks (see fcntl(2)) held on the<br>       file it was associated with, and owned by the process, are removed<br>       (regardless of the file descriptor that was used to obtain the lock).<br><br>       If <i>fd</i> is the last file descriptor referring to the underlying open<br>       file description (see open(2)), the resources associated with the<br>       open file description are freed; if the descriptor was the last<br>       reference to a file which has been removed using unlink(2), the file<br>       is deleted.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       <b>close</b>() returns zero on success.  On error, -1 is returned, and <i>errno</i><br>       is set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBADF  </b><i>fd</i> isn't a valid open file descriptor.<br><br>       <b>EINTR  </b>The <b>close</b>() call was interrupted by a signal; see signal(7).<br><br>       <b>EIO    </b>An I/O error occurred.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD.<br></pre><br><h2>NOTES  </h2><pre><br>       Not checking the return value of <b>close</b>() is a common but nevertheless<br>       serious programming error.  It is quite possible that errors on a<br>       previous write(2) operation are first reported at the final <b>close</b>().<br>       Not checking the return value when closing the file may lead to<br>       silent loss of data.  This can especially be observed with NFS and<br>       with disk quota.  Note that the return value should be used only for<br>       diagnostics.  In particular <b>close</b>() should not be retried after an<br>       <b>EINTR </b>since this may cause a reused descriptor from another thread to<br>       be closed.<br><br>       A successful close does not guarantee that the data has been<br>       successfully saved to disk, as the kernel defers writes.  It is not<br>       common for a filesystem to flush the buffers when the stream is<br>       closed.  If you need to be sure that the data is physically stored,<br>       use fsync(2).  (It will depend on the disk hardware at this point.)<br><br>       It is probably unwise to close file descriptors while they may be in<br>       use by system calls in other threads in the same process.  Since a<br>       file descriptor may be reused, there are some obscure race conditions<br>       that may cause unintended side effects.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       fcntl(2), fsync(2), open(2), shutdown(2), unlink(2), fclose(3)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                         CLOSE(2)</span><br></pre><br>"}