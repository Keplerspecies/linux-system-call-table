{"Man page": "<pre><br><span class=\"headline\">LLSEEK(2)                 Linux Programmer's Manual                LLSEEK(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       _llseek - reposition read/write file offset<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int _llseek(unsigned int </b><i>fd</i><b>, unsigned long </b><i>offset_high</i><b>,</b><br>                   <b>unsigned long </b><i>offset_low</i><b>, loff_t *</b><i>result</i><b>,</b><br>                   <b>unsigned int </b><i>whence</i><b>);</b><br><br>       <i>Note</i>: There is no glibc wrapper for this system call; see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>_llseek</b>() function repositions the offset of the open file<br>       associated with the file descriptor <i>fd</i> to <i>(offset_high&lt;&lt;32) |</i><br>       <i>offset_low</i> bytes relative to the beginning of the file, the current<br>       position in the file, or the end of the file, depending on whether<br>       <i>whence</i> is <b>SEEK_SET</b>, <b>SEEK_CUR</b>, or <b>SEEK_END</b>, respectively.  It returns<br>       the resulting file position in the argument <i>result</i>.<br><br>       This system call exists on various 32-bit platforms to support<br>       seeking to large file offsets.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       Upon successful completion, <b>_llseek</b>() returns 0.  Otherwise, a value<br>       of -1 is returned and <i>errno</i> is set to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBADF  </b><i>fd</i> is not an open file descriptor.<br><br>       <b>EFAULT </b>Problem with copying results to user space.<br><br>       <b>EINVAL </b><i>whence</i> is invalid.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This function is Linux-specific, and should not be used in programs<br>       intended to be portable.<br></pre><br><h2>NOTES  </h2><pre><br>       Glibc does not provide a wrapper for this system call.  To invoke it<br>       directly, use syscall(2).  However, you probably want to use the<br>       lseek(2) wrapper function instead.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       lseek(2), lseek64(3)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-04-19                        LLSEEK(2)</span><br></pre><br>"}