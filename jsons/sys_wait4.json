{"Man page": "<pre><br><span class=\"headline\">WAIT4(2)                  Linux Programmer's Manual                 WAIT4(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       wait3, wait4 - wait for process to change state, BSD style<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;sys/time.h&gt;</b><br>       <b>#include &lt;sys/resource.h&gt;</b><br>       <b>#include &lt;sys/wait.h&gt;</b><br><br>       <b>pid_t wait3(int *</b><i>status</i><b>, int </b><i>options</i><b>,</b><br>                   <b>struct rusage *</b><i>rusage</i><b>);</b><br><br>       <b>pid_t wait4(pid_t </b><i>pid</i><b>, int *</b><i>status</i><b>, int </b><i>options</i><b>,</b><br>                   <b>struct rusage *</b><i>rusage</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>wait3</b>():<br>           _BSD_SOURCE || _XOPEN_SOURCE &gt;= 500 ||<br>           _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED<br>       <b>wait4</b>():<br>           _BSD_SOURCE<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       These functions are obsolete; use waitpid(2) or waitid(2) in new<br>       programs.<br><br>       The <b>wait3</b>() and <b>wait4</b>() system calls are similar to waitpid(2), but<br>       additionally return resource usage information about the child in the<br>       structure pointed to by <i>rusage</i>.<br><br>       Other than the use of the <i>rusage</i> argument, the following <b>wait3</b>()<br>       call:<br><br>           wait3(status, options, rusage);<br><br>       is equivalent to:<br><br>           waitpid(-1, status, options);<br><br>       Similarly, the following <b>wait4</b>() call:<br><br>           wait4(pid, status, options, rusage);<br><br>       is equivalent to:<br><br>           waitpid(pid, status, options);<br><br>       In other words, <b>wait3</b>() waits of any child, while <b>wait4</b>() can be used<br>       to select a specific child, or children, on which to wait.  See<br>       wait(2) for further details.<br><br>       If <i>rusage</i> is not NULL, the <i>struct rusage</i> to which it points will be<br>       filled with accounting information about the child.  See getrusage(2)<br>       for details.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       As for waitpid(2).<br></pre><br><h2>ERRORS  </h2><pre><br>       As for waitpid(2).<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       4.3BSD.<br><br>       SUSv1 included a specification of <b>wait3</b>(); SUSv2 included <b>wait3</b>(),<br>       but marked it LEGACY; SUSv3 removed it.<br></pre><br><h2>NOTES  </h2><pre><br>       Including <i>&lt;sys/time.h&gt;</i> is not required these days, but increases<br>       portability.  (Indeed, <i>&lt;sys/resource.h&gt;</i> defines the <i>rusage</i> structure<br>       with fields of type <i>struct timeval</i> defined in <i>&lt;sys/time.h&gt;</i>.)<br><br>   <b>C library/kernel differences</b><br>       On Linux, <b>wait3</b>() is a library function implemented on top of the<br>       <b>wait4</b>() system call.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       fork(2), getrusage(2), sigaction(2), signal(2), wait(2), signal(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                         WAIT4(2)</span><br></pre><br>"}