{"Man page": "<pre><br><span class=\"headline\">PREAD(2)                  Linux Programmer's Manual                 PREAD(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       pread,  pwrite  -  read from or write to a file descriptor at a given<br>       offset<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>ssize_t pread(int </b><i>fd</i><b>, void *</b><i>buf</i><b>, size_t </b><i>count</i><b>, off_t </b><i>offset</i><b>);</b><br><br>       <b>ssize_t pwrite(int </b><i>fd</i><b>, const void *</b><i>buf</i><b>, size_t </b><i>count</i><b>, off_t </b><i>offset</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>pread</b>(), <b>pwrite</b>():<br>           _XOPEN_SOURCE &gt;= 500<br>           || /* Since glibc 2.12: */ _POSIX_C_SOURCE &gt;= 200809L<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>pread</b>() reads up to <i>count</i> bytes from file descriptor <i>fd</i> at offset<br>       <i>offset</i> (from the start of the file) into the buffer starting at <i>buf</i>.<br>       The file offset is not changed.<br><br>       <b>pwrite</b>() writes up to <i>count</i> bytes from the buffer starting at <i>buf</i> to<br>       the file descriptor <i>fd</i> at offset <i>offset</i>.  The file offset is not<br>       changed.<br><br>       The file referenced by <i>fd</i> must be capable of seeking.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>pread</b>() returns the number of bytes read (a return of<br>       zero indicates end of file) and <b>pwrite</b>() returns the number of bytes<br>       written.<br><br>       Note that is not an error for a successful call to transfer fewer<br>       bytes than requested (see read(2) and write(2)).<br><br>       On error, -1 is returned and <i>errno</i> is set to indicate the cause of<br>       the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>pread</b>() can fail and set <i>errno</i> to any error specified for read(2) or<br>       lseek(2).  <b>pwrite</b>() can fail and set <i>errno</i> to any error specified for<br>       write(2) or lseek(2).<br></pre><br><h2>VERSIONS  </h2><pre><br>       The <b>pread</b>() and <b>pwrite</b>() system calls were added to Linux in version<br>       2.1.60; the entries in the i386 system call table were added in<br>       2.1.69.  C library support (including emulation using lseek(2) on<br>       older kernels without the system calls) was added in glibc 2.1.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008.<br></pre><br><h2>NOTES  </h2><pre><br>       The <b>pread</b>() and <b>pwrite</b>() system calls are especially useful in<br>       multithreaded applications.  They allow multiple threads to perform<br>       I/O on the same file descriptor without being affected by changes to<br>       the file offset by other threads.<br><br>   <b>C library/kernel differences</b><br>       On Linux, the underlying system calls were renamed in kernel 2.6:<br>       <b>pread</b>() became <b>pread64</b>(), and <b>pwrite</b>() became <b>pwrite64</b>().  The system<br>       call numbers remained the same.  The glibc <b>pread</b>() and <b>pwrite</b>()<br>       wrapper functions transparently deal with the change.<br><br>       On some 32-bit architectures, the calling signature for these system<br>       calls differ, for the reasons described in syscall(2).<br></pre><br><h2>BUGS  </h2><pre><br>       POSIX requires that opening a file with the <b>O_APPEND </b>flag should have<br>       no effect on the location at which <b>pwrite</b>() writes data.  However, on<br>       Linux, if a file is opened with <b>O_APPEND</b>, <b>pwrite</b>() appends data to<br>       the end of the file, regardless of the value of <i>offset</i>.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       lseek(2), read(2), readv(2), write(2)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                         PREAD(2)</span><br></pre><br>"}