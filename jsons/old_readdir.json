{"Man page": "<pre><br><span class=\"headline\">READDIR(2)                Linux Programmer's Manual               READDIR(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       readdir - read directory entry<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>int readdir(unsigned int </b><i>fd</i><b>, struct old_linux_dirent *</b><i>dirp</i><b>,</b><br>                   <b>unsigned int </b><i>count</i><b>);</b><br><br>       <i>Note</i>: There is no glibc wrapper for this system call; see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       This is not the function you are interested in.  Look at readdir(3)<br>       for the POSIX conforming C library interface.  This page documents<br>       the bare kernel system call interface, which is superseded by<br>       getdents(2).<br><br>       <b>readdir</b>() reads one <i>old_linux_dirent</i> structure from the directory<br>       referred to by the file descriptor <i>fd</i> into the buffer pointed to by<br>       <i>dirp</i>.  The argument <i>count</i> is ignored; at most one <i>old_linux_dirent</i><br>       structure is read.<br><br>       The <i>old_linux_dirent</i> structure is declared as follows:<br><br>           struct old_linux_dirent {<br>               long  d_ino;              /* inode number */<br>               off_t d_off;              /* offset to this <i>old_linux_dirent</i> */<br>               unsigned short d_reclen;  /* length of this <i>d_name</i> */<br>               char  d_name[NAME_MAX+1]; /* filename (null-terminated) */<br>           }<br><br>       <i>d_ino</i> is an inode number.  <i>d_off</i> is the distance from the start of<br>       the directory to this <i>old_linux_dirent</i>.  <i>d_reclen</i> is the size of<br>       <i>d_name</i>, not counting the terminating null byte ('\\0').  <i>d_name</i> is a<br>       null-terminated filename.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, 1 is returned.  On end of directory, 0 is returned.  On<br>       error, -1 is returned, and <i>errno</i> is set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBADF  </b>Invalid file descriptor <i>fd</i>.<br><br>       <b>EFAULT </b>Argument points outside the calling process's address space.<br><br>       <b>EINVAL </b>Result buffer is too small.<br><br>       <b>ENOENT </b>No such directory.<br><br>       <b>ENOTDIR</b><br>              File descriptor does not refer to a directory.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This system call is Linux-specific.<br></pre><br><h2>NOTES  </h2><pre><br>       Glibc does not provide a wrapper for this system call; call it using<br>       syscall(2).  You will need to define the <i>old_linux_dirent</i> structure<br>       yourself.  However, probably you should use readdir(3) instead.<br><br>       This system call does not exist on x86-64.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       getdents(2), readdir(3)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2013-06-21                       READDIR(2)</span><br></pre><br>"}