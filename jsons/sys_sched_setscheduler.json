{"Man page": "<pre><br><span class=\"headline\">SCHED_SETSCHEDULER(2)     Linux Programmer's Manual    SCHED_SETSCHEDULER(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       sched_setscheduler,  sched_getscheduler - set and get scheduling pol&#8208;<br>       icy/parameters<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sched.h&gt;</b><br><br>       <b>int sched_setscheduler(pid_t </b><i>pid</i><b>, int </b><i>policy</i><b>,</b><br>                              <b>const struct sched_param *</b><i>param</i><b>);</b><br><br>       <b>int sched_getscheduler(pid_t </b><i>pid</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>sched_setscheduler</b>() system call sets both the scheduling policy<br>       and parameters for the thread whose ID is specified in <i>pid</i>.  If <i>pid</i><br>       equals zero, the scheduling policy and parameters of the calling<br>       thread will be set.<br><br>       The scheduling parameters are specified in the <i>param</i> argument, which<br>       is a pointer to a structure of the following form:<br><br>           struct sched_param {<br>               ...<br>               int sched_priority;<br>               ...<br>           };<br><br>       In the current implementation, the structure contains only one field,<br>       <i>sched_priority</i>.  The interpretation of <i>param</i> depends on the selected<br>       policy.<br><br>       Currently, Linux supports the following \"normal\" (i.e., non-real-<br>       time) scheduling policies as values that may be specified in <i>policy</i>:<br><br>       <b>SCHED_OTHER   </b>the standard round-robin time-sharing policy;<br><br>       <b>SCHED_BATCH   </b>for \"batch\" style execution of processes; and<br><br>       <b>SCHED_IDLE    </b>for running <i>very</i> low priority background jobs.<br><br>       For each of the above policies, <i>param-&gt;sched_priority</i> must be 0.<br><br>       Various \"real-time\" policies are also supported, for special time-<br>       critical applications that need precise control over the way in which<br>       runnable threads are selected for execution.  For the rules governing<br>       when a process may use these policies, see sched(7).  The real-time<br>       policies that may be specified in <i>policy</i> are:<br><br>       <b>SCHED_FIFO    </b>a first-in, first-out policy; and<br><br>       <b>SCHED_RR      </b>a round-robin policy.<br><br>       For each of the above policies, <i>param-&gt;sched_priority</i> specifies a<br>       scheduling priority for the thread.  This is a number in the range<br>       returned by calling sched_get_priority_min(2) and<br>       sched_get_priority_max(2) with the specified <i>policy</i>.  On Linux, these<br>       system calls return, respectively, 1 and 99.<br><br>       Since Linux 2.6.32, the <b>SCHED_RESET_ON_FORK </b>flag can be ORed in<br>       <i>policy</i> when calling <b>sched_setscheduler</b>().  As a result of including<br>       this flag, children created by fork(2) do not inherit privileged<br>       scheduling policies.  See sched(7) for details.<br><br>       <b>sched_getscheduler</b>() returns the current scheduling policy of the<br>       thread identified by <i>pid</i>.  If <i>pid</i> equals zero, the policy of the<br>       calling thread will be retrieved.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>sched_setscheduler</b>() returns zero.  On success,<br>       <b>sched_getscheduler</b>() returns the policy for the thread (a nonnegative<br>       integer).  On error, both calls return -1, and <i>errno</i> is set<br>       appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EINVAL </b>Invalid arguments: <i>pid</i> is negative or <i>param</i> is NULL.<br><br>       <b>EINVAL </b>(<b>sched_setscheduler</b>()) <i>policy</i> is not one of the recognized<br>              policies.<br><br>       <b>EINVAL </b>(<b>sched_setscheduler</b>()) <i>param</i> does not make sense for the<br>              specified <i>policy</i>.<br><br>       <b>EPERM  </b>The calling thread does not have appropriate privileges.<br><br>       <b>ESRCH  </b>The thread whose ID is <i>pid</i> could not be found.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008 (but see BUGS below).  The <b>SCHED_BATCH </b>and<br>       <b>SCHED_IDLE </b>policies are Linux-specific.<br></pre><br><h2>NOTES  </h2><pre><br>       Further details of the semantics of all of the above \"normal\" and<br>       \"real-time\" scheduling policies can be found in sched(7).<br><br>       POSIX systems on which <b>sched_setscheduler</b>() and <b>sched_getscheduler</b>()<br>       are available define <b>_POSIX_PRIORITY_SCHEDULING </b>in <i>&lt;unistd.h&gt;</i>.<br><br>       POSIX.1 does not detail the permissions that an unprivileged thread<br>       requires in order to call <b>sched_setscheduler</b>(), and details vary<br>       across systems.  For example, the Solaris 7 manual page says that the<br>       real or effective user ID of the caller must match the real user ID<br>       or the save set-user-ID of the target.<br><br>       The scheduling policy and parameters are in fact per-thread<br>       attributes on Linux.  The value returned from a call to gettid(2) can<br>       be passed in the argument <i>pid</i>.  Specifying <i>pid</i> as 0 will operate on<br>       the attributes of the calling thread, and passing the value returned<br>       from a call to getpid(2) will operate on the attributes of the main<br>       thread of the thread group.  (If you are using the POSIX threads API,<br>       then use pthread_setschedparam(3), pthread_getschedparam(3), and<br>       pthread_setschedprio(3), instead of the <b>sched_*</b>(2) system calls.)<br></pre><br><h2>BUGS  </h2><pre><br>       POSIX.1 says that on success, <b>sched_setscheduler</b>() should return the<br>       previous scheduling policy.  Linux <b>sched_setscheduler</b>() does not<br>       conform to this requirement, since it always returns 0 on success.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       chrt(1), nice(2), sched_get_priority_max(2),<br>       sched_get_priority_min(2), sched_getaffinity(2), sched_getattr(2),<br>       sched_getparam(2), sched_rr_get_interval(2), sched_setaffinity(2),<br>       sched_setattr(2), sched_setparam(2), sched_yield(2), setpriority(2),<br>       capabilities(7), cpuset(7), sched(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08            SCHED_SETSCHEDULER(2)</span><br></pre><br>"}