{"Man page": "<pre><br><span class=\"headline\">SETREUID(2)               Linux Programmer's Manual              SETREUID(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       setreuid, setregid - set real and/or effective user or group ID<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int setreuid(uid_t </b><i>ruid</i><b>, uid_t </b><i>euid</i><b>);</b><br>       <b>int setregid(gid_t </b><i>rgid</i><b>, gid_t </b><i>egid</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>setreuid</b>(), <b>setregid</b>():<br>           _BSD_SOURCE || _XOPEN_SOURCE &gt;= 500 ||<br>           _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>setreuid</b>() sets real and effective user IDs of the calling process.<br><br>       Supplying a value of -1 for either the real or effective user ID<br>       forces the system to leave that ID unchanged.<br><br>       Unprivileged processes may only set the effective user ID to the real<br>       user ID, the effective user ID, or the saved set-user-ID.<br><br>       Unprivileged users may only set the real user ID to the real user ID<br>       or the effective user ID.<br><br>       If the real user ID is set (i.e., <i>ruid</i> is not -1) or the effective<br>       user ID is set to a value not equal to the previous real user ID, the<br>       saved set-user-ID will be set to the new effective user ID.<br><br>       Completely analogously, <b>setregid</b>() sets real and effective group ID's<br>       of the calling process, and all of the above holds with \"group\"<br>       instead of \"user\".<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br><br>       <i>Note</i>: there are cases where <b>setreuid</b>() can fail even when the caller<br>       is UID 0; it is a grave security error to omit checking for a failure<br>       return from <b>setreuid</b>().<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EAGAIN </b>The call would change the caller's real UID (i.e., <i>ruid</i> does<br>              not match the caller's real UID), but there was a temporary<br>              failure allocating the necessary kernel data structures.<br><br>       <b>EAGAIN </b><i>ruid</i> does not match the caller's real UID and this call would<br>              bring the number of processes belonging to the real user ID<br>              <i>ruid</i> over the caller's <b>RLIMIT_NPROC </b>resource limit.  Since<br>              Linux 3.1, this error case no longer occurs (but robust<br>              applications should check for this error); see the description<br>              of <b>EAGAIN </b>in execve(2).<br><br>       <b>EINVAL </b>One or more of the target user or group IDs is not valid in<br>              this user namespace.<br><br>       <b>EPERM  </b>The calling process is not privileged (Linux: does not have<br>              the <b>CAP_SETUID </b>capability in the case of <b>setreuid</b>(), or the<br>              <b>CAP_SETGID </b>capability in the case of <b>setregid</b>()) and a change<br>              other than (i) swapping the effective user (group) ID with the<br>              real user (group) ID, or (ii) setting one to the value of the<br>              other or (iii) setting the effective user (group) ID to the<br>              value of the saved set-user-ID (saved set-group-ID) was<br>              specified.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, 4.3BSD (<b>setreuid</b>() and <b>setregid</b>() first<br>       appeared in 4.2BSD).<br></pre><br><h2>NOTES  </h2><pre><br>       Setting the effective user (group) ID to the saved set-user-ID (saved<br>       set-group-ID) is possible since Linux 1.1.37 (1.1.38).<br><br>       POSIX.1 does not specify all of the UID changes that Linux permits<br>       for an unprivileged process.  For <b>setreuid</b>(), the effective user ID<br>       can be made the same as the real user ID or the saved set-user-ID,<br>       and it is unspecified whether unprivileged processes may set the real<br>       user ID to the real user ID, the effective user ID, or the saved set-<br>       user-ID.  For <b>setregid</b>(), the real group ID can be changed to the<br>       value of the saved set-group-ID, and the effective group ID can be<br>       changed to the value of the real group ID or the saved set-group-ID.<br>       The precise details of what ID changes are permitted vary across<br>       implementations.<br><br>       POSIX.1 makes no specification about the effect of these calls on the<br>       saved set-user-ID and saved set-group-ID.<br><br>       The original Linux <b>setreuid</b>() and <b>setregid</b>() system calls supported<br>       only 16-bit user and group IDs.  Subsequently, Linux 2.4 added<br>       <b>setreuid32</b>() and <b>setregid32</b>(), supporting 32-bit IDs.  The glibc<br>       <b>setreuid</b>() and <b>setregid</b>() wrapper functions transparently deal with<br>       the variations across kernel versions.<br><br>   <b>C library/kernel differences</b><br>       At the kernel level, user IDs and group IDs are a per-thread<br>       attribute.  However, POSIX requires that all threads in a process<br>       share the same credentials.  The NPTL threading implementation<br>       handles the POSIX requirements by providing wrapper functions for the<br>       various system calls that change process UIDs and GIDs.  These<br>       wrapper functions (including those for <b>setreuid</b>() and <b>setregid</b>())<br>       employ a signal-based technique to ensure that when one thread<br>       changes credentials, all of the other threads in the process also<br>       change their credentials.  For details, see nptl(7).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       getgid(2), getuid(2), seteuid(2), setgid(2), setresuid(2), setuid(2),<br>       capabilities(7), credentials(7), user_namespaces(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                      SETREUID(2)</span><br></pre><br>"}