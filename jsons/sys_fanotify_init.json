{"Man page": "<pre><br><span class=\"headline\">FANOTIFY_INIT(2)          Linux Programmer's Manual         FANOTIFY_INIT(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       fanotify_init - create and initialize fanotify group<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;fcntl.h&gt;</b><br>       <b>#include &lt;sys/fanotify.h&gt;</b><br><br>       <b>int fanotify_init(unsigned int </b><i>flags</i><b>, unsigned int </b><i>event_f_flags</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       For an overview of the fanotify API, see fanotify(7).<br><br>       <b>fanotify_init</b>() initializes a new fanotify group and returns a file<br>       descriptor for the event queue associated with the group.<br><br>       The file descriptor is used in calls to fanotify_mark(2) to specify<br>       the files, directories, and mounts for which fanotify events shall be<br>       created.  These events are received by reading from the file<br>       descriptor.  Some events are only informative, indicating that a file<br>       has been accessed.  Other events can be used to determine whether<br>       another application is permitted to access a file or directory.<br>       Permission to access filesystem objects is granted by writing to the<br>       file descriptor.<br><br>       Multiple programs may be using the fanotify interface at the same<br>       time to monitor the same files.<br><br>       In the current implementation, the number of fanotify groups per user<br>       is limited to 128.  This limit cannot be overridden.<br><br>       Calling <b>fanotify_init</b>() requires the <b>CAP_SYS_ADMIN </b>capability.  This<br>       constraint might be relaxed in future versions of the API.<br>       Therefore, certain additional capability checks have been implemented<br>       as indicated below.<br><br>       The <i>flags</i> argument contains a multi-bit field defining the<br>       notification class of the listening application and further single<br>       bit fields specifying the behavior of the file descriptor.<br><br>       If multiple listeners for permission events exist, the notification<br>       class is used to establish the sequence in which the listeners<br>       receive the events.<br><br>       Only one of the following notification classes may be specified in<br>       <i>flags</i>:<br><br>       <b>FAN_CLASS_PRE_CONTENT</b><br>              This value allows the receipt of events notifying that a file<br>              has been accessed and events for permission decisions if a<br>              file may be accessed.  It is intended for event listeners that<br>              need to access files before they contain their final data.<br>              This notification class might be used by hierarchical storage<br>              managers, for example.<br><br>       <b>FAN_CLASS_CONTENT</b><br>              This value allows the receipt of events notifying that a file<br>              has been accessed and events for permission decisions if a<br>              file may be accessed.  It is intended for event listeners that<br>              need to access files when they already contain their final<br>              content.  This notification class might be used by malware<br>              detection programs, for example.<br><br>       <b>FAN_CLASS_NOTIF</b><br>              This is the default value.  It does not need to be specified.<br>              This value only allows the receipt of events notifying that a<br>              file has been accessed.  Permission decisions before the file<br>              is accessed are not possible.<br><br>       Listeners with different notification classes will receive events in<br>       the order <b>FAN_CLASS_PRE_CONTENT</b>, <b>FAN_CLASS_CONTENT</b>, <b>FAN_CLASS_NOTIF</b>.<br>       The order of notification for listeners in the same notification<br>       class is undefined.<br><br>       The following bits can additionally be set in <i>flags</i>:<br><br>       <b>FAN_CLOEXEC</b><br>              Set the close-on-exec flag (<b>FD_CLOEXEC</b>) on the new file<br>              descriptor.  See the description of the <b>O_CLOEXEC </b>flag in<br>              open(2).<br><br>       <b>FAN_NONBLOCK</b><br>              Enable the nonblocking flag (<b>O_NONBLOCK</b>) for the file<br>              descriptor.  Reading from the file descriptor will not block.<br>              Instead, if no data is available, read(2) will fail with the<br>              error <b>EAGAIN</b>.<br><br>       <b>FAN_UNLIMITED_QUEUE</b><br>              Remove the limit of 16384 events for the event queue.  Use of<br>              this flag requires the <b>CAP_SYS_ADMIN </b>capability.<br><br>       <b>FAN_UNLIMITED_MARKS</b><br>              Remove the limit of 8192 marks.  Use of this flag requires the<br>              <b>CAP_SYS_ADMIN </b>capability.<br><br>       The <i>event_f_flags</i> argument defines the file status flags that will be<br>       set on the open file descriptions that are created for fanotify<br>       events.  For details of these flags, see the description of the <i>flags</i><br>       values in open(2).  <i>event_f_flags</i> includes a multi-bit field for the<br>       access mode.  This field can take the following values:<br><br>       <b>O_RDONLY</b><br>              This value allows only read access.<br><br>       <b>O_WRONLY</b><br>              This value allows only write access.<br><br>       <b>O_RDWR </b>This value allows read and write access.<br><br>       Additional bits can be set in <i>event_f_flags</i>.  The most useful values<br>       are:<br><br>       <b>O_LARGEFILE</b><br>              Enable support for files exceeding 2 GB.  Failing to set this<br>              flag will result in an <b>EOVERFLOW </b>error when trying to open a<br>              large file which is monitored by an fanotify group on a 32-bit<br>              system.<br><br>       <b>O_CLOEXEC</b><br>              Enable the close-on-exec flag for the file descriptor.  See<br>              the description of the <b>O_CLOEXEC </b>flag in open(2) for reasons<br>              why this may be useful.<br><br>       The following are also allowable: <b>O_APPEND</b>, <b>O_DSYNC</b>, <b>O_NOATIME</b>,<br>       <b>O_NONBLOCK</b>, and <b>O_SYNC</b>.  Specifying any other flag in <i>event_f_flags</i><br>       yields the error <b>EINVAL </b>(but see BUGS).<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>fanotify_init</b>() returns a new file descriptor.  On error,<br>       -1 is returned, and <i>errno</i> is set to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EINVAL </b>An invalid value was passed in <i>flags</i> or <i>event_f_flags</i>.<br>              <b>FAN_ALL_INIT_FLAGS </b>defines all allowable bits for <i>flags</i>.<br><br>       <b>EMFILE </b>The number of fanotify groups for this user exceeds 128.<br><br>       <b>ENOMEM </b>The allocation of memory for the notification group failed.<br><br>       <b>ENOSYS </b>This kernel does not implement <b>fanotify_init</b>().  The fanotify<br>              API is available only if the kernel was configured with<br>              <b>CONFIG_FANOTIFY</b>.<br><br>       <b>EPERM  </b>The operation is not permitted because the caller lacks the<br>              <b>CAP_SYS_ADMIN </b>capability.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>fanotify_init</b>() was introduced in version 2.6.36 of the Linux kernel<br>       and enabled in version 2.6.37.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This system call is Linux-specific.<br></pre><br><h2>BUGS  </h2><pre><br>       As of Linux 3.17, the following bug exists:<br><br>       *  The <b>O_CLOEXEC </b>is ignored when passed in <i>event_f_flags</i>.<br><br>       The following bug was present in Linux kernels before version 3.14:<br><br>       *  The <i>event_f_flags</i> argument is not checked for invalid flags.<br>          Flags that are intended only for internal use, such as <b>FMODE_EXEC</b>,<br>          can be set, and will consequently be set for the file descriptors<br>          returned when reading from the fanotify file descriptor.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       fanotify_mark(2), fanotify(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2014-10-02                 FANOTIFY_INIT(2)</span><br></pre><br>"}