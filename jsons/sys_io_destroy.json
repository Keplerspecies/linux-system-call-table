{"Man page": "<pre><br><span class=\"headline\">IO_DESTROY(2)             Linux Programmer's Manual            IO_DESTROY(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       io_destroy - destroy an asynchronous I/O context<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;linux/aio_abi.h&gt;          </b>/* Defines needed types */<br><br>       <b>int io_destroy(aio_context_t </b><i>ctx_id</i><b>);</b><br><br>       <i>Note</i>: There is no glibc wrapper for this system call; see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>io_destroy</b>() system call will attempt to cancel all outstanding<br>       asynchronous I/O operations against <i>ctx_id</i>, will block on the<br>       completion of all operations that could not be canceled, and will<br>       destroy the <i>ctx_id</i>.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>io_destroy</b>() returns 0.  For the failure return, see<br>       NOTES.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b>The context pointed to is invalid.<br><br>       <b>EINVAL </b>The AIO context specified by <i>ctx_id</i> is invalid.<br><br>       <b>ENOSYS io_destroy</b>() is not implemented on this architecture.<br></pre><br><h2>VERSIONS  </h2><pre><br>       The asynchronous I/O system calls first appeared in Linux 2.5.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>io_destroy</b>() is Linux-specific and should not be used in programs<br>       that are intended to be portable.<br></pre><br><h2>NOTES  </h2><pre><br>       Glibc does not provide a wrapper function for this system call.  You<br>       could invoke it using syscall(2).  But instead, you probably want to<br>       use the <b>io_destroy</b>() wrapper function provided by <i>libaio</i>.<br><br>       Note that the <i>libaio</i> wrapper function uses a different type<br>       (<i>io_context_t</i>) for the <i>ctx_id</i> argument.  Note also that the <i>libaio</i><br>       wrapper does not follow the usual C library conventions for<br>       indicating errors: on error it returns a negated error number (the<br>       negative of one of the values listed in ERRORS).  If the system call<br>       is invoked via syscall(2), then the return value follows the usual<br>       conventions for indicating an error: -1, with <i>errno</i> set to a<br>       (positive) value that indicates the error.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       io_cancel(2), io_getevents(2), io_setup(2), io_submit(2), aio(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2013-04-08                    IO_DESTROY(2)</span><br></pre><br>"}