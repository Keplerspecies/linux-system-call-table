{"Man page": "<pre><br><span class=\"headline\">SET_THREAD_AREA(2)        Linux Programmer's Manual       SET_THREAD_AREA(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       set_thread_area - set a GDT entry for thread-local storage<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;linux/unistd.h&gt;</b><br>       <b>#include &lt;asm/ldt.h&gt;</b><br><br>       <b>int get_thread_area(struct user_desc *</b><i>u_info</i><b>);</b><br>       <b>int set_thread_area(struct user_desc *</b><i>u_info</i><b>);</b><br><br>       <i>Note</i>: There are no glibc wrappers for these system calls; see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       Linux dedicates three global descriptor table (GDT) entries for<br>       thread-local storage.  For more information about the GDT, see the<br>       Intel Software Developer's Manual or the AMD Architecture Programming<br>       Manual.<br><br>       Both of these system calls take an argument that is a pointer to a<br>       structure of the following type:<br><br>           struct user_desc {<br>               unsigned int  entry_number;<br>               unsigned long base_addr;<br>               unsigned int  limit;<br>               unsigned int  seg_32bit:1;<br>               unsigned int  contents:2;<br>               unsigned int  read_exec_only:1;<br>               unsigned int  limit_in_pages:1;<br>               unsigned int  seg_not_present:1;<br>               unsigned int  useable:1; };<br><br>       <b>get_thread_area</b>() reads the GDT entry indicated by<br>       <i>u_info-&gt;entry_number</i> and fills in the rest of the fields in <i>u_info</i>.<br><br>       <b>set_thread_area</b>() sets a TLS entry in the GDT.<br><br>       The TLS array entry set by <b>set_thread_area</b>() corresponds to the value<br>       of <i>u_info-&gt;entry_number</i> passed in by the user.  If this value is in<br>       bounds, <b>set_thread_area</b>() writes the TLS descriptor pointed to by<br>       <i>u_info</i> into the thread's TLS array.<br><br>       When <b>set_thread_area</b>() is passed an <i>entry_number</i> of -1, it searches<br>       for a free TLS entry.  If <b>set_thread_area</b>() finds a free TLS entry,<br>       the value of <i>u_info-&gt;entry_number</i> is set upon return to show which<br>       entry was changed.<br><br>       A <i>user_desc</i> is considered \"empty\" if <i>read_exec_only</i> and<br>       <i>seg_not_present</i> are set to 1 and all of the other fields are 0.  If<br>       an \"empty\" descriptor is passed to <b>set_thread_area, </b>the corresponding<br>       TLS entry will be cleared.  See BUGS for additional details.<br><br>       Since Linux 3.19, <b>set_thread_area</b>() cannot be used to write non-<br>       present segments, 16-bit segments, or code segments, although<br>       clearing a segment is still acceptable.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       These system calls return 0 on success, and -1 on failure, with <i>errno</i><br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b><i>u_info</i> is an invalid pointer.<br><br>       <b>EINVAL </b><i>u_info-&gt;entry_number</i> is out of bounds.<br><br>       <b>ENOSYS get_thread_area</b>(2) or set_thread_area(2) was invoked as a<br>              64-bit system call.<br><br>       <b>ESRCH  </b>(<b>set_thread_area</b>()) A free TLS entry could not be located.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>set_thread_area</b>() first appeared in Linux 2.5.29.  <b>get_thread_area</b>()<br>       first appeared in Linux 2.5.32.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>set_thread_area</b>() is Linux-specific and should not be used in<br>       programs that are intended to be portable.<br></pre><br><h2>NOTES  </h2><pre><br>       Glibc does not provide wrappers for these system calls, since they<br>       are generally intended for use only by threading libraries.  In the<br>       unlikely event that you want to call them directly, use syscall(2).<br><br>       arch_prctl(2) can interfere with set_thread_area(2).  See<br>       arch_prctl(2) for more details.  This is not normally a problem, as<br>       arch_prctl(2) is normally used only by 64-bit programs.<br></pre><br><h2>BUGS  </h2><pre><br>       On 64-bit kernels before Linux 3.19, one of the padding bits in<br>       <i>user_desc</i>, if set, would prevent the descriptor from being considered<br>       empty (see modify_ldt(2)).  As a result, the only reliable way to<br>       clear a TLS entry is to use memset(3) to zero the entire <i>user_desc</i><br>       structure, including padding bits, and then to set the <i>read_exec_only</i><br>       and <i>seg_not_present</i> bits.  On Linux 3.19, a <i>user_desc</i> consisting<br>       entirely of zeros except for <i>entry_number</i> will also be interpreted as<br>       a request to clear a TLS entry, but this behaved differently on older<br>       kernels.<br><br>       Prior to Linux 3.19, the DS and ES segment registers must not<br>       reference TLS entries.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       arch_prctl(2), modify_ldt(2)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-02-21               SET_THREAD_AREA(2)</span><br></pre><br>"}