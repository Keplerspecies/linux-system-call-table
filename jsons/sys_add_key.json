{"Man page": "<pre><br><span class=\"headline\">ADD_KEY(2)               Linux Key Management Calls               ADD_KEY(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       add_key - add a key to the kernel's key management facility<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;keyutils.h&gt;</b><br><br>       <b>key_serial_t add_key(const char *</b><i>type</i><b>, const char *</b><i>description</i><b>,</b><br>                            <b>const void *</b><i>payload</i><b>, size_t </b><i>plen</i><b>,</b><br>                            <b>key_serial_t </b><i>keyring</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>add_key</b>() asks the kernel to create or update a key of the given <i>type</i><br>       and <i>description</i>, instantiate it with the <i>payload</i> of length <i>plen</i>, and<br>       to attach it to the nominated <i>keyring</i> and to return its serial<br>       number.<br><br>       The key type may reject the data if it's in the wrong format or in<br>       some other way invalid.<br><br>       If the destination <i>keyring</i> already contains a key that matches the<br>       specified <i>type</i> and <i>description,</i> then, if the key type supports it,<br>       that key will be updated rather than a new key being created; if not,<br>       a new key will be created and it will displace the link to the extant<br>       key from the keyring.<br><br>       The destination <i>keyring</i> serial number may be that of a valid keyring<br>       to which the caller has write permission, or it may be a special<br>       keyring ID:<br><br>       <b>KEY_SPEC_THREAD_KEYRING</b><br>              This specifies the caller's thread-specific keyring.<br><br>       <b>KEY_SPEC_PROCESS_KEYRING</b><br>              This specifies the caller's process-specific keyring.<br><br>       <b>KEY_SPEC_SESSION_KEYRING</b><br>              This specifies the caller's session-specific keyring.<br><br>       <b>KEY_SPEC_USER_KEYRING</b><br>              This specifies the caller's UID-specific keyring.<br><br>       <b>KEY_SPEC_USER_SESSION_KEYRING</b><br>              This specifies the caller's UID-session keyring.<br></pre><br><h2>KEY TYPES  </h2><pre><br>       There are a number of key types available in the core key management<br>       code, and these can be specified to this function:<br><br>       <b>&#8220;user&#8221; </b>Keys of the user-defined key type may contain a blob of<br>              arbitrary data, and the <i>description</i> may be any valid string,<br>              though it is preferred that the description be prefixed with a<br>              string representing the service to which the key is of<br>              interest and a colon (for instance &#8220;<b>afs:mykey</b>&#8221;).  The <i>payload</i><br>              may be empty or NULL for keys of this type.<br><br>       <b>&#8220;keyring&#8221;</b><br>              Keyrings are special key types that may contain links to<br>              sequences of other keys of any type.  If this interface is<br>              used to create a keyring, then a NULL <i>payload</i> should be<br>              specified, and <i>plen</i> should be zero.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success <b>add_key</b>() returns the serial number of the key it created<br>       or updated.  On error, the value -1 will be returned and errno will<br>       have been set to an appropriate error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>ENOKEY </b>The keyring doesn't exist.<br><br>       <b>EKEYEXPIRED</b><br>              The keyring has expired.<br><br>       <b>EKEYREVOKED</b><br>              The keyring has been revoked.<br><br>       <b>EINVAL </b>The payload data was invalid.<br><br>       <b>ENOMEM </b>Insufficient memory to create a key.<br><br>       <b>EDQUOT </b>The key quota for this user would be exceeded by creating this<br>              key or linking it to the keyring.<br><br>       <b>EACCES </b>The keyring wasn't available for modification by the user.<br></pre><br><h2>LINKING  </h2><pre><br>       Although this is a Linux system call, it is not present in <i>libc</i> but<br>       can be found rather in <i>libkeyutils</i>.  When linking, <b>-lkeyutils </b>should<br>       be specified to the linker.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       keyctl(1), keyctl(2), request_key(2), keyctl(3), keyrings(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-05-07                       ADD_KEY(2)</span><br></pre><br>"}