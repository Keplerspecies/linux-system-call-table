{"Man page": "<pre><br><span class=\"headline\">SYNC_FILE_RANGE(2)        Linux Programmer's Manual       SYNC_FILE_RANGE(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       sync_file_range - sync a file segment with disk<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#define _GNU_SOURCE         </b>/* See feature_test_macros(7) */<br>       <b>#include &lt;fcntl.h&gt;</b><br><br>       <b>int sync_file_range(int </b><i>fd</i><b>, off64_t </b><i>offset</i><b>, off64_t </b><i>nbytes</i><b>,</b><br>                           <b>unsigned int </b><i>flags</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>sync_file_range</b>() permits fine control when synchronizing the open<br>       file referred to by the file descriptor <i>fd</i> with disk.<br><br>       <i>offset</i> is the starting byte of the file range to be synchronized.<br>       <i>nbytes</i> specifies the length of the range to be synchronized, in<br>       bytes; if <i>nbytes</i> is zero, then all bytes from <i>offset</i> through to the<br>       end of file are synchronized.  Synchronization is in units of the<br>       system page size: <i>offset</i> is rounded down to a page boundary;<br>       <i>(offset+nbytes-1)</i> is rounded up to a page boundary.<br><br>       The <i>flags</i> bit-mask argument can include any of the following values:<br><br>       <b>SYNC_FILE_RANGE_WAIT_BEFORE</b><br>              Wait upon write-out of all pages in the specified range that<br>              have already been submitted to the device driver for write-out<br>              before performing any write.<br><br>       <b>SYNC_FILE_RANGE_WRITE</b><br>              Initiate write-out of all dirty pages in the specified range<br>              which are not presently submitted write-out.  Note that even<br>              this may block if you attempt to write more than request queue<br>              size.<br><br>       <b>SYNC_FILE_RANGE_WAIT_AFTER</b><br>              Wait upon write-out of all pages in the range after performing<br>              any write.<br><br>       Specifying <i>flags</i> as 0 is permitted, as a no-op.<br><br>   <b>Warning</b><br>       This system call is extremely dangerous and should not be used in<br>       portable programs.  None of these operations writes out the file's<br>       metadata.  Therefore, unless the application is strictly performing<br>       overwrites of already-instantiated disk blocks, there are no<br>       guarantees that the data will be available after a crash.  There is<br>       no user interface to know if a write is purely an overwrite.  On<br>       filesystems using copy-on-write semantics (e.g., <i>btrfs</i>) an overwrite<br>       of existing allocated blocks is impossible.  When writing into<br>       preallocated space, many filesystems also require calls into the<br>       block allocator, which this system call does not sync out to disk.<br>       This system call does not flush disk write caches and thus does not<br>       provide any data integrity on systems with volatile disk write<br>       caches.<br><br>   <b>Some details</b><br>       <b>SYNC_FILE_RANGE_WAIT_BEFORE </b>and <b>SYNC_FILE_RANGE_WAIT_AFTER </b>will<br>       detect any I/O errors or <b>ENOSPC </b>conditions and will return these to<br>       the caller.<br><br>       Useful combinations of the <i>flags</i> bits are:<br><br>       <b>SYNC_FILE_RANGE_WAIT_BEFORE | SYNC_FILE_RANGE_WRITE</b><br>              Ensures that all pages in the specified range which were dirty<br>              when <b>sync_file_range</b>() was called are placed under write-out.<br>              This is a start-write-for-data-integrity operation.<br><br>       <b>SYNC_FILE_RANGE_WRITE</b><br>              Start write-out of all dirty pages in the specified range<br>              which are not presently under write-out.  This is an<br>              asynchronous flush-to-disk operation.  This is not suitable<br>              for data integrity operations.<br><br>       <b>SYNC_FILE_RANGE_WAIT_BEFORE </b>(or <b>SYNC_FILE_RANGE_WAIT_AFTER</b>)<br>              Wait for completion of write-out of all pages in the specified<br>              range.  This can be used after an earlier<br>              <b>SYNC_FILE_RANGE_WAIT_BEFORE | SYNC_FILE_RANGE_WRITE </b>operation<br>              to wait for completion of that operation, and obtain its<br>              result.<br><br>       <b>SYNC_FILE_RANGE_WAIT_BEFORE | SYNC_FILE_RANGE_WRITE |</b><br>       <b>SYNC_FILE_RANGE_WAIT_AFTER</b><br>              This is a write-for-data-integrity operation that will ensure<br>              that all pages in the specified range which were dirty when<br>              <b>sync_file_range</b>() was called are committed to disk.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>sync_file_range</b>() returns 0; on failure -1 is returned<br>       and <i>errno</i> is set to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBADF  </b><i>fd</i> is not a valid file descriptor.<br><br>       <b>EINVAL </b><i>flags</i> specifies an invalid bit; or <i>offset</i> or <i>nbytes</i> is<br>              invalid.<br><br>       <b>EIO    </b>I/O error.<br><br>       <b>ENOMEM </b>Out of memory.<br><br>       <b>ENOSPC </b>Out of disk space.<br><br>       <b>ESPIPE </b><i>fd</i> refers to something other than a regular file, a block<br>              device, a directory, or a symbolic link.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>sync_file_range</b>() appeared on Linux in kernel 2.6.17.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This system call is Linux-specific, and should be avoided in portable<br>       programs.<br></pre><br><h2>NOTES  </h2><pre><br>   <b>sync_file_range2()</b><br>       Some architectures (e.g., PowerPC, ARM) need 64-bit arguments to be<br>       aligned in a suitable pair of registers.  On such architectures, the<br>       call signature of <b>sync_file_range</b>() shown in the SYNOPSIS would force<br>       a register to be wasted as padding between the <i>fd</i> and <i>offset</i><br>       arguments.  (See syscall(2) for details.)  Therefore, these<br>       architectures define a different system call that orders the<br>       arguments suitably:<br><br>           <b>int sync_file_range2(int </b><i>fd</i><b>, unsigned int </b><i>flags</i><b>,</b><br>                                <b>off64_t </b><i>offset</i><b>, off64_t </b><i>nbytes</i><b>);</b><br><br>       The behavior of this system call is otherwise exactly the same as<br>       <b>sync_file_range</b>().<br><br>       A system call with this signature first appeared on the ARM<br>       architecture in Linux 2.6.20, with the name <b>arm_sync_file_range</b>().<br>       It was renamed in Linux 2.6.22, when the analogous system call was<br>       added for PowerPC.  On architectures where glibc support is provided,<br>       glibc transparently wraps <b>sync_file_range2</b>() under the name<br>       <b>sync_file_range</b>().<br></pre><br><h2>SEE ALSO  </h2><pre><br>       fdatasync(2), fsync(2), msync(2), sync(2)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2014-08-19               SYNC_FILE_RANGE(2)</span><br></pre><br>"}