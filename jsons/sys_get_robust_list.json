{"Man page": "<pre><br><span class=\"headline\">GET_ROBUST_LIST(2)           Linux System Calls           GET_ROBUST_LIST(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       get_robust_list, set_robust_list - get/set list of robust futexes<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;linux/futex.h&gt;</b><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;syscall.h&gt;</b><br><br>       <b>long get_robust_list(int </b><i>pid</i><b>, struct robust_list_head **</b><i>head_ptr</i><b>,</b><br>                            <b>size_t *</b><i>len_ptr</i><b>);</b><br>       <b>long set_robust_list(struct robust_list_head *</b><i>head</i><b>, size_t </b><i>len</i><b>);</b><br><br>       <i>Note</i>: There are no glibc wrappers for these system calls; see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The robust futex implementation needs to maintain per-thread lists of<br>       robust futexes which are unlocked when the thread exits.  These lists<br>       are managed in user space; the kernel is notified about only the<br>       location of the head of the list.<br><br>       The <b>get_robust_list</b>() system call returns the head of the robust<br>       futex list of the thread whose thread ID is specified in <i>pid</i>.  If <i>pid</i><br>       is 0, the head of the list for the calling thread is returned.  The<br>       list head is stored in the location pointed to by <i>head_ptr</i>.  The size<br>       of the object pointed to by <i>**head_ptr</i> is stored in <i>len_ptr</i>.<br><br>       The <b>set_robust_list</b>() system call requests the kernel to record the<br>       head of the list of robust futexes owned by the calling thread.  The<br>       <i>head</i> argument is the list head to record.  The <i>len</i> argument should be<br>       <i>sizeof(*head)</i>.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       The <b>set_robust_list</b>() and <b>get_robust_list</b>() system calls return zero<br>       when the operation is successful, an error code otherwise.<br></pre><br><h2>ERRORS  </h2><pre><br>       The <b>set_robust_list</b>() system call can fail with the following error:<br><br>       <b>EINVAL </b><i>len</i> does not match the size of structure <b>struct</b><br>              <b>robust_list_head </b>expected by kernel.<br><br>       The <b>get_robust_list</b>() system call can fail with the following errors:<br><br>       <b>EPERM  </b>The calling process does not have permission to see the robust<br>              futex list of the thread with the thread ID <i>pid</i>, and does not<br>              have the <b>CAP_SYS_PTRACE </b>capability.<br><br>       <b>ESRCH  </b>No thread with the thread ID <i>pid</i> could be found.<br><br>       <b>EFAULT </b>The head of the robust futex list can't be stored at the<br>              location <i>head</i>.<br></pre><br><h2>VERSIONS  </h2><pre><br>       These system calls were added in Linux 2.6.17.<br></pre><br><h2>NOTES  </h2><pre><br>       These system calls are not needed by normal applications.  No support<br>       for them is provided in glibc.  In the unlikely event that you want<br>       to call them directly, use syscall(2).<br><br>       A thread can have only one robust futex list; therefore applications<br>       that wish to use this functionality should use the robust mutexes<br>       provided by glibc.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       futex(2)<br><br>       <i>Documentation/robust-futexes.txt</i> and <i>Documentation/robust-futex-</i><br>       <i>ABI.txt</i> in the Linux kernel source tree<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-01-22               GET_ROBUST_LIST(2)</span><br></pre><br>"}