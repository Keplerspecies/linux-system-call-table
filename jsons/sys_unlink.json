{"Man page": "<pre><br><span class=\"headline\">UNLINK(2)                 Linux Programmer's Manual                UNLINK(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       unlink, unlinkat - delete a name and possibly the file it refers to<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int unlink(const char *</b><i>pathname</i><b>);</b><br><br>       <b>#include &lt;fcntl.h&gt;           </b>/* Definition of AT_* constants */<br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int unlinkat(int </b><i>dirfd</i><b>, const char *</b><i>pathname</i><b>, int </b><i>flags</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>unlinkat</b>():<br>           Since glibc 2.10:<br>               _XOPEN_SOURCE &gt;= 700 || _POSIX_C_SOURCE &gt;= 200809L<br>           Before glibc 2.10:<br>               _ATFILE_SOURCE<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>unlink</b>() deletes a name from the filesystem.  If that name was the<br>       last link to a file and no processes have the file open, the file is<br>       deleted and the space it was using is made available for reuse.<br><br>       If the name was the last link to a file but any processes still have<br>       the file open, the file will remain in existence until the last file<br>       descriptor referring to it is closed.<br><br>       If the name referred to a symbolic link, the link is removed.<br><br>       If the name referred to a socket, FIFO, or device, the name for it is<br>       removed but processes which have the object open may continue to use<br>       it.<br><br>   <b>unlinkat()</b><br>       The <b>unlinkat</b>() system call operates in exactly the same way as either<br>       <b>unlink</b>() or rmdir(2) (depending on whether or not <i>flags</i> includes the<br>       <b>AT_REMOVEDIR </b>flag) except for the differences described here.<br><br>       If the pathname given in <i>pathname</i> is relative, then it is interpreted<br>       relative to the directory referred to by the file descriptor <i>dirfd</i><br>       (rather than relative to the current working directory of the calling<br>       process, as is done by <b>unlink</b>() and rmdir(2) for a relative<br>       pathname).<br><br>       If the pathname given in <i>pathname</i> is relative and <i>dirfd</i> is the<br>       special value <b>AT_FDCWD</b>, then <i>pathname</i> is interpreted relative to the<br>       current working directory of the calling process (like <b>unlink</b>() and<br>       rmdir(2)).<br><br>       If the pathname given in <i>pathname</i> is absolute, then <i>dirfd</i> is ignored.<br><br>       <i>flags</i> is a bit mask that can either be specified as 0, or by ORing<br>       together flag values that control the operation of <b>unlinkat</b>().<br>       Currently only one such flag is defined:<br><br>       <b>AT_REMOVEDIR</b><br>              By default, <b>unlinkat</b>() performs the equivalent of <b>unlink</b>() on<br>              <i>pathname</i>.  If the <b>AT_REMOVEDIR </b>flag is specified, then<br>              performs the equivalent of rmdir(2) on <i>pathname</i>.<br><br>       See openat(2) for an explanation of the need for <b>unlinkat</b>().<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EACCES </b>Write access to the directory containing <i>pathname</i> is not<br>              allowed for the process's effective UID, or one of the<br>              directories in <i>pathname</i> did not allow search permission.  (See<br>              also path_resolution(7).)<br><br>       <b>EBUSY  </b>The file <i>pathname</i> cannot be unlinked because it is being used<br>              by the system or another process; for example, it is a mount<br>              point or the NFS client software created it to represent an<br>              active but otherwise nameless inode (\"NFS silly renamed\").<br><br>       <b>EFAULT </b><i>pathname</i> points outside your accessible address space.<br><br>       <b>EIO    </b>An I/O error occurred.<br><br>       <b>EISDIR </b><i>pathname</i> refers to a directory.  (This is the non-POSIX value<br>              returned by Linux since 2.1.132.)<br><br>       <b>ELOOP  </b>Too many symbolic links were encountered in translating<br>              <i>pathname</i>.<br><br>       <b>ENAMETOOLONG</b><br>              <i>pathname</i> was too long.<br><br>       <b>ENOENT </b>A component in <i>pathname</i> does not exist or is a dangling<br>              symbolic link, or <i>pathname</i> is empty.<br><br>       <b>ENOMEM </b>Insufficient kernel memory was available.<br><br>       <b>ENOTDIR</b><br>              A component used as a directory in <i>pathname</i> is not, in fact, a<br>              directory.<br><br>       <b>EPERM  </b>The system does not allow unlinking of directories, or<br>              unlinking of directories requires privileges that the calling<br>              process doesn't have.  (This is the POSIX prescribed error<br>              return; as noted above, Linux returns <b>EISDIR </b>for this case.)<br><br>       <b>EPERM </b>(Linux only)<br>              The filesystem does not allow unlinking of files.<br><br>       <b>EPERM </b>or <b>EACCES</b><br>              The directory containing <i>pathname</i> has the sticky bit (<b>S_ISVTX</b>)<br>              set and the process's effective UID is neither the UID of the<br>              file to be deleted nor that of the directory containing it,<br>              and the process is not privileged (Linux: does not have the<br>              <b>CAP_FOWNER </b>capability).<br><br>       <b>EROFS  </b><i>pathname</i> refers to a file on a read-only filesystem.<br><br>       The same errors that occur for <b>unlink</b>() and rmdir(2) can also occur<br>       for <b>unlinkat</b>().  The following additional errors can occur for<br>       <b>unlinkat</b>():<br><br>       <b>EBADF  </b><i>dirfd</i> is not a valid file descriptor.<br><br>       <b>EINVAL </b>An invalid flag value was specified in <i>flags</i>.<br><br>       <b>EISDIR </b><i>pathname</i> refers to a directory, and <b>AT_REMOVEDIR </b>was not<br>              specified in <i>flags</i>.<br><br>       <b>ENOTDIR</b><br>              <i>pathname</i> is relative and <i>dirfd</i> is a file descriptor referring<br>              to a file other than a directory.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>unlinkat</b>() was added to Linux in kernel 2.6.16; library support was<br>       added to glibc in version 2.4.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>unlink</b>(): SVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.<br><br>       <b>unlinkat</b>(): POSIX.1-2008.<br></pre><br><h2>NOTES  </h2><pre><br>   <b>Glibc notes</b><br>       On older kernels where <b>unlinkat</b>() is unavailable, the glibc wrapper<br>       function falls back to the use of unlink(2) or rmdir(2).  When<br>       <i>pathname</i> is a relative pathname, glibc constructs a pathname based on<br>       the symbolic link in <i>/proc/self/fd</i> that corresponds to the <i>dirfd</i><br>       argument.<br></pre><br><h2>BUGS  </h2><pre><br>       Infelicities in the protocol underlying NFS can cause the unexpected<br>       disappearance of files which are still being used.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       rm(1), chmod(2), link(2), mknod(2), open(2), rename(2), rmdir(2),<br>       mkfifo(3), remove(3), path_resolution(7), symlink(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2014-08-19                        UNLINK(2)</span><br></pre><br>"}