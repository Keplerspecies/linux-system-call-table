{"Man page": "<pre><br><span class=\"headline\">SETXATTR(2)               Linux Programmer's Manual              SETXATTR(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       setxattr, lsetxattr, fsetxattr - set an extended attribute value<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;sys/xattr.h&gt;</b><br><br>       <b>int setxattr(const char *</b><i>path</i><b>, const char *</b><i>name</i><b>,</b><br>                     <b>const void *</b><i>value</i><b>, size_t </b><i>size</i><b>, int </b><i>flags</i><b>);</b><br>       <b>int lsetxattr(const char *</b><i>path</i><b>, const char *</b><i>name</i><b>,</b><br>                     <b>const void *</b><i>value</i><b>, size_t </b><i>size</i><b>, int </b><i>flags</i><b>);</b><br>       <b>int fsetxattr(int </b><i>fd</i><b>, const char *</b><i>name</i><b>,</b><br>                     <b>const void *</b><i>value</i><b>, size_t </b><i>size</i><b>, int </b><i>flags</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       Extended attributes are <i>name</i>:<i>value</i> pairs associated with inodes<br>       (files, directories, symbolic links, etc.).  They are extensions to<br>       the normal attributes which are associated with all inodes in the<br>       system (i.e., the stat(2) data).  A complete overview of extended<br>       attributes concepts can be found in xattr(7).<br><br>       <b>setxattr</b>() sets the <i>value</i> of the extended attribute identified by<br>       <i>name</i> and associated with the given <i>path</i> in the filesystem.  The <i>size</i><br>       argument specifies the size (in bytes) of <i>value</i>; a zero-length value<br>       is permitted.<br><br>       <b>lsetxattr</b>() is identical to <b>setxattr</b>(), except in the case of a<br>       symbolic link, where the extended attribute is set on the link<br>       itself, not the file that it refers to.<br><br>       <b>fsetxattr</b>() is identical to <b>setxattr</b>(), only the extended attribute<br>       is set on the open file referred to by <i>fd</i> (as returned by open(2)) in<br>       place of <i>path</i>.<br><br>       An extended attribute name is a null-terminated string.  The <i>name</i><br>       includes a namespace prefix; there may be several, disjoint<br>       namespaces associated with an individual inode.  The <i>value</i> of an<br>       extended attribute is a chunk of arbitrary textual or binary data of<br>       specified length.<br><br>       By default (i.e., <i>flags</i> is zero), the extended attribute will be<br>       created if it does not exist, or the value will be replaced if the<br>       attribute already exists.  To modify these semantics, one of the<br>       following values can be specified in <i>flags</i>:<br><br>       <b>XATTR_CREATE</b><br>              Perform a pure create, which fails if the named attribute<br>              exists already.<br><br>       <b>XATTR_REPLACE</b><br>              Perform a pure replace operation, which fails if the named<br>              attribute does not already exist.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On failure, -1 is returned and <i>errno</i><br>       is set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EDQUOT </b>Disk quota limits meant that there is insufficient space<br>              remaining to store the extended attribute.<br><br>       <b>EEXIST XATTR_CREATE </b>was specified, and the attribute exists already.<br><br>       <b>ENOATTR</b><br>              <b>XATTR_REPLACE </b>was specified, and the attribute does not exist.<br>              (<b>ENOATTR </b>is defined to be a synonym for <b>ENODATA </b>in<br>              <i>&lt;attr/xattr.h&gt;</i>.)<br><br>       <b>ENOSPC </b>There is insufficient space remaining to store the extended<br>              attribute.<br><br>       <b>ENOTSUP</b><br>              The namespace prefix of <i>name</i> is not valid.<br><br>       <b>ENOTSUP</b><br>              Extended attributes are not supported by the filesystem, or<br>              are disabled,<br><br>       In addition, the errors documented in stat(2) can also occur.<br></pre><br><h2>VERSIONS  </h2><pre><br>       These system calls have been available on Linux since kernel 2.4;<br>       glibc support is provided since version 2.3.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       These system calls are Linux-specific.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       getfattr(1), setfattr(1), getxattr(2), listxattr(2), open(2),<br>       removexattr(2), stat(2), symlink(7), xattr(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-05-07                      SETXATTR(2)</span><br></pre><br>"}