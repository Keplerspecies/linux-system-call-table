{"Man page": "<pre><br><span class=\"headline\">KCMP(2)                   Linux Programmer's Manual                  KCMP(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       kcmp  -  compare  two  processes  to determine if they share a kernel<br>       resource<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;linux/kcmp.h&gt;</b><br><br>       <b>int kcmp(pid_t </b><i>pid1</i><b>, pid_t </b><i>pid2</i><b>, int </b><i>type</i><b>,</b><br>                <b>unsigned long </b><i>idx1</i><b>, unsigned long </b><i>idx2</i><b>);</b><br><br>       <i>Note</i>: There is no glibc wrapper for this system call; see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>kcmp</b>() system call can be used to check whether the two processes<br>       identified by <i>pid1</i> and <i>pid2</i> share a kernel resource such as virtual<br>       memory, file descriptors, and so on.<br><br>       The <i>type</i> argument specifies which resource is to be compared in the<br>       two processes.  It has one of the following values:<br><br>       <b>KCMP_FILE</b><br>              Check whether a file descriptor <i>idx1</i> in the process <i>pid1</i><br>              refers to the same open file description (see open(2)) as file<br>              descriptor <i>idx2</i> in the process <i>pid2</i>.<br><br>       <b>KCMP_FILES</b><br>              Check whether the process share the same set of open file<br>              descriptors.  The arguments <i>idx1</i> and <i>idx2</i> are ignored.<br><br>       <b>KCMP_FS</b><br>              Check whether the processes share the same filesystem<br>              information (i.e., file mode creation mask, working directory,<br>              and filesystem root).  The arguments <i>idx1</i> and <i>idx2</i> are<br>              ignored.<br><br>       <b>KCMP_IO</b><br>              Check whether the processes share I/O context.  The arguments<br>              <i>idx1</i> and <i>idx2</i> are ignored.<br><br>       <b>KCMP_SIGHAND</b><br>              Check whether the processes share the same table of signal<br>              dispositions.  The arguments <i>idx1</i> and <i>idx2</i> are ignored.<br><br>       <b>KCMP_SYSVSEM</b><br>              Check whether the processes share the same list of System V<br>              semaphore undo operations.  The arguments <i>idx1</i> and <i>idx2</i> are<br>              ignored.<br><br>       <b>KCMP_VM</b><br>              Check whether the processes share the same address space.  The<br>              arguments <i>idx1</i> and <i>idx2</i> are ignored.<br><br>       Note the <b>kcmp</b>() is not protected against false positives which may<br>       occur if tasks are running.  One should stop tasks by sending <b>SIGSTOP</b><br>       (see signal(7)) prior to inspection with this system call to obtain<br>       meaningful results.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       The return value of a successful call to <b>kcmp</b>() is simply the result<br>       of arithmetic comparison of kernel pointers (when the kernel compares<br>       resources, it uses their memory addresses).<br><br>       The easiest way to explain is to consider an example.  Suppose that<br>       <i>v1</i> and <i>v2</i> are the addresses of appropriate resources, then the return<br>       value is one of the following:<br><br>           0   <i>v1</i> is equal to <i>v2</i>; in other words, the two processes share<br>               the resource.<br><br>           1   <i>v1</i> is less than <i>v2</i>.<br><br>           2   <i>v1</i> is greater than <i>v2</i>.<br><br>           3   <i>v1</i> is not equal to <i>v2</i>, but ordering information is<br>               unavailable.<br><br>       On error, -1 is returned, and <i>errno</i> is set appropriately.<br><br>       <b>kcmp</b>() was designed to return values suitable for sorting.  This is<br>       particularly handy if one needs to compare a large number of file<br>       descriptors.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBADF  </b><i>type</i> is <b>KCMP_FILE </b>and <i>fd1</i> or <i>fd2</i> is not an open file<br>              descriptor.<br><br>       <b>EINVAL </b><i>type</i> is invalid.<br><br>       <b>EPERM  </b>Insufficient permission to inspect process resources.  The<br>              <b>CAP_SYS_PTRACE </b>capability is required to inspect processes<br>              that you do not own.<br><br>       <b>ESRCH  </b>Process <i>pid1</i> or <i>pid2</i> does not exist.<br></pre><br><h2>VERSIONS  </h2><pre><br>       The <b>kcmp</b>() system call first appeared in Linux 3.5.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>kcmp</b>() is Linux-specific and should not be used in programs intended<br>       to be portable.<br></pre><br><h2>NOTES  </h2><pre><br>       Glibc does not provide a wrapper for this system call; call it using<br>       syscall(2).<br><br>       This system call is available only if the kernel was configured with<br>       <b>CONFIG_CHECKPOINT_RESTORE</b>.  The main use of the system call is for<br>       the checkpoint/restore in user space (CRIU) feature.  The alternative<br>       to this system call would have been to expose suitable process<br>       information via the proc(5) filesystem; this was deemed to be<br>       unsuitable for security reasons.<br><br>       See clone(2) for some background information on the shared resources<br>       referred to on this page.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       clone(2), unshare(2)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2013-12-08                          KCMP(2)</span><br></pre><br>"}