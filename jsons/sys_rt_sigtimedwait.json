{"Man page": "<pre><br><span class=\"headline\">SIGWAITINFO(2)            Linux Programmer's Manual           SIGWAITINFO(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       sigwaitinfo,  sigtimedwait,  rt_sigtimedwait - synchronously wait for<br>       queued signals<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;signal.h&gt;</b><br><br>       <b>int sigwaitinfo(const sigset_t *</b><i>set</i><b>, siginfo_t *</b><i>info</i><b>);</b><br><br>       <b>int sigtimedwait(const sigset_t *</b><i>set</i><b>, siginfo_t *</b><i>info</i><b>,</b><br>                        <b>const struct timespec *</b><i>timeout</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>sigwaitinfo</b>(), <b>sigtimedwait</b>(): _POSIX_C_SOURCE &gt;= 199309L<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>sigwaitinfo</b>() suspends execution of the calling thread until one of<br>       the signals in <i>set</i> is pending (If one of the signals in <i>set</i> is<br>       already pending for the calling thread, <b>sigwaitinfo</b>() will return<br>       immediately.)<br><br>       <b>sigwaitinfo</b>() removes the signal from the set of pending signals and<br>       returns the signal number as its function result.  If the <i>info</i><br>       argument is not NULL, then the buffer that it points to is used to<br>       return a structure of type <i>siginfo_t</i> (see sigaction(2)) containing<br>       information about the signal.<br><br>       If multiple signals in <i>set</i> are pending for the caller, the signal<br>       that is retrieved by <b>sigwaitinfo</b>() is determined according to the<br>       usual ordering rules; see signal(7) for further details.<br><br>       <b>sigtimedwait</b>() operates in exactly the same way as <b>sigwaitinfo</b>()<br>       except that it has an additional argument, <i>timeout</i>, which specifies<br>       the interval for which the thread is suspended waiting for a signal.<br>       (This interval will be rounded up to the system clock granularity,<br>       and kernel scheduling delays mean that the interval may overrun by a<br>       small amount.)  This argument is of the following type:<br><br>           struct timespec {<br>               long    tv_sec;         /* seconds */<br>               long    tv_nsec;        /* nanoseconds */<br>           }<br><br>       If both fields of this structure are specified as 0, a poll is<br>       performed: <b>sigtimedwait</b>() returns immediately, either with<br>       information about a signal that was pending for the caller, or with<br>       an error if none of the signals in <i>set</i> was pending.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, both <b>sigwaitinfo</b>() and <b>sigtimedwait</b>() return a signal<br>       number (i.e., a value greater than zero).  On failure both calls<br>       return -1, with <i>errno</i> set to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EAGAIN </b>No signal in <i>set</i> was became pending within the <i>timeout</i> period<br>              specified to <b>sigtimedwait</b>().<br><br>       <b>EINTR  </b>The wait was interrupted by a signal handler; see signal(7).<br>              (This handler was for a signal other than one of those in<br>              <i>set</i>.)<br><br>       <b>EINVAL </b><i>timeout</i> was invalid.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008.<br></pre><br><h2>NOTES  </h2><pre><br>       In normal usage, the calling program blocks the signals in <i>set</i> via a<br>       prior call to sigprocmask(2) (so that the default disposition for<br>       these signals does not occur if they become pending between<br>       successive calls to <b>sigwaitinfo</b>() or <b>sigtimedwait</b>()) and does not<br>       establish handlers for these signals.  In a multithreaded program,<br>       the signal should be blocked in all threads, in order to prevent the<br>       signal being treated according to its default disposition in a thread<br>       other than the one calling <b>sigwaitinfo</b>() or <b>sigtimedwait</b>()).<br><br>       The set of signals that is pending for a given thread is the union of<br>       the set of signals that is pending specifically for that thread and<br>       the set of signals that is pending for the process as a whole (see<br>       signal(7)).<br><br>       Attempts to wait for <b>SIGKILL </b>and <b>SIGSTOP </b>are silently ignored.<br><br>       If multiple threads of a process are blocked waiting for the same<br>       signal(s) in <b>sigwaitinfo</b>() or <b>sigtimedwait</b>(), then exactly one of the<br>       threads will actually receive the signal if it becomes pending for<br>       the process as a whole; which of the threads receives the signal is<br>       indeterminate.<br><br>       POSIX leaves the meaning of a NULL value for the <i>timeout</i> argument of<br>       <b>sigtimedwait</b>() unspecified, permitting the possibility that this has<br>       the same meaning as a call to <b>sigwaitinfo</b>(), and indeed this is what<br>       is done on Linux.<br><br>   <b>C library/kernel differences</b><br>       On Linux, <b>sigwaitinfo</b>() is a library function implemented on top of<br>       <b>sigtimedwait</b>().<br><br>       The glibc wrapper functions for <b>sigwaitinfo</b>() and <b>sigtimedwait</b>()<br>       silently ignore attempts to wait for the two real-time signals that<br>       are used internally by the NPTL threading implementation.  See<br>       nptl(7) for details.<br><br>       The original Linux system call was named <b>sigtimedwait</b>().  However,<br>       with the addition of real-time signals in Linux 2.2, the fixed-size,<br>       32-bit <i>sigset_t</i> type supported by that system call was no longer fit<br>       for purpose.  Consequently, a new system call, <b>rt_sigtimedwait</b>(), was<br>       added to support an enlarged <i>sigset_t</i> type.  The new system call<br>       takes a fourth argument, <i>size_t sigsetsize</i>, which specifies the size<br>       in bytes of the signal set in <i>set</i>.  This argument is currently<br>       required to have the value <i>sizeof(sigset_t)</i> (or the error <b>EINVAL</b><br>       results).  The glibc <b>sigtimedwait</b>() wrapper function hides these<br>       details from us, transparently calling <b>rt_sigtimedwait</b>() when the<br>       kernel provides it.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       kill(2), sigaction(2), signal(2), signalfd(2), sigpending(2),<br>       sigprocmask(2), sigqueue(3), sigsetops(3), sigwait(3), signal(7),<br>       time(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                   SIGWAITINFO(2)</span><br></pre><br>"}