{"Man page": "<pre><br><span class=\"headline\">KILL(2)                   Linux Programmer's Manual                  KILL(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       kill - send signal to a process<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;signal.h&gt;</b><br><br>       <b>int kill(pid_t </b><i>pid</i><b>, int </b><i>sig</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>kill</b>(): _POSIX_C_SOURCE &gt;= 1 || _XOPEN_SOURCE || _POSIX_SOURCE<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>kill</b>() system call can be used to send any signal to any process<br>       group or process.<br><br>       If <i>pid</i> is positive, then signal <i>sig</i> is sent to the process with the<br>       ID specified by <i>pid</i>.<br><br>       If <i>pid</i> equals 0, then <i>sig</i> is sent to every process in the process<br>       group of the calling process.<br><br>       If <i>pid</i> equals -1, then <i>sig</i> is sent to every process for which the<br>       calling process has permission to send signals, except for process 1<br>       (<i>init</i>), but see below.<br><br>       If <i>pid</i> is less than -1, then <i>sig</i> is sent to every process in the<br>       process group whose ID is <i>-pid</i>.<br><br>       If <i>sig</i> is 0, then no signal is sent, but error checking is still<br>       performed; this can be used to check for the existence of a process<br>       ID or process group ID.<br><br>       For a process to have permission to send a signal it must either be<br>       privileged (under Linux: have the <b>CAP_KILL </b>capability), or the real<br>       or effective user ID of the sending process must equal the real or<br>       saved set-user-ID of the target process.  In the case of <b>SIGCONT </b>it<br>       suffices when the sending and receiving processes belong to the same<br>       session.  (Historically, the rules were different; see NOTES.)<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success (at least one signal was sent), zero is returned.  On<br>       error, -1 is returned, and <i>errno</i> is set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EINVAL </b>An invalid signal was specified.<br><br>       <b>EPERM  </b>The process does not have permission to send the signal to any<br>              of the target processes.<br><br>       <b>ESRCH  </b>The pid or process group does not exist.  Note that an<br>              existing process might be a zombie, a process which already<br>              committed termination, but has not yet been wait(2)ed for.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD.<br></pre><br><h2>NOTES  </h2><pre><br>       The only signals that can be sent to process ID 1, the <i>init</i> process,<br>       are those for which <i>init</i> has explicitly installed signal handlers.<br>       This is done to assure the system is not brought down accidentally.<br><br>       POSIX.1 requires that <i>kill(-1,sig)</i> send <i>sig</i> to all processes that the<br>       calling process may send signals to, except possibly for some<br>       implementation-defined system processes.  Linux allows a process to<br>       signal itself, but on Linux the call <i>kill(-1,sig)</i> does not signal the<br>       calling process.<br><br>       POSIX.1 requires that if a process sends a signal to itself, and the<br>       sending thread does not have the signal blocked, and no other thread<br>       has it unblocked or is waiting for it in sigwait(3), at least one<br>       unblocked signal must be delivered to the sending thread before the<br>       <b>kill</b>() returns.<br><br>   <b>Linux notes</b><br>       Across different kernel versions, Linux has enforced different rules<br>       for the permissions required for an unprivileged process to send a<br>       signal to another process.  In kernels 1.0 to 1.2.2, a signal could<br>       be sent if the effective user ID of the sender matched effective user<br>       ID of the target, or the real user ID of the sender matched the real<br>       user ID of the target.  From kernel 1.2.3 until 1.3.77, a signal<br>       could be sent if the effective user ID of the sender matched either<br>       the real or effective user ID of the target.  The current rules,<br>       which conform to POSIX.1, were adopted in kernel 1.3.78.<br></pre><br><h2>BUGS  </h2><pre><br>       In 2.6 kernels up to and including 2.6.7, there was a bug that meant<br>       that when sending signals to a process group, <b>kill</b>() failed with the<br>       error <b>EPERM </b>if the caller did not have permission to send the signal<br>       to <i>any</i> (rather than <i>all</i>) of the members of the process group.<br>       Notwithstanding this error return, the signal was still delivered to<br>       all of the processes for which the caller had permission to signal.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       _exit(2), killpg(2), signal(2), tkill(2), exit(3), sigqueue(3),<br>       capabilities(7), credentials(7), signal(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                          KILL(2)</span><br></pre><br>"}