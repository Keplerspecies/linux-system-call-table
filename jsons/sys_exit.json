{"Man page": "<pre><br><span class=\"headline\">_EXIT(2)                  Linux Programmer's Manual                 _EXIT(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       _exit, _Exit - terminate the calling process<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>void _exit(int </b><i>status</i><b>);</b><br><br>       <b>#include &lt;stdlib.h&gt;</b><br><br>       <b>void _Exit(int </b><i>status</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>_Exit</b>():<br>           _XOPEN_SOURCE &gt;= 600 || _ISOC99_SOURCE ||<br>           _POSIX_C_SOURCE &gt;= 200112L;<br>           or <i>cc -std=c99</i><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The function <b>_exit</b>() terminates the calling process \"immediately\".<br>       Any open file descriptors belonging to the process are closed; any<br>       children of the process are inherited by process 1, <i>init</i>, and the<br>       process's parent is sent a <b>SIGCHLD </b>signal.<br><br>       The value <i>status</i> is returned to the parent process as the process's<br>       exit status, and can be collected using one of the wait(2) family of<br>       calls.<br><br>       The function <b>_Exit</b>() is equivalent to <b>_exit</b>().<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       These functions do not return.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD.  The function <b>_Exit</b>() was<br>       introduced by C99.<br></pre><br><h2>NOTES  </h2><pre><br>       For a discussion on the effects of an exit, the transmission of exit<br>       status, zombie processes, signals sent, and so on, see exit(3).<br><br>       The function <b>_exit</b>() is like exit(3), but does not call any functions<br>       registered with atexit(3) or on_exit(3).  Open stdio(3) streams are<br>       not flushed.  On the other hand, <b>_exit</b>() does close open file<br>       descriptors, and this may cause an unknown delay, waiting for pending<br>       output to finish.  If the delay is undesired, it may be useful to<br>       call functions like tcflush(3) before calling <b>_exit</b>().  Whether any<br>       pending I/O is canceled, and which pending I/O may be canceled upon<br>       <b>_exit</b>(), is implementation-dependent.<br><br>   <b>C library/kernel differences</b><br>       In glibc up to version 2.3, the <b>_exit</b>() wrapper function invoked the<br>       kernel system call of the same name.  Since glibc 2.3, the wrapper<br>       function invokes exit_group(2), in order to terminate all of the<br>       threads in a process.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       execve(2), exit_group(2), fork(2), kill(2), wait(2), wait4(2),<br>       waitpid(2), atexit(3), exit(3), on_exit(3), termios(3)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                         _EXIT(2)</span><br></pre><br>"}