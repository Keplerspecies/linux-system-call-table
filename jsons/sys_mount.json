{"Man page": "<pre><br><span class=\"headline\">MOUNT(2)                  Linux Programmer's Manual                 MOUNT(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       mount - mount filesystem<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/mount.h&gt;</b><br><br>       <b>int mount(const char *</b><i>source</i><b>, const char *</b><i>target</i><b>,</b><br>                 <b>const char *</b><i>filesystemtype</i><b>, unsigned long </b><i>mountflags</i><b>,</b><br>                 <b>const void *</b><i>data</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>mount</b>() attaches the filesystem specified by <i>source</i> (which is often a<br>       device name, but can also be a directory name or a dummy) to the<br>       directory specified by <i>target</i>.<br><br>       Appropriate privilege (Linux: the <b>CAP_SYS_ADMIN </b>capability) is<br>       required to mount filesystems.<br><br>       Since Linux 2.4 a single filesystem can be visible at multiple mount<br>       points, and multiple mounts can be stacked on the same mount point.<br><br>       Values for the <i>filesystemtype</i> argument supported by the kernel are<br>       listed in <i>/proc/filesystems</i> (e.g., \"minix\", \"ext2\", \"ext3\", \"jfs\",<br>       \"xfs\", \"reiserfs\", \"msdos\", \"proc\", \"nfs\", \"iso9660\").  Further types<br>       may become available when the appropriate modules are loaded.<br><br>       The <i>mountflags</i> argument may have the magic number 0xC0ED (<b>MS_MGC_VAL</b>)<br>       in the top 16 bits (this was required in kernel versions prior to<br>       2.4, but is no longer required and ignored if specified), and various<br>       mount flags in the low order 16 bits:<br><br>       <b>MS_BIND </b>(Linux 2.4 onward)<br>              Perform a bind mount, making a file or a directory subtree<br>              visible at another point within a filesystem.  Bind mounts may<br>              cross filesystem boundaries and span chroot(2) jails.  The<br>              <i>filesystemtype</i> and <i>data</i> arguments are ignored.  Up until Linux<br>              2.6.26, <i>mountflags</i> was also ignored (the bind mount has the<br>              same mount options as the underlying mount point).<br><br>       <b>MS_DIRSYNC </b>(since Linux 2.5.19)<br>              Make directory changes on this filesystem synchronous.  (This<br>              property can be obtained for individual directories or<br>              subtrees using chattr(1).)<br><br>       <b>MS_LAZYTIME </b>(since Linux 4.0)<br>              Reduce on-disk updates of inode timestamps (atime, mtime,<br>              ctime) by maintaining these changes only in memory.  The on-<br>              disk timestamps are updated only when:<br><br>              (a)  the inode needs to be updated for some change unrelated<br>                   to file timestamps;<br><br>              (b)  the application employs sync(2);<br><br>              (c)  an undeleted inode is evicted from memory; or<br><br>              (d)  more than 24 hours have passed since the inode was<br>                   written to disk.<br><br>              This mount option significantly reduces writes needed to<br>              update the inode's timestamps, especially mtime and atime.<br>              However, in the event of a system crash, the atime and mtime<br>              fields on disk might be out of date by up to 24 hours.<br><br>              Examples of workloads where this option could be of<br>              significant benefit include frequent random writes to<br>              preallocated files, as well as cases where the <b>MS_STRICTATIME</b><br>              mount option is also enabled.  (The advantage of combining<br>              <b>MS_STRICTATIME </b>and <b>MS_LAZYTIME </b>is that stat(2) will return the<br>              correctly updated atime, but the atime updates will be flushed<br>              to disk only in the cases listed above.)<br><br>       <b>MS_MANDLOCK</b><br>              Permit mandatory locking on files in this filesystem.<br>              (Mandatory locking must still be enabled on a per-file basis,<br>              as described in fcntl(2).)<br><br>       <b>MS_MOVE</b><br>              Move a subtree.  <i>source</i> specifies an existing mount point and<br>              <i>target</i> specifies the new location.  The move is atomic: at no<br>              point is the subtree unmounted.  The <i>filesystemtype</i>,<br>              <i>mountflags</i>, and <i>data</i> arguments are ignored.<br><br>       <b>MS_NOATIME</b><br>              Do not update access times for (all types of) files on this<br>              filesystem.<br><br>       <b>MS_NODEV</b><br>              Do not allow access to devices (special files) on this<br>              filesystem.<br><br>       <b>MS_NODIRATIME</b><br>              Do not update access times for directories on this filesystem.<br>              This flag provides a subset of the functionality provided by<br>              <b>MS_NOATIME</b>; that is, <b>MS_NOATIME </b>implies <b>MS_NODIRATIME</b>.<br><br>       <b>MS_NOEXEC</b><br>              Do not allow programs to be executed from this filesystem.<br><br>       <b>MS_NOSUID</b><br>              Do not honor set-user-ID and set-group-ID bits when executing<br>              programs from this filesystem.<br><br>       <b>MS_RDONLY</b><br>              Mount filesystem read-only.<br><br>       <b>MS_RELATIME </b>(since Linux 2.6.20)<br>              When a file on this filesystem is accessed, update the file's<br>              last access time (atime) only if the current value of atime is<br>              less than or equal to the file's last modification time<br>              (mtime) or last status change time (ctime).  This option is<br>              useful for programs, such as <b>mutt</b>(1), that need to know when a<br>              file has been read since it was last modified.  Since Linux<br>              2.6.30, the kernel defaults to the behavior provided by this<br>              flag (unless <b>MS_NOATIME </b>was specified), and the <b>MS_STRICTATIME</b><br>              flag is required to obtain traditional semantics.  In<br>              addition, since Linux 2.6.30, the file's last access time is<br>              always updated if it is more than 1 day old.<br><br>       <b>MS_REMOUNT</b><br>              Remount an existing mount.  This allows you to change the<br>              <i>mountflags</i> and <i>data</i> of an existing mount without having to<br>              unmount and remount the filesystem.  <i>target</i> should be the same<br>              value specified in the initial <b>mount</b>() call; <i>source</i> and<br>              <i>filesystemtype</i> are ignored.  The <i>mountflags</i> and <i>data</i> arguments<br>              should match the values used in the original <b>mount</b>() call,<br>              except for those parameters that are being deliberately<br>              changed.<br><br>              The following <i>mountflags</i> can be changed: <b>MS_RDONLY</b>,<br>              <b>MS_SYNCHRONOUS</b>, <b>MS_MANDLOCK</b>; before kernel 2.6.16, the<br>              following could also be changed: <b>MS_NOATIME </b>and <b>MS_NODIRATIME</b>;<br>              and, additionally, before kernel 2.4.10, the following could<br>              also be changed: <b>MS_NOSUID</b>, <b>MS_NODEV</b>, <b>MS_NOEXEC</b>.<br><br>       <b>MS_SILENT </b>(since Linux 2.6.17)<br>              Suppress the display of certain (<i>printk</i>()) warning messages in<br>              the kernel log.  This flag supersedes the misnamed and<br>              obsolete <b>MS_VERBOSE </b>flag (available since Linux 2.4.12), which<br>              has the same meaning.<br><br>       <b>MS_STRICTATIME </b>(since Linux 2.6.30)<br>              Always update the last access time (atime) when files on this<br>              filesystem are accessed.  (This was the default behavior<br>              before Linux 2.6.30.)  Specifying this flag overrides the<br>              effect of setting the <b>MS_NOATIME </b>and <b>MS_RELATIME </b>flags.<br><br>       <b>MS_SYNCHRONOUS</b><br>              Make writes on this filesystem synchronous (as though the<br>              <b>O_SYNC </b>flag to open(2) was specified for all file opens to<br>              this filesystem).<br><br>       From Linux 2.4 onward, the <b>MS_NODEV</b>, <b>MS_NOEXEC</b>, and <b>MS_NOSUID </b>flags<br>       are settable on a per-mount-point basis.  From kernel 2.6.16 onward,<br>       <b>MS_NOATIME </b>and <b>MS_NODIRATIME </b>are also settable on a per-mount-point<br>       basis.  The <b>MS_RELATIME </b>flag is also settable on a per-mount-point<br>       basis.<br><br>       The <i>data</i> argument is interpreted by the different filesystems.<br>       Typically it is a string of comma-separated options understood by<br>       this filesystem.  See mount(8) for details of the options available<br>       for each filesystem type.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       The error values given below result from filesystem type independent<br>       errors.  Each filesystem type may have its own special errors and its<br>       own special behavior.  See the Linux kernel source code for details.<br><br>       <b>EACCES </b>A component of a path was not searchable.  (See also<br>              path_resolution(7).)  Or, mounting a read-only filesystem was<br>              attempted without giving the <b>MS_RDONLY </b>flag.  Or, the block<br>              device <i>source</i> is located on a filesystem mounted with the<br>              <b>MS_NODEV </b>option.<br><br>       <b>EBUSY  </b><i>source</i> is already mounted.  Or, it cannot be remounted read-<br>              only, because it still holds files open for writing.  Or, it<br>              cannot be mounted on <i>target</i> because <i>target</i> is still busy (it<br>              is the working directory of some thread, the mount point of<br>              another device, has open files, etc.).<br><br>       <b>EFAULT </b>One of the pointer arguments points outside the user address<br>              space.<br><br>       <b>EINVAL </b><i>source</i> had an invalid superblock.  Or, a remount (<b>MS_REMOUNT</b>)<br>              was attempted, but <i>source</i> was not already mounted on <i>target</i>.<br>              Or, a move (<b>MS_MOVE</b>) was attempted, but <i>source</i> was not a mount<br>              point, or was '/'.<br><br>       <b>ELOOP  </b>Too many links encountered during pathname resolution.  Or, a<br>              move was attempted, while <i>target</i> is a descendant of <i>source</i>.<br><br>       <b>EMFILE </b>(In case no block device is required:) Table of dummy devices<br>              is full.<br><br>       <b>ENAMETOOLONG</b><br>              A pathname was longer than <b>MAXPATHLEN</b>.<br><br>       <b>ENODEV </b><i>filesystemtype</i> not configured in the kernel.<br><br>       <b>ENOENT </b>A pathname was empty or had a nonexistent component.<br><br>       <b>ENOMEM </b>The kernel could not allocate a free page to copy filenames or<br>              data into.<br><br>       <b>ENOTBLK</b><br>              <i>source</i> is not a block device (and a device was required).<br><br>       <b>ENOTDIR</b><br>              <i>target</i>, or a prefix of <i>source</i>, is not a directory.<br><br>       <b>ENXIO  </b>The major number of the block device <i>source</i> is out of range.<br><br>       <b>EPERM  </b>The caller does not have the required privileges.<br></pre><br><h2>VERSIONS  </h2><pre><br>       The definitions of <b>MS_DIRSYNC</b>, <b>MS_MOVE</b>, <b>MS_REC</b>, <b>MS_RELATIME</b>, and<br>       <b>MS_STRICTATIME </b>were added to glibc headers in version 2.12.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This function is Linux-specific and should not be used in programs<br>       intended to be portable.<br></pre><br><h2>NOTES  </h2><pre><br>       The original <b>MS_SYNC </b>flag was renamed <b>MS_SYNCHRONOUS </b>in 1.1.69 when a<br>       different <b>MS_SYNC </b>was added to <i>&lt;mman.h&gt;</i>.<br><br>       Before Linux 2.4 an attempt to execute a set-user-ID or set-group-ID<br>       program on a filesystem mounted with <b>MS_NOSUID </b>would fail with <b>EPERM</b>.<br>       Since Linux 2.4 the set-user-ID and set-group-ID bits are just<br>       silently ignored in this case.<br><br>   <b>Per-process namespaces</b><br>       Starting with kernel 2.4.19, Linux provides per-process mount<br>       namespaces.  A mount namespace is the set of filesystem mounts that<br>       are visible to a process.  Mount-point namespaces can be (and usually<br>       are) shared between multiple processes, and changes to the namespace<br>       (i.e., mounts and unmounts) by one process are visible to all other<br>       processes sharing the same namespace.  (The pre-2.4.19 Linux<br>       situation can be considered as one in which a single namespace was<br>       shared by every process on the system.)<br><br>       A child process created by fork(2) shares its parent's mount<br>       namespace; the mount namespace is preserved across an execve(2).<br><br>       A process can obtain a private mount namespace if: it was created<br>       using the clone(2) <b>CLONE_NEWNS </b>flag, in which case its new namespace<br>       is initialized to be a <i>copy</i> of the namespace of the process that<br>       called clone(2); or it calls unshare(2) with the <b>CLONE_NEWNS </b>flag,<br>       which causes the caller's mount namespace to obtain a private copy of<br>       the namespace that it was previously sharing with other processes, so<br>       that future mounts and unmounts by the caller are invisible to other<br>       processes (except child processes that the caller subsequently<br>       creates) and vice versa.<br><br>       The Linux-specific <i>/proc/PID/mounts</i> file exposes the list of mount<br>       points in the mount namespace of the process with the specified ID;<br>       see proc(5) for details.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       umount(2), namespaces(7), path_resolution(7), lsblk(8), mount(8),<br>       umount(8)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-04-19                         MOUNT(2)</span><br></pre><br>"}