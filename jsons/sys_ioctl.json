{"Man page": "<pre><br><span class=\"headline\">IOCTL(2)                  Linux Programmer's Manual                 IOCTL(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       ioctl - control device<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/ioctl.h&gt;</b><br><br>       <b>int ioctl(int </b><i>fd</i><b>, unsigned long </b><i>request</i><b>, ...);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>ioctl</b>() function manipulates the underlying device parameters of<br>       special files.  In particular, many operating characteristics of<br>       character special files (e.g., terminals) may be controlled with<br>       <b>ioctl</b>() requests.  The argument <i>fd</i> must be an open file descriptor.<br><br>       The second argument is a device-dependent request code.  The third<br>       argument is an untyped pointer to memory.  It's traditionally <b>char</b><br>       <b>*</b><i>argp</i> (from the days before <b>void * </b>was valid C), and will be so named<br>       for this discussion.<br><br>       An <b>ioctl</b>() <i>request</i> has encoded in it whether the argument is an <i>in</i><br>       parameter or <i>out</i> parameter, and the size of the argument <i>argp</i> in<br>       bytes.  Macros and defines used in specifying an <b>ioctl</b>() <i>request</i> are<br>       located in the file <i>&lt;sys/ioctl.h&gt;</i>.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       Usually, on success zero is returned.  A few <b>ioctl</b>() requests use the<br>       return value as an output parameter and return a nonnegative value on<br>       success.  On error, -1 is returned, and <i>errno</i> is set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBADF  </b><i>fd</i> is not a valid descriptor.<br><br>       <b>EFAULT </b><i>argp</i> references an inaccessible memory area.<br><br>       <b>EINVAL </b><i>request</i> or <i>argp</i> is not valid.<br><br>       <b>ENOTTY </b><i>fd</i> is not associated with a character special device.<br><br>       <b>ENOTTY </b>The specified request does not apply to the kind of object<br>              that the descriptor <i>fd</i> references.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       No single standard.  Arguments, returns, and semantics of <b>ioctl</b>()<br>       vary according to the device driver in question (the call is used as<br>       a catch-all for operations that don't cleanly fit the UNIX stream I/O<br>       model).  See ioctl_list(2) for a list of many of the known <b>ioctl</b>()<br>       calls.  The <b>ioctl</b>() function call appeared in Version 7 AT&amp;T UNIX.<br></pre><br><h2>NOTES  </h2><pre><br>       In order to use this call, one needs an open file descriptor.  Often<br>       the open(2) call has unwanted side effects, that can be avoided under<br>       Linux by giving it the <b>O_NONBLOCK </b>flag.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       execve(2), fcntl(2), ioctl_fat(2), ioctl_list(2), open(2),<br>       console_ioctl(4), tty_ioctl(4), sd(4), tty(4)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-05-07                         IOCTL(2)</span><br></pre><br>"}