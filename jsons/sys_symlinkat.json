{"Man page": "<pre><br><span class=\"headline\">SYMLINK(2)                Linux Programmer's Manual               SYMLINK(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       symlink, symlinkat - make a new name for a file<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int symlink(const char *</b><i>target</i><b>, const char *</b><i>linkpath</i><b>);</b><br><br>       <b>#include &lt;fcntl.h&gt;           </b>/* Definition of AT_* constants */<br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int symlinkat(const char *</b><i>target</i><b>, int </b><i>newdirfd</i><b>, const char *</b><i>linkpath</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>symlink</b>():<br>           _BSD_SOURCE || _XOPEN_SOURCE &gt;= 500 ||<br>           _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED ||<br>           _POSIX_C_SOURCE &gt;= 200112L<br><br>       <b>symlinkat</b>():<br>           Since glibc 2.10:<br>               _XOPEN_SOURCE &gt;= 700 || _POSIX_C_SOURCE &gt;= 200809L<br>           Before glibc 2.10:<br>               _ATFILE_SOURCE<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>symlink</b>() creates a symbolic link named <i>linkpath</i> which contains the<br>       string <i>target</i>.<br><br>       Symbolic links are interpreted at run time as if the contents of the<br>       link had been substituted into the path being followed to find a file<br>       or directory.<br><br>       Symbolic links may contain <i>..</i>  path components, which (if used at the<br>       start of the link) refer to the parent directories of that in which<br>       the link resides.<br><br>       A symbolic link (also known as a soft link) may point to an existing<br>       file or to a nonexistent one; the latter case is known as a dangling<br>       link.<br><br>       The permissions of a symbolic link are irrelevant; the ownership is<br>       ignored when following the link, but is checked when removal or<br>       renaming of the link is requested and the link is in a directory with<br>       the sticky bit (<b>S_ISVTX</b>) set.<br><br>       If <i>linkpath</i> exists, it will <i>not</i> be overwritten.<br><br>   <b>symlinkat()</b><br>       The <b>symlinkat</b>() system call operates in exactly the same way as<br>       <b>symlink</b>(), except for the differences described here.<br><br>       If the pathname given in <i>linkpath</i> is relative, then it is interpreted<br>       relative to the directory referred to by the file descriptor <i>newdirfd</i><br>       (rather than relative to the current working directory of the calling<br>       process, as is done by <b>symlink</b>() for a relative pathname).<br><br>       If <i>linkpath</i> is relative and <i>newdirfd</i> is the special value <b>AT_FDCWD</b>,<br>       then <i>linkpath</i> is interpreted relative to the current working<br>       directory of the calling process (like <b>symlink</b>()).<br><br>       If <i>linkpath</i> is absolute, then <i>newdirfd</i> is ignored.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EACCES </b>Write access to the directory containing <i>linkpath</i> is denied,<br>              or one of the directories in the path prefix of <i>linkpath</i> did<br>              not allow search permission.  (See also path_resolution(7).)<br><br>       <b>EDQUOT </b>The user's quota of resources on the filesystem has been<br>              exhausted.  The resources could be inodes or disk blocks,<br>              depending on the filesystem implementation.<br><br>       <b>EEXIST </b><i>linkpath</i> already exists.<br><br>       <b>EFAULT </b><i>target</i> or <i>linkpath</i> points outside your accessible address<br>              space.<br><br>       <b>EIO    </b>An I/O error occurred.<br><br>       <b>ELOOP  </b>Too many symbolic links were encountered in resolving<br>              <i>linkpath</i>.<br><br>       <b>ENAMETOOLONG</b><br>              <i>target</i> or <i>linkpath</i> was too long.<br><br>       <b>ENOENT </b>A directory component in <i>linkpath</i> does not exist or is a<br>              dangling symbolic link, or <i>target</i> or <i>linkpath</i> is an empty<br>              string.<br><br>       <b>ENOMEM </b>Insufficient kernel memory was available.<br><br>       <b>ENOSPC </b>The device containing the file has no room for the new<br>              directory entry.<br><br>       <b>ENOTDIR</b><br>              A component used as a directory in <i>linkpath</i> is not, in fact, a<br>              directory.<br><br>       <b>EPERM  </b>The filesystem containing <i>linkpath</i> does not support the<br>              creation of symbolic links.<br><br>       <b>EROFS  </b><i>linkpath</i> is on a read-only filesystem.<br><br>       The following additional errors can occur for <b>symlinkat</b>():<br><br>       <b>EBADF  </b><i>newdirfd</i> is not a valid file descriptor.<br><br>       <b>ENOENT </b><i>linkpath</i> is a relative pathname and <i>newdirfd</i> refers to a<br>              directory that has been deleted.<br><br>       <b>ENOTDIR</b><br>              <i>linkpath</i> is relative and <i>newdirfd</i> is a file descriptor<br>              referring to a file other than a directory.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>symlinkat</b>() was added to Linux in kernel 2.6.16; library support was<br>       added to glibc in version 2.4.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>symlink</b>(): SVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.<br><br>       <b>symlinkat</b>(): POSIX.1-2008.<br></pre><br><h2>NOTES  </h2><pre><br>       No checking of <i>target</i> is done.<br><br>       Deleting the name referred to by a symbolic link will actually delete<br>       the file (unless it also has other hard links).  If this behavior is<br>       not desired, use link(2).<br><br>   <b>Glibc notes</b><br>       On older kernels where <b>symlinkat</b>() is unavailable, the glibc wrapper<br>       function falls back to the use of symlink(2).  When <i>linkpath</i> is a<br>       relative pathname, glibc constructs a pathname based on the symbolic<br>       link in <i>/proc/self/fd</i> that corresponds to the <i>newdirfd</i> argument.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       ln(1), lchown(2), link(2), lstat(2), open(2), readlink(2), rename(2),<br>       unlink(2), path_resolution(7), symlink(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-04-19                       SYMLINK(2)</span><br></pre><br>"}