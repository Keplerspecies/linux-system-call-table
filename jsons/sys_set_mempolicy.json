{"Man page": "<pre><br><span class=\"headline\">SET_MEMPOLICY(2)          Linux Programmer's Manual         SET_MEMPOLICY(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       set_mempolicy  -  set default NUMA memory policy for a thread and its<br>       children<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;numaif.h&gt;</b><br><br>       <b>long set_mempolicy(int </b><i>mode</i><b>, const unsigned long *</b><i>nodemask</i><b>,</b><br>                          <b>unsigned long </b><i>maxnode</i><b>);</b><br><br>       Link with <i>-lnuma</i>.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>set_mempolicy</b>() sets the NUMA memory policy of the calling thread,<br>       which consists of a policy mode and zero or more nodes, to the values<br>       specified by the <i>mode</i>, <i>nodemask</i> and <i>maxnode</i> arguments.<br><br>       A NUMA machine has different memory controllers with different<br>       distances to specific CPUs.  The memory policy defines from which<br>       node memory is allocated for the thread.<br><br>       This system call defines the default policy for the thread.  The<br>       thread policy governs allocation of pages in the process's address<br>       space outside of memory ranges controlled by a more specific policy<br>       set by mbind(2).  The thread default policy also controls allocation<br>       of any pages for memory-mapped files mapped using the mmap(2) call<br>       with the <b>MAP_PRIVATE </b>flag and that are only read [loaded] from by the<br>       thread and of memory-mapped files mapped using the mmap(2) call with<br>       the <b>MAP_SHARED </b>flag, regardless of the access type.  The policy is<br>       applied only when a new page is allocated for the thread.  For<br>       anonymous memory this is when the page is first touched by the<br>       thread.<br><br>       The <i>mode</i> argument must specify one of <b>MPOL_DEFAULT</b>, <b>MPOL_BIND</b>,<br>       <b>MPOL_INTERLEAVE</b>, or <b>MPOL_PREFERRED</b>.  All modes except <b>MPOL_DEFAULT</b><br>       require the caller to specify via the <i>nodemask</i> argument one or more<br>       nodes.<br><br>       The <i>mode</i> argument may also include an optional <i>mode flag</i>.  The<br>       supported <i>mode flags</i> are:<br><br>       <b>MPOL_F_STATIC_NODES </b>(since Linux 2.6.26)<br>              A nonempty <i>nodemask</i> specifies physical node ids.  Linux will<br>              not remap the <i>nodemask</i> when the process moves to a different<br>              cpuset context, nor when the set of nodes allowed by the<br>              process's current cpuset context changes.<br><br>       <b>MPOL_F_RELATIVE_NODES </b>(since Linux 2.6.26)<br>              A nonempty <i>nodemask</i> specifies node ids that are relative to<br>              the set of node ids allowed by the process's current cpuset.<br><br>       <i>nodemask</i> points to a bit mask of node IDs that contains up to <i>maxnode</i><br>       bits.  The bit mask size is rounded to the next multiple of<br>       <i>sizeof(unsigned long)</i>, but the kernel will use bits only up to<br>       <i>maxnode</i>.  A NULL value of <i>nodemask</i> or a <i>maxnode</i> value of zero<br>       specifies the empty set of nodes.  If the value of <i>maxnode</i> is zero,<br>       the <i>nodemask</i> argument is ignored.<br><br>       Where a <i>nodemask</i> is required, it must contain at least one node that<br>       is on-line, allowed by the process's current cpuset context, [unless<br>       the <b>MPOL_F_STATIC_NODES </b>mode flag is specified], and contains memory.<br>       If the <b>MPOL_F_STATIC_NODES </b>is set in <i>mode</i> and a required <i>nodemask</i><br>       contains no nodes that are allowed by the process's current cpuset<br>       context, the memory policy reverts to <i>local allocation</i>.  This<br>       effectively overrides the specified policy until the process's cpuset<br>       context includes one or more of the nodes specified by <i>nodemask</i>.<br><br>       The <b>MPOL_DEFAULT </b>mode specifies that any nondefault thread memory<br>       policy be removed, so that the memory policy \"falls back\" to the<br>       system default policy.  The system default policy is \"local<br>       allocation\"&#8212;that is, allocate memory on the node of the CPU that<br>       triggered the allocation.  <i>nodemask</i> must be specified as NULL.  If<br>       the \"local node\" contains no free memory, the system will attempt to<br>       allocate memory from a \"near by\" node.<br><br>       The <b>MPOL_BIND </b>mode defines a strict policy that restricts memory<br>       allocation to the nodes specified in <i>nodemask</i>.  If <i>nodemask</i> specifies<br>       more than one node, page allocations will come from the node with the<br>       lowest numeric node ID first, until that node contains no free<br>       memory.  Allocations will then come from the node with the next<br>       highest node ID specified in <i>nodemask</i> and so forth, until none of the<br>       specified nodes contain free memory.  Pages will not be allocated<br>       from any node not specified in the <i>nodemask</i>.<br><br>       <b>MPOL_INTERLEAVE </b>interleaves page allocations across the nodes<br>       specified in <i>nodemask</i> in numeric node ID order.  This optimizes for<br>       bandwidth instead of latency by spreading out pages and memory<br>       accesses to those pages across multiple nodes.  However, accesses to<br>       a single page will still be limited to the memory bandwidth of a<br>       single node.<br><br>       <b>MPOL_PREFERRED </b>sets the preferred node for allocation.  The kernel<br>       will try to allocate pages from this node first and fall back to<br>       \"near by\" nodes if the preferred node is low on free memory.  If<br>       <i>nodemask</i> specifies more than one node ID, the first node in the mask<br>       will be selected as the preferred node.  If the <i>nodemask</i> and <i>maxnode</i><br>       arguments specify the empty set, then the policy specifies \"local<br>       allocation\" (like the system default policy discussed above).<br><br>       The thread memory policy is preserved across an execve(2), and is<br>       inherited by child threads created using fork(2) or clone(2).<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>set_mempolicy</b>() returns 0; on error, -1 is returned and<br>       <i>errno</i> is set to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b>Part of all of the memory range specified by <i>nodemask</i> and<br>              <i>maxnode</i> points outside your accessible address space.<br><br>       <b>EINVAL </b><i>mode</i> is invalid.  Or, <i>mode</i> is <b>MPOL_DEFAULT </b>and <i>nodemask</i> is<br>              nonempty, or <i>mode</i> is <b>MPOL_BIND </b>or <b>MPOL_INTERLEAVE </b>and <i>nodemask</i><br>              is empty.  Or, <i>maxnode</i> specifies more than a page worth of<br>              bits.  Or, <i>nodemask</i> specifies one or more node IDs that are<br>              greater than the maximum supported node ID.  Or, none of the<br>              node IDs specified by <i>nodemask</i> are on-line and allowed by the<br>              process's current cpuset context, or none of the specified<br>              nodes contain memory.  Or, the <i>mode</i> argument specified both<br>              <b>MPOL_F_STATIC_NODES </b>and <b>MPOL_F_RELATIVE_NODES</b>.<br><br>       <b>ENOMEM </b>Insufficient kernel memory was available.<br></pre><br><h2>VERSIONS  </h2><pre><br>       The <b>set_mempolicy</b>(), system call was added to the Linux kernel in<br>       version 2.6.7.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This system call is Linux-specific.<br></pre><br><h2>NOTES  </h2><pre><br>       Memory policy is not remembered if the page is swapped out.  When<br>       such a page is paged back in, it will use the policy of the thread or<br>       memory range that is in effect at the time the page is allocated.<br><br>       For information on library support, see numa(7).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       get_mempolicy(2), getcpu(2), mbind(2), mmap(2), numa(3), cpuset(7),<br>       numa(7), numactl(8)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-05-07                 SET_MEMPOLICY(2)</span><br></pre><br>"}