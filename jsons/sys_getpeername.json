{"Man page": "<pre><br><span class=\"headline\">GETPEERNAME(2)            Linux Programmer's Manual           GETPEERNAME(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       getpeername - get name of connected peer socket<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/socket.h&gt;</b><br><br>       <b>int getpeername(int </b><i>sockfd</i><b>, struct sockaddr *</b><i>addr</i><b>, socklen_t</b><br>       <b>*</b><i>addrlen</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>getpeername</b>() returns the address of the peer connected to the socket<br>       <i>sockfd</i>, in the buffer pointed to by <i>addr</i>.  The <i>addrlen</i> argument<br>       should be initialized to indicate the amount of space pointed to by<br>       <i>addr</i>.  On return it contains the actual size of the name returned (in<br>       bytes).  The name is truncated if the buffer provided is too small.<br><br>       The returned address is truncated if the buffer provided is too<br>       small; in this case, <i>addrlen</i> will return a value greater than was<br>       supplied to the call.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBADF  </b>The argument <i>sockfd</i> is not a valid descriptor.<br><br>       <b>EFAULT </b>The <i>addr</i> argument points to memory not in a valid part of the<br>              process address space.<br><br>       <b>EINVAL </b><i>addrlen</i> is invalid (e.g., is negative).<br><br>       <b>ENOBUFS</b><br>              Insufficient resources were available in the system to perform<br>              the operation.<br><br>       <b>ENOTCONN</b><br>              The socket is not connected.<br><br>       <b>ENOTSOCK</b><br>              The argument <i>sockfd</i> is a file, not a socket.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4, 4.4BSD (<b>getpeername</b>() first<br>       appeared in 4.2BSD).<br></pre><br><h2>NOTES  </h2><pre><br>       The third argument of <b>getpeername</b>() is in reality an <i>int *</i> (and this<br>       is what 4.x BSD and libc4 and libc5 have).  Some POSIX confusion<br>       resulted in the present <i>socklen_t</i>, also used by glibc.  See also<br>       accept(2).<br><br>       For stream sockets, once a connect(2) has been performed, either<br>       socket can call <b>getpeername</b>() to obtain the address of the peer<br>       socket.  On the other hand, datagram sockets are connectionless.<br>       Calling connect(2) on a datagram socket merely sets the peer address<br>       for outgoing datagrams sent with write(2) or recv(2).  The caller of<br>       connect(2) can use <b>getpeername</b>() to obtain the peer address that it<br>       earlier set for the socket.  However, the peer socket is unaware of<br>       this information, and calling <b>getpeername</b>() on the peer socket will<br>       return no useful information (unless a connect(2) call was also<br>       executed on the peer).  Note also that the receiver of a datagram can<br>       obtain the address of the sender when using recvfrom(2).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       accept(2), bind(2), getsockname(2), ip(7), socket(7), unix(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                   GETPEERNAME(2)</span><br></pre><br>"}