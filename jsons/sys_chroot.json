{"Man page": "<pre><br><span class=\"headline\">CHROOT(2)                 Linux Programmer's Manual                CHROOT(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       chroot - change root directory<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int chroot(const char *</b><i>path</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>chroot</b>():<br>           Since glibc 2.2.2:<br>               _BSD_SOURCE ||<br>                   (_XOPEN_SOURCE &gt;= 500 ||<br>                       _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED) &amp;&amp;<br>                   !(_POSIX_C_SOURCE &gt;= 200112L || _XOPEN_SOURCE &gt;= 600)<br>           Before glibc 2.2.2: none<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>chroot</b>() changes the root directory of the calling process to that<br>       specified in <i>path</i>.  This directory will be used for pathnames<br>       beginning with <i>/</i>.  The root directory is inherited by all children of<br>       the calling process.<br><br>       Only a privileged process (Linux: one with the <b>CAP_SYS_CHROOT</b><br>       capability) may call <b>chroot</b>().<br><br>       This call changes an ingredient in the pathname resolution process<br>       and does nothing else.  In particular, it is not intended to be used<br>       for any kind of security purpose, neither to fully sandbox a process<br>       nor to restrict filesystem system calls.  In the past, <b>chroot</b>() has<br>       been used by daemons to restrict themselves prior to passing paths<br>       supplied by untrusted users to system calls such as open(2).<br>       However, if a folder is moved out of the chroot directory, an<br>       attacker can exploit that to get out of the chroot directory as well.<br>       The easiest way to do that is to chdir(2) to the to-be-moved<br>       directory, wait for it to be moved out, then open a path like<br>       ../../../etc/passwd.<br><br>       A slightly trickier variation also works under some circumstances if<br>       chdir(2) is not permitted.  If a daemon allows a \"chroot directory\"<br>       to be specified, that usually means that if you want to prevent<br>       remote users from accessing files outside the chroot directory, you<br>       must ensure that folders are never moved out of it.<br><br>       This call does not change the current working directory, so that<br>       after the call '<i>.</i>' can be outside the tree rooted at '<i>/</i>'.  In<br>       particular, the superuser can escape from a \"chroot jail\" by doing:<br><br>           mkdir foo; chroot foo; cd ..<br><br>       This call does not close open file descriptors, and such file<br>       descriptors may allow access to files outside the chroot tree.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       Depending on the filesystem, other errors can be returned.  The more<br>       general errors are listed below:<br><br>       <b>EACCES </b>Search permission is denied on a component of the path prefix.<br>              (See also path_resolution(7).)<br><br>       <b>EFAULT </b><i>path</i> points outside your accessible address space.<br><br>       <b>EIO    </b>An I/O error occurred.<br><br>       <b>ELOOP  </b>Too many symbolic links were encountered in resolving <i>path</i>.<br><br>       <b>ENAMETOOLONG</b><br>              <i>path</i> is too long.<br><br>       <b>ENOENT </b>The file does not exist.<br><br>       <b>ENOMEM </b>Insufficient kernel memory was available.<br><br>       <b>ENOTDIR</b><br>              A component of <i>path</i> is not a directory.<br><br>       <b>EPERM  </b>The caller has insufficient privilege.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       SVr4, 4.4BSD, SUSv2 (marked LEGACY).  This function is not part of<br>       POSIX.1-2001.<br></pre><br><h2>NOTES  </h2><pre><br>       A child process created via fork(2) inherits its parent's root<br>       directory.  The root directory is left unchanged by execve(2).<br><br>       FreeBSD has a stronger <b>jail</b>() system call.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       chdir(2), path_resolution(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                        CHROOT(2)</span><br></pre><br>"}