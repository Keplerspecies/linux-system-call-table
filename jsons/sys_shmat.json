{"Man page": "<pre><br><span class=\"headline\">SHMOP(2)                  Linux Programmer's Manual                 SHMOP(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       shmat, shmdt - System V shared memory operations<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;sys/shm.h&gt;</b><br><br>       <b>void *shmat(int </b><i>shmid</i><b>, const void *</b><i>shmaddr</i><b>, int </b><i>shmflg</i><b>);</b><br><br>       <b>int shmdt(const void *</b><i>shmaddr</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>   <b>shmat()</b><br>       <b>shmat</b>() attaches the System V shared memory segment identified by<br>       <i>shmid</i> to the address space of the calling process.  The attaching<br>       address is specified by <i>shmaddr</i> with one of the following criteria:<br><br>       *  If <i>shmaddr</i> is NULL, the system chooses a suitable (unused) address<br>          at which to attach the segment.<br><br>       *  If <i>shmaddr</i> isn't NULL and <b>SHM_RND </b>is specified in <i>shmflg</i>, the<br>          attach occurs at the address equal to <i>shmaddr</i> rounded down to the<br>          nearest multiple of <b>SHMLBA</b>.<br><br>       *  Otherwise, <i>shmaddr</i> must be a page-aligned address at which the<br>          attach occurs.<br><br>       In addition to <b>SHM_RND</b>, the following flags may be specified in the<br>       <i>shmflg</i> bit-mask argument:<br><br>       <b>SHM_EXEC </b>(Linux-specific; since Linux 2.6.9)<br>              Allow the contents of the segment to be executed.  The caller<br>              must have execute permission on the segment.<br><br>       <b>SHM_RDONLY</b><br>              Attach the segment for read-only access.  The process must<br>              have read permission for the segment.  If this flag is not<br>              specified, the segment is attached for read and write access,<br>              and the process must have read and write permission for the<br>              segment.  There is no notion of a write-only shared memory<br>              segment.<br><br>       <b>SHM_REMAP </b>(Linux-specific)<br>              This flag specifies that the mapping of the segment should<br>              replace any existing mapping in the range starting at <i>shmaddr</i><br>              and continuing for the size of the segment.  (Normally, an<br>              <b>EINVAL </b>error would result if a mapping already exists in this<br>              address range.)  In this case, <i>shmaddr</i> must not be NULL.<br><br>       The brk(2) value of the calling process is not altered by the attach.<br>       The segment will automatically be detached at process exit.  The same<br>       segment may be attached as a read and as a read-write one, and more<br>       than once, in the process's address space.<br><br>       A successful <b>shmat</b>() call updates the members of the <i>shmid_ds</i><br>       structure (see shmctl(2)) associated with the shared memory segment<br>       as follows:<br><br>              <i>shm_atime</i> is set to the current time.<br><br>              <i>shm_lpid</i> is set to the process-ID of the calling process.<br><br>              <i>shm_nattch</i> is incremented by one.<br><br>   <b>shmdt()</b><br>       <b>shmdt</b>() detaches the shared memory segment located at the address<br>       specified by <i>shmaddr</i> from the address space of the calling process.<br>       The to-be-detached segment must be currently attached with <i>shmaddr</i><br>       equal to the value returned by the attaching <b>shmat</b>() call.<br><br>       On a successful <b>shmdt</b>() call, the system updates the members of the<br>       <i>shmid_ds</i> structure associated with the shared memory segment as<br>       follows:<br><br>              <i>shm_dtime</i> is set to the current time.<br><br>              <i>shm_lpid</i> is set to the process-ID of the calling process.<br><br>              <i>shm_nattch</i> is decremented by one.  If it becomes 0 and the<br>              segment is marked for deletion, the segment is deleted.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>shmat</b>() returns the address of the attached shared memory<br>       segment; on error, <i>(void *) -1</i> is returned, and <i>errno</i> is set to<br>       indicate the cause of the error.<br><br>       On success, <b>shmdt</b>() returns 0; on error -1 is returned, and <i>errno</i> is<br>       set to indicate the cause of the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       When <b>shmat</b>() fails, <i>errno</i> is set to one of the following:<br><br>       <b>EACCES </b>The calling process does not have the required permissions for<br>              the requested attach type, and does not have the <b>CAP_IPC_OWNER</b><br>              capability.<br><br>       <b>EIDRM  </b><i>shmid</i> points to a removed identifier.<br><br>       <b>EINVAL </b>Invalid <i>shmid</i> value, unaligned (i.e., not page-aligned and<br>              <b>SHM_RND </b>was not specified) or invalid <i>shmaddr</i> value, or can't<br>              attach segment at <i>shmaddr</i>, or <b>SHM_REMAP </b>was specified and<br>              <i>shmaddr</i> was NULL.<br><br>       <b>ENOMEM </b>Could not allocate memory for the descriptor or for the page<br>              tables.<br><br>       When <b>shmdt</b>() fails, <i>errno</i> is set as follows:<br><br>       <b>EINVAL </b>There is no shared memory segment attached at <i>shmaddr</i>; or,<br>              <i>shmaddr</i> is not aligned on a page boundary.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4.<br><br>       In SVID 3 (or perhaps earlier), the type of the <i>shmaddr</i> argument was<br>       changed from <i>char *</i> into <i>const void *</i>, and the returned type of<br>       <b>shmat</b>() from <i>char *</i> into <i>void *</i>.<br></pre><br><h2>NOTES  </h2><pre><br>       After a fork(2), the child inherits the attached shared memory<br>       segments.<br><br>       After an execve(2), all attached shared memory segments are detached<br>       from the process.<br><br>       Upon _exit(2), all attached shared memory segments are detached from<br>       the process.<br><br>       Using <b>shmat</b>() with <i>shmaddr</i> equal to NULL is the preferred, portable<br>       way of attaching a shared memory segment.  Be aware that the shared<br>       memory segment attached in this way may be attached at different<br>       addresses in different processes.  Therefore, any pointers maintained<br>       within the shared memory must be made relative (typically to the<br>       starting address of the segment), rather than absolute.<br><br>       On Linux, it is possible to attach a shared memory segment even if it<br>       is already marked to be deleted.  However, POSIX.1 does not specify<br>       this behavior and many other implementations do not support it.<br><br>       The following system parameter affects <b>shmat</b>():<br><br>       <b>SHMLBA </b>Segment low boundary address multiple.  When explicitly<br>              specifying an attach address in a call to <b>shmat</b>(), the caller<br>              should ensure that the address is a multiple of this value.<br>              This is necessary on some architectures, in order either to<br>              ensure good CPU cache performance or to ensure that different<br>              attaches of the same segment have consistent views within the<br>              CPU cache.  <b>SHMLBA </b>is normally some multiple of the system<br>              page size (on many Linux architectures, it is the same as the<br>              system page size).<br><br>       The implementation places no intrinsic per-process limit on the<br>       number of shared memory segments (<b>SHMSEG</b>).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       brk(2), mmap(2), shmctl(2), shmget(2), capabilities(7),<br>       shm_overview(7), svipc(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                         SHMOP(2)</span><br></pre><br>"}