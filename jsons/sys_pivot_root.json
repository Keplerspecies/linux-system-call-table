{"Man page": "<pre><br><span class=\"headline\">PIVOT_ROOT(2)             Linux Programmer's Manual            PIVOT_ROOT(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       pivot_root - change the root filesystem<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>int pivot_root(const char *</b><i>new_root</i><b>, const char *</b><i>put_old</i><b>);</b><br><br>       <i>Note</i>: There is no glibc wrapper for this system call; see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>pivot_root</b>() moves the root filesystem of the calling process to the<br>       directory <i>put_old</i> and makes <i>new_root</i> the new root filesystem of the<br>       calling process.<br><br>       The typical use of <b>pivot_root</b>() is during system startup, when the<br>       system mounts a temporary root filesystem (e.g., an <b>initrd</b>), then<br>       mounts the real root filesystem, and eventually turns the latter into<br>       the current root of all relevant processes or threads.<br><br>       <b>pivot_root</b>() may or may not change the current root and the current<br>       working directory of any processes or threads which use the old root<br>       directory.  The caller of <b>pivot_root</b>() must ensure that processes<br>       with root or current working directory at the old root operate<br>       correctly in either case.  An easy way to ensure this is to change<br>       their root and current working directory to <i>new_root</i> before invoking<br>       <b>pivot_root</b>().<br><br>       The paragraph above is intentionally vague because the implementation<br>       of <b>pivot_root</b>() may change in the future.  At the time of writing,<br>       <b>pivot_root</b>() changes root and current working directory of each<br>       process or thread to <i>new_root</i> if they point to the old root<br>       directory.  This is necessary in order to prevent kernel threads from<br>       keeping the old root directory busy with their root and current<br>       working directory, even if they never access the filesystem in any<br>       way.  In the future, there may be a mechanism for kernel threads to<br>       explicitly relinquish any access to the filesystem, such that this<br>       fairly intrusive mechanism can be removed from <b>pivot_root</b>().<br><br>       Note that this also applies to the calling process: <b>pivot_root</b>() may<br>       or may not affect its current working directory.  It is therefore<br>       recommended to call <b>chdir(\"/\") </b>immediately after <b>pivot_root</b>().<br><br>       The following restrictions apply to <i>new_root</i> and <i>put_old</i>:<br><br>       -  They must be directories.<br><br>       -  <i>new_root</i> and <i>put_old</i> must not be on the same filesystem as the<br>          current root.<br><br>       -  <i>put_old</i> must be underneath <i>new_root</i>, that is, adding a nonzero<br>          number of <i>/..</i> to the string pointed to by <i>put_old</i> must yield the<br>          same directory as <i>new_root</i>.<br><br>       -  No other filesystem may be mounted on <i>put_old</i>.<br><br>       See also pivot_root(8) for additional usage examples.<br><br>       If the current root is not a mount point (e.g., after chroot(2) or<br>       <b>pivot_root</b>(), see also below), not the old root directory, but the<br>       mount point of that filesystem is mounted on <i>put_old</i>.<br><br>       <i>new_root</i> does not have to be a mount point.  In this case,<br>       <i>/proc/mounts</i> will show the mount point of the filesystem containing<br>       <i>new_root</i> as root (<i>/</i>).<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>pivot_root</b>() may return (in <i>errno</i>) any of the errors returned by<br>       stat(2).  Additionally, it may return:<br><br>       <b>EBUSY  </b><i>new_root</i> or <i>put_old</i> are on the current root filesystem, or a<br>              filesystem is already mounted on <i>put_old</i>.<br><br>       <b>EINVAL </b><i>put_old</i> is not underneath <i>new_root</i>.<br><br>       <b>ENOTDIR</b><br>              <i>new_root</i> or <i>put_old</i> is not a directory.<br><br>       <b>EPERM  </b>The calling process does not have the <b>CAP_SYS_ADMIN</b><br>              capability.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>pivot_root</b>() was introduced in Linux 2.3.41.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>pivot_root</b>() is Linux-specific and hence is not portable.<br></pre><br><h2>NOTES  </h2><pre><br>       Glibc does not provide a wrapper for this system call; call it using<br>       syscall(2).<br></pre><br><h2>BUGS  </h2><pre><br>       <b>pivot_root</b>() should not have to change root and current working<br>       directory of all other processes in the system.<br><br>       Some of the more obscure uses of <b>pivot_root</b>() may quickly lead to<br>       insanity.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       chdir(2), chroot(2), stat(2), initrd(4), pivot_root(8)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2012-07-13                    PIVOT_ROOT(2)</span><br></pre><br>"}