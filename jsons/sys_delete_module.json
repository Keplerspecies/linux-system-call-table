{"Man page": "<pre><br><span class=\"headline\">DELETE_MODULE(2)          Linux Programmer's Manual         DELETE_MODULE(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       delete_module - unload a kernel module<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>int delete_module(const char *</b><i>name</i><b>, int </b><i>flags</i><b>);</b><br><br>       <i>Note</i>: No declaration of this function is provided in glibc headers;<br>       see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>delete_module</b>() system call attempts to remove the unused<br>       loadable module entry identified by <i>name</i>.  If the module has an <i>exit</i><br>       function, then that function is executed before unloading the module.<br>       The <i>flags</i> argument is used to modify the behavior of the system call,<br>       as described below.  This system call requires privilege.<br><br>       Module removal is attempted according to the following rules:<br><br>       1.  If there are other loaded modules that depend on (i.e., refer to<br>           symbols defined in) this module, then the call fails.<br><br>       2.  Otherwise, if the reference count for the module (i.e., the<br>           number of processes currently using the module) is zero, then the<br>           module is immediately unloaded.<br><br>       3.  If a module has a nonzero reference count, then the behavior<br>           depends on the bits set in <i>flags</i>.  In normal usage (see NOTES),<br>           the <b>O_NONBLOCK </b>flag is always specified, and the <b>O_TRUNC </b>flag may<br>           additionally be specified.<br><br>           The various combinations for <i>flags</i> have the following effect:<br><br>           <b>flags == O_NONBLOCK</b><br>                  The call returns immediately, with an error.<br><br>           <b>flags == (O_NONBLOCK | O_TRUNC)</b><br>                  The module is unloaded immediately, regardless of whether<br>                  it has a nonzero reference count.<br><br>           <b>(flags &amp; O_NONBLOCK) == 0</b><br>                  If <i>flags</i> does not specify <b>O_NONBLOCK</b>, the following steps<br>                  occur:<br><br>                  *  The module is marked so that no new references are<br>                     permitted.<br><br>                  *  If the module's reference count is nonzero, the caller<br>                     is placed in an uninterruptible sleep state<br>                     (<b>TASK_UNINTERRUPTIBLE</b>) until the reference count is<br>                     zero, at which point the call unblocks.<br><br>                  *  The module is unloaded in the usual way.<br><br>       The <b>O_TRUNC </b>flag has one further effect on the rules described above.<br>       By default, if a module has an <i>init</i> function but no <i>exit</i> function,<br>       then an attempt to remove the module will fail.  However, if <b>O_TRUNC</b><br>       was specified, this requirement is bypassed.<br><br>       Using the <b>O_TRUNC </b>flag is dangerous!  If the kernel was not built<br>       with <b>CONFIG_MODULE_FORCE_UNLOAD</b>, this flag is silently ignored.<br>       (Normally, <b>CONFIG_MODULE_FORCE_UNLOAD </b>is enabled.)  Using this flag<br>       taints the kernel (TAINT_FORCED_RMMOD).<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBUSY  </b>The module is not \"live\" (i.e., it is still being initialized<br>              or is already marked for removal); or, the module has an <i>init</i><br>              function but has no <i>exit</i> function, and <b>O_TRUNC </b>was not<br>              specified in <i>flags</i>.<br><br>       <b>EFAULT </b><i>name</i> refers to a location outside the process's accessible<br>              address space.<br><br>       <b>ENOENT </b>No module by that name exists.<br><br>       <b>EPERM  </b>The caller was not privileged (did not have the <b>CAP_SYS_MODULE</b><br>              capability), or module unloading is disabled (see<br>              <i>/proc/sys/kernel/modules_disabled</i> in proc(5)).<br><br>       <b>EWOULDBLOCK</b><br>              Other modules depend on this module; or, <b>O_NONBLOCK </b>was<br>              specified in <i>flags</i>, but the reference count of this module is<br>              nonzero and <b>O_TRUNC </b>was not specified in <i>flags</i>.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>delete_module</b>() is Linux-specific.<br></pre><br><h2>NOTES  </h2><pre><br>       The <b>delete_module</b>() system call is not supported by glibc.  No<br>       declaration is provided in glibc headers, but, through a quirk of<br>       history, glibc does export an ABI for this system call.  Therefore,<br>       in order to employ this system call, it is sufficient to manually<br>       declare the interface in your code; alternatively, you can invoke the<br>       system call using syscall(2).<br><br>       The uninterruptible sleep that may occur if <b>O_NONBLOCK </b>is omitted<br>       from <i>flags</i> is considered undesirable, because the sleeping process is<br>       left in an unkillable state.  As at Linux 3.7, specifying <b>O_NONBLOCK</b><br>       is optional, but in future kernels it is likely to become mandatory.<br><br>   <b>Linux 2.4 and earlier</b><br>       In Linux 2.4 and earlier, the system call took only one argument:<br><br>          <b>int delete_module(const char *</b><i>name</i><b>);</b><br><br>       If <i>name</i> is NULL, all unused modules marked auto-clean are removed.<br><br>       Some further details of differences in the behavior of<br>       <b>delete_module</b>() in Linux 2.4 and earlier are <i>not</i> currently explained<br>       in this manual page.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       create_module(2), init_module(2), query_module(2), lsmod(8),<br>       modprobe(8), rmmod(8)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2014-05-10                 DELETE_MODULE(2)</span><br></pre><br>"}