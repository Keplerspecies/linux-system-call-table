{"Man page": "<pre><br><span class=\"headline\">PRCTL(2)                  Linux Programmer's Manual                 PRCTL(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       prctl - operations on a process<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/prctl.h&gt;</b><br><br>       <b>int prctl(int </b><i>option</i><b>, unsigned long </b><i>arg2</i><b>, unsigned long </b><i>arg3</i><b>,</b><br>                 <b>unsigned long </b><i>arg4</i><b>, unsigned long </b><i>arg5</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>prctl</b>() is called with a first argument describing what to do (with<br>       values defined in <i>&lt;linux/prctl.h&gt;</i>), and further arguments with a<br>       significance depending on the first one.  The first argument can be:<br><br>       <b>PR_CAPBSET_READ </b>(since Linux 2.6.25)<br>              Return (as the function result) 1 if the capability specified<br>              in <i>arg2</i> is in the calling thread's capability bounding set, or<br>              0 if it is not.  (The capability constants are defined in<br>              <i>&lt;linux/capability.h&gt;</i>.)  The capability bounding set dictates<br>              whether the process can receive the capability through a<br>              file's permitted capability set on a subsequent call to<br>              execve(2).<br><br>              If the capability specified in <i>arg2</i> is not valid, then the<br>              call fails with the error <b>EINVAL</b>.<br><br>       <b>PR_CAPBSET_DROP </b>(since Linux 2.6.25)<br>              If the calling thread has the <b>CAP_SETPCAP </b>capability, then<br>              drop the capability specified by <i>arg2</i> from the calling<br>              thread's capability bounding set.  Any children of the calling<br>              thread will inherit the newly reduced bounding set.<br><br>              The call fails with the error: <b>EPERM </b>if the calling thread<br>              does not have the <b>CAP_SETPCAP</b>; <b>EINVAL </b>if <i>arg2</i> does not<br>              represent a valid capability; or <b>EINVAL </b>if file capabilities<br>              are not enabled in the kernel, in which case bounding sets are<br>              not supported.<br><br>       <b>PR_SET_CHILD_SUBREAPER </b>(since Linux 3.4)<br>              If <i>arg2</i> is nonzero, set the \"child subreaper\" attribute of the<br>              calling process; if <i>arg2</i> is zero, unset the attribute.  When a<br>              process is marked as a child subreaper, all of the children<br>              that it creates, and their descendants, will be marked as<br>              having a subreaper.  In effect, a subreaper fulfills the role<br>              of init(1) for its descendant processes.  Upon termination of<br>              a process that is orphaned (i.e., its immediate parent has<br>              already terminated) and marked as having a subreaper, the<br>              nearest still living ancestor subreaper will receive a <b>SIGCHLD</b><br>              signal and be able to wait(2) on the process to discover its<br>              termination status.<br><br>       <b>PR_GET_CHILD_SUBREAPER </b>(since Linux 3.4)<br>              Return the \"child subreaper\" setting of the caller, in the<br>              location pointed to by <i>(int *) arg2</i>.<br><br>       <b>PR_SET_DUMPABLE </b>(since Linux 2.3.20)<br>              Set the state of the \"dumpable\" flag, which determines whether<br>              core dumps are produced for the calling process upon delivery<br>              of a signal whose default behavior is to produce a core dump.<br><br>              In kernels up to and including 2.6.12, <i>arg2</i> must be either 0<br>              (<b>SUID_DUMP_DISABLE</b>, process is not dumpable) or 1<br>              (<b>SUID_DUMP_USER</b>, process is dumpable).  Between kernels 2.6.13<br>              and 2.6.17, the value 2 was also permitted, which caused any<br>              binary which normally would not be dumped to be dumped<br>              readable by root only; for security reasons, this feature has<br>              been removed.  (See also the description of <i>/proc/sys/fs/</i><br>              <i>suid_dumpable</i> in proc(5).)<br><br>              Normally, this flag is set to 1.  However, it is reset to the<br>              current value contained in the file <i>/proc/sys/fs/suid_dumpable</i><br>              (which by default has the value 0), if any of the following<br>              attributes of the process are changed by the operations listed<br>              below:<br><br>              *  The effective user or group ID is changed.<br><br>              *  The filesystem user or group ID is changed (see<br>                 credentials(7)).<br><br>              *  The process's set of permitted capabilities (see<br>                 capabilities(7)) is changed such that its new set of<br>                 capabilities is not a subset of its previous set of<br>                 capabilities.<br><br>              The operations that may trigger changes to the dumpable flag<br>              include:<br><br>              *  execution (execve(2)) of a set-user-ID or set-group-ID<br>                 program, or a program that has capabilities (see<br>                 capabilities(7));<br><br>              *  capset(2); and<br><br>              *  system calls that change process credentials (setuid(2)<br>                 setgid(2), setresuid(2), setresgid(2), setgroups(2), and so<br>                 on).<br><br>              Processes that are not dumpable can not be attached via<br>              ptrace(2) <b>PTRACE_ATTACH</b>.<br><br>       <b>PR_GET_DUMPABLE </b>(since Linux 2.3.20)<br>              Return (as the function result) the current state of the<br>              calling process's dumpable flag.<br><br>       <b>PR_SET_ENDIAN </b>(since Linux 2.6.18, PowerPC only)<br>              Set the endian-ness of the calling process to the value given<br>              in <i>arg2</i>, which should be one of the following: <b>PR_ENDIAN_BIG</b>,<br>              <b>PR_ENDIAN_LITTLE</b>, or <b>PR_ENDIAN_PPC_LITTLE </b>(PowerPC pseudo<br>              little endian).<br><br>       <b>PR_GET_ENDIAN </b>(since Linux 2.6.18, PowerPC only)<br>              Return the endian-ness of the calling process, in the location<br>              pointed to by <i>(int *) arg2</i>.<br><br>       <b>PR_SET_FPEMU </b>(since Linux 2.4.18, 2.5.9, only on ia64)<br>              Set floating-point emulation control bits to <i>arg2</i>.  Pass<br>              <b>PR_FPEMU_NOPRINT </b>to silently emulate floating-point operation<br>              accesses, or <b>PR_FPEMU_SIGFPE </b>to not emulate floating-point<br>              operations and send <b>SIGFPE </b>instead.<br><br>       <b>PR_GET_FPEMU </b>(since Linux 2.4.18, 2.5.9, only on ia64)<br>              Return floating-point emulation control bits, in the location<br>              pointed to by <i>(int *) arg2</i>.<br><br>       <b>PR_SET_FPEXC </b>(since Linux 2.4.21, 2.5.32, only on PowerPC)<br>              Set floating-point exception mode to <i>arg2</i>.  Pass<br>              <b>PR_FP_EXC_SW_ENABLE </b>to use FPEXC for FP exception enables,<br>              <b>PR_FP_EXC_DIV </b>for floating-point divide by zero, <b>PR_FP_EXC_OVF</b><br>              for floating-point overflow, <b>PR_FP_EXC_UND </b>for floating-point<br>              underflow, <b>PR_FP_EXC_RES </b>for floating-point inexact result,<br>              <b>PR_FP_EXC_INV </b>for floating-point invalid operation,<br>              <b>PR_FP_EXC_DISABLED </b>for FP exceptions disabled,<br>              <b>PR_FP_EXC_NONRECOV </b>for async nonrecoverable exception mode,<br>              <b>PR_FP_EXC_ASYNC </b>for async recoverable exception mode,<br>              <b>PR_FP_EXC_PRECISE </b>for precise exception mode.<br><br>       <b>PR_GET_FPEXC </b>(since Linux 2.4.21, 2.5.32, only on PowerPC)<br>              Return floating-point exception mode, in the location pointed<br>              to by <i>(int *) arg2</i>.<br><br>       <b>PR_SET_KEEPCAPS </b>(since Linux 2.2.18)<br>              Set the state of the thread's \"keep capabilities\" flag, which<br>              determines whether the threads's permitted capability set is<br>              cleared when a change is made to the threads's user IDs such<br>              that the threads's real UID, effective UID, and saved set-<br>              user-ID all become nonzero when at least one of them<br>              previously had the value 0.  By default, the permitted<br>              capability set is cleared when such a change is made; setting<br>              the \"keep capabilities\" flag prevents it from being cleared.<br>              <i>arg2</i> must be either 0 (permitted capabilities are cleared) or<br>              1 (permitted capabilities are kept).  (A thread's <i>effective</i><br>              capability set is always cleared when such a credential change<br>              is made, regardless of the setting of the \"keep capabilities\"<br>              flag.)  The \"keep capabilities\" value will be reset to 0 on<br>              subsequent calls to execve(2).<br><br>       <b>PR_GET_KEEPCAPS </b>(since Linux 2.2.18)<br>              Return (as the function result) the current state of the<br>              calling threads's \"keep capabilities\" flag.<br><br>       <b>PR_SET_NAME </b>(since Linux 2.6.9)<br>              Set the name of the calling thread, using the value in the<br>              location pointed to by <i>(char *) arg2</i>.  The name can be up to<br>              16 bytes long, including the terminating null byte.  (If the<br>              length of the string, including the terminating null byte,<br>              exceeds 16 bytes, the string is silently truncated.)  This is<br>              the same attribute that can be set via pthread_setname_np(3)<br>              and retrieved using pthread_getname_np(3).  The attribute is<br>              likewise accessible via <i>/proc/self/task/[tid]/comm</i>, where <i>tid</i><br>              is the name of the calling thread.<br><br>       <b>PR_GET_NAME </b>(since Linux 2.6.11)<br>              Return the name of the calling thread, in the buffer pointed<br>              to by <i>(char *) arg2</i>.  The buffer should allow space for up to<br>              16 bytes; the returned string will be null-terminated.<br><br>       <b>PR_SET_NO_NEW_PRIVS </b>(since Linux 3.5)<br>              Set the calling process's <i>no_new_privs</i> bit to the value in<br>              <i>arg2</i>.  With <i>no_new_privs</i> set to 1, execve(2) promises not to<br>              grant privileges to do anything that could not have been done<br>              without the execve(2) call (for example, rendering the set-<br>              user-ID and set-group-ID mode bits, and file capabilities non-<br>              functional).  Once set, this bit cannot be unset.  The setting<br>              of this bit is inherited by children created by fork(2) and<br>              clone(2), and preserved across execve(2).<br><br>              For more information, see the kernel source file<br>              <i>Documentation/prctl/no_new_privs.txt</i>.<br><br>       <b>PR_GET_NO_NEW_PRIVS </b>(since Linux 3.5)<br>              Return (as the function result) the value of the <i>no_new_privs</i><br>              bit for the current process.  A value of 0 indicates the<br>              regular execve(2) behavior.  A value of 1 indicates execve(2)<br>              will operate in the privilege-restricting mode described<br>              above.<br><br>       <b>PR_SET_PDEATHSIG </b>(since Linux 2.1.57)<br>              Set the parent death signal of the calling process to <i>arg2</i><br>              (either a signal value in the range 1..maxsig, or 0 to clear).<br>              This is the signal that the calling process will get when its<br>              parent dies.  This value is cleared for the child of a fork(2)<br>              and (since Linux 2.4.36 / 2.6.23) when executing a set-user-ID<br>              or set-group-ID binary, or a binary that has associated<br>              capabilities (see capabilities(7)).  This value is preserved<br>              across execve(2).<br><br>              <i>Warning</i>: the \"parent\" in this case is considered to be the<br>              <i>thread</i> that created this process.  In other words, the signal<br>              will be sent when that thread terminates (via, for example,<br>              pthread_exit(3)), rather than after all of the threads in the<br>              parent process terminate.<br><br>       <b>PR_GET_PDEATHSIG </b>(since Linux 2.3.15)<br>              Return the current value of the parent process death signal,<br>              in the location pointed to by <i>(int *) arg2</i>.<br><br>       <b>PR_SET_PTRACER </b>(since Linux 3.4)<br>              This is meaningful only when the Yama LSM is enabled and in<br>              mode 1 (\"restricted ptrace\", visible via<br>              <i>/proc/sys/kernel/yama/ptrace_scope</i>).  When a \"ptracer process<br>              ID\" is passed in <i>arg2</i>, the caller is declaring that the<br>              ptracer process can ptrace(2) the calling process as if it<br>              were a direct process ancestor.  Each <b>PR_SET_PTRACER </b>operation<br>              replaces the previous \"ptracer process ID\".  Employing<br>              <b>PR_SET_PTRACER </b>with <i>arg2</i> set to 0 clears the caller's \"ptracer<br>              process ID\".  If <i>arg2</i> is <b>PR_SET_PTRACER_ANY</b>, the ptrace<br>              restrictions introduced by Yama are effectively disabled for<br>              the calling process.<br><br>              For further information, see the kernel source file<br>              <i>Documentation/security/Yama.txt</i>.<br><br>       <b>PR_SET_SECCOMP </b>(since Linux 2.6.23)<br>              Set the secure computing (seccomp) mode for the calling<br>              thread, to limit the available system calls.  The more recent<br>              seccomp(2) system call provides a superset of the<br>              functionality of <b>PR_SET_SECCOMP</b>.<br><br>              The seccomp mode is selected via <i>arg2</i>.  (The seccomp constants<br>              are defined in <i>&lt;linux/seccomp.h&gt;</i>.)<br><br>              With <i>arg2</i> set to <b>SECCOMP_MODE_STRICT</b>, the only system calls<br>              that the thread is permitted to make are read(2), write(2),<br>              _exit(2) (but not exit_group(2)), and sigreturn(2).  Other<br>              system calls result in the delivery of a <b>SIGKILL </b>signal.<br>              Strict secure computing mode is useful for number-crunching<br>              applications that may need to execute untrusted byte code,<br>              perhaps obtained by reading from a pipe or socket.  This<br>              operation is available only if the kernel is configured with<br>              <b>CONFIG_SECCOMP </b>enabled.<br><br>              With <i>arg2</i> set to <b>SECCOMP_MODE_FILTER </b>(since Linux 3.5), the<br>              system calls allowed are defined by a pointer to a Berkeley<br>              Packet Filter passed in <i>arg3</i>.  This argument is a pointer to<br>              <i>struct sock_fprog</i>; it can be designed to filter arbitrary<br>              system calls and system call arguments.  This mode is<br>              available only if the kernel is configured with<br>              <b>CONFIG_SECCOMP_FILTER </b>enabled.<br><br>              If <b>SECCOMP_MODE_FILTER </b>filters permit fork(2), then the<br>              seccomp mode is inherited by children created by fork(2); if<br>              execve(2) is permitted, then the seccomp mode is preserved<br>              across execve(2).  If the filters permit <b>prctl</b>() calls, then<br>              additional filters can be added; they are run in order until<br>              the first non-allow result is seen.<br><br>              For further information, see the kernel source file<br>              <i>Documentation/prctl/seccomp_filter.txt</i>.<br><br>       <b>PR_GET_SECCOMP </b>(since Linux 2.6.23)<br>              Return (as the function result) the secure computing mode of<br>              the calling thread.  If the caller is not in secure computing<br>              mode, this operation returns 0; if the caller is in strict<br>              secure computing mode, then the <b>prctl</b>() call will cause a<br>              <b>SIGKILL </b>signal to be sent to the process.  If the caller is in<br>              filter mode, and this system call is allowed by the seccomp<br>              filters, it returns 2; otherwise, the process is killed with a<br>              <b>SIGKILL </b>signal.  This operation is available only if the<br>              kernel is configured with <b>CONFIG_SECCOMP </b>enabled.<br><br>              Since Linux 3.8, the <i>Seccomp</i> field of the <i>/proc/[pid]/status</i><br>              file provides a method of obtaining the same information,<br>              without the risk that the process is killed; see proc(5).<br><br>       <b>PR_SET_SECUREBITS </b>(since Linux 2.6.26)<br>              Set the \"securebits\" flags of the calling thread to the value<br>              supplied in <i>arg2</i>.  See capabilities(7).<br><br>       <b>PR_GET_SECUREBITS </b>(since Linux 2.6.26)<br>              Return (as the function result) the \"securebits\" flags of the<br>              calling thread.  See capabilities(7).<br><br>       <b>PR_SET_THP_DISABLE </b>(since Linux 3.15)<br>              Set the state of the \"THP disable\" flag for the calling<br>              thread.  If <i>arg2</i> has a nonzero value, the flag is set,<br>              otherwise it is cleared.  Setting this flag provides a method<br>              for disabling transparent huge pages for jobs where the code<br>              cannot be modified, and using a malloc hook with madvise(2) is<br>              not an option (i.e., statically allocated data).  The setting<br>              of the \"THP disable\" flag is inherited by a child created via<br>              fork(2) and is preserved across execve(2).<br><br>       <b>PR_GET_THP_DISABLE </b>(since Linux 3.15)<br>              Return (via the function result) the current setting of the<br>              \"THP disable\" flag for the calling thread: either 1, if the<br>              flag is set, or 0, if it is not.<br><br>       <b>PR_GET_TID_ADDRESS </b>(since Linux 3.5)<br>              Retrieve the <i>clear_child_tid</i> address set by set_tid_address(2)<br>              and the clone(2) <b>CLONE_CHILD_CLEARTID </b>flag, in the location<br>              pointed to by <i>(int **) arg2</i>.  This feature is available only<br>              if the kernel is built with the <b>CONFIG_CHECKPOINT_RESTORE</b><br>              option enabled.<br><br>       <b>PR_SET_TIMERSLACK </b>(since Linux 2.6.28)<br>              Set the current timer slack for the calling thread to the<br>              nanosecond value supplied in <i>arg2</i>.  If <i>arg2</i> is less than or<br>              equal to zero, reset the current timer slack to the thread's<br>              default timer slack value.  The timer slack is used by the<br>              kernel to group timer expirations for the calling thread that<br>              are close to one another; as a consequence, timer expirations<br>              for the thread may be up to the specified number of<br>              nanoseconds late (but will never expire early).  Grouping<br>              timer expirations can help reduce system power consumption by<br>              minimizing CPU wake-ups.<br><br>              The timer expirations affected by timer slack are those set by<br>              select(2), pselect(2), poll(2), ppoll(2), epoll_wait(2),<br>              epoll_pwait(2), clock_nanosleep(2), nanosleep(2), and futex(2)<br>              (and thus the library functions implemented via futexes,<br>              including <b>pthread_cond_timedwait</b>(3),<br>              <b>pthread_mutex_timedlock</b>(3), <b>pthread_rwlock_timedrdlock</b>(3),<br>              <b>pthread_rwlock_timedwrlock</b>(3), and sem_timedwait(3)).<br><br>              Timer slack is not applied to threads that are scheduled under<br>              a real-time scheduling policy (see sched_setscheduler(2)).<br><br>              Each thread has two associated timer slack values: a \"default\"<br>              value, and a \"current\" value.  The current value is the one<br>              that governs grouping of timer expirations.  When a new thread<br>              is created, the two timer slack values are made the same as<br>              the current value of the creating thread.  Thereafter, a<br>              thread can adjust its current timer slack value via<br>              <b>PR_SET_TIMERSLACK </b>(the default value can't be changed).  The<br>              timer slack values of <i>init</i> (PID 1), the ancestor of all<br>              processes, are 50,000 nanoseconds (50 microseconds).  The<br>              timer slack values are preserved across execve(2).<br><br>       <b>PR_GET_TIMERSLACK </b>(since Linux 2.6.28)<br>              Return (as the function result) the current timer slack value<br>              of the calling thread.<br><br>       <b>PR_SET_TIMING </b>(since Linux 2.6.0-test4)<br>              Set whether to use (normal, traditional) statistical process<br>              timing or accurate timestamp-based process timing, by passing<br>              <b>PR_TIMING_STATISTICAL </b>or <b>PR_TIMING_TIMESTAMP </b>to <i>arg2</i>.<br>              <b>PR_TIMING_TIMESTAMP </b>is not currently implemented (attempting<br>              to set this mode will yield the error <b>EINVAL</b>).<br><br>       <b>PR_GET_TIMING </b>(since Linux 2.6.0-test4)<br>              Return (as the function result) which process timing method is<br>              currently in use.<br><br>       <b>PR_TASK_PERF_EVENTS_DISABLE </b>(since Linux 2.6.31)<br>              Disable all performance counters attached to the calling<br>              process, regardless of whether the counters were created by<br>              this process or another process.  Performance counters created<br>              by the calling process for other processes are unaffected.<br>              For more information on performance counters, see the Linux<br>              kernel source file <i>tools/perf/design.txt</i>.<br><br>              Originally called <b>PR_TASK_PERF_COUNTERS_DISABLE</b>; renamed (with<br>              same numerical value) in Linux 2.6.32.<br><br>       <b>PR_TASK_PERF_EVENTS_ENABLE </b>(since Linux 2.6.31)<br>              The converse of <b>PR_TASK_PERF_EVENTS_DISABLE</b>; enable<br>              performance counters attached to the calling process.<br><br>              Originally called <b>PR_TASK_PERF_COUNTERS_ENABLE</b>; renamed in<br>              Linux 2.6.32.<br><br>       <b>PR_SET_TSC </b>(since Linux 2.6.26, x86 only)<br>              Set the state of the flag determining whether the timestamp<br>              counter can be read by the process.  Pass <b>PR_TSC_ENABLE </b>to<br>              <i>arg2</i> to allow it to be read, or <b>PR_TSC_SIGSEGV </b>to generate a<br>              <b>SIGSEGV </b>when the process tries to read the timestamp counter.<br><br>       <b>PR_GET_TSC </b>(since Linux 2.6.26, x86 only)<br>              Return the state of the flag determining whether the timestamp<br>              counter can be read, in the location pointed to by <i>(int *)</i><br>              <i>arg2</i>.<br><br>       <b>PR_SET_UNALIGN</b><br>              (Only on: ia64, since Linux 2.3.48; parisc, since Linux<br>              2.6.15; PowerPC, since Linux 2.6.18; Alpha, since Linux<br>              2.6.22) Set unaligned access control bits to <i>arg2</i>.  Pass<br>              <b>PR_UNALIGN_NOPRINT </b>to silently fix up unaligned user accesses,<br>              or <b>PR_UNALIGN_SIGBUS </b>to generate <b>SIGBUS </b>on unaligned user<br>              access.<br><br>       <b>PR_GET_UNALIGN</b><br>              (see <b>PR_SET_UNALIGN </b>for information on versions and<br>              architectures) Return unaligned access control bits, in the<br>              location pointed to by <i>(int *) arg2</i>.<br><br>       <b>PR_MCE_KILL </b>(since Linux 2.6.32)<br>              Set the machine check memory corruption kill policy for the<br>              current thread.  If <i>arg2</i> is <b>PR_MCE_KILL_CLEAR</b>, clear the<br>              thread memory corruption kill policy and use the system-wide<br>              default.  (The system-wide default is defined by<br>              <i>/proc/sys/vm/memory_failure_early_kill</i>; see proc(5).)  If <i>arg2</i><br>              is <b>PR_MCE_KILL_SET</b>, use a thread-specific memory corruption<br>              kill policy.  In this case, <i>arg3</i> defines whether the policy is<br>              <i>early kill</i> (<b>PR_MCE_KILL_EARLY</b>), <i>late kill</i> (<b>PR_MCE_KILL_LATE</b>),<br>              or the system-wide default (<b>PR_MCE_KILL_DEFAULT</b>).  Early kill<br>              means that the thread receives a <b>SIGBUS </b>signal as soon as<br>              hardware memory corruption is detected inside its address<br>              space.  In late kill mode, the process is killed only when it<br>              accesses a corrupted page.  See sigaction(2) for more<br>              information on the <b>SIGBUS </b>signal.  The policy is inherited by<br>              children.  The remaining unused <b>prctl</b>() arguments must be zero<br>              for future compatibility.<br><br>       <b>PR_MCE_KILL_GET </b>(since Linux 2.6.32)<br>              Return the current per-process machine check kill policy.  All<br>              unused <b>prctl</b>() arguments must be zero.<br><br>       <b>PR_SET_MM </b>(since Linux 3.3)<br>              Modify certain kernel memory map descriptor fields of the<br>              calling process.  Usually these fields are set by the kernel<br>              and dynamic loader (see ld.so(8) for more information) and a<br>              regular application should not use this feature.  However,<br>              there are cases, such as self-modifying programs, where a<br>              program might find it useful to change its own memory map.<br>              This feature is available only if the kernel is built with the<br>              <b>CONFIG_CHECKPOINT_RESTORE </b>option enabled.  The calling process<br>              must have the <b>CAP_SYS_RESOURCE </b>capability.  The value in <i>arg2</i><br>              is one of the options below, while <i>arg3</i> provides a new value<br>              for the option.<br><br>              <b>PR_SET_MM_START_CODE</b><br>                     Set the address above which the program text can run.<br>                     The corresponding memory area must be readable and<br>                     executable, but not writable or sharable (see<br>                     mprotect(2) and mmap(2) for more information).<br><br>              <b>PR_SET_MM_END_CODE</b><br>                     Set the address below which the program text can run.<br>                     The corresponding memory area must be readable and<br>                     executable, but not writable or sharable.<br><br>              <b>PR_SET_MM_START_DATA</b><br>                     Set the address above which initialized and<br>                     uninitialized (bss) data are placed.  The corresponding<br>                     memory area must be readable and writable, but not<br>                     executable or sharable.<br><br>              <b>PR_SET_MM_END_DATA</b><br>                     Set the address below which initialized and<br>                     uninitialized (bss) data are placed.  The corresponding<br>                     memory area must be readable and writable, but not<br>                     executable or sharable.<br><br>              <b>PR_SET_MM_START_STACK</b><br>                     Set the start address of the stack.  The corresponding<br>                     memory area must be readable and writable.<br><br>              <b>PR_SET_MM_START_BRK</b><br>                     Set the address above which the program heap can be<br>                     expanded with brk(2) call.  The address must be greater<br>                     than the ending address of the current program data<br>                     segment.  In addition, the combined size of the<br>                     resulting heap and the size of the data segment can't<br>                     exceed the <b>RLIMIT_DATA </b>resource limit (see<br>                     setrlimit(2)).<br><br>              <b>PR_SET_MM_BRK</b><br>                     Set the current brk(2) value.  The requirements for the<br>                     address are the same as for the <b>PR_SET_MM_START_BRK</b><br>                     option.<br><br>              The following options are available since Linux 3.5.<br><br>              <b>PR_SET_MM_ARG_START</b><br>                     Set the address above which the program command line is<br>                     placed.<br><br>              <b>PR_SET_MM_ARG_END</b><br>                     Set the address below which the program command line is<br>                     placed.<br><br>              <b>PR_SET_MM_ENV_START</b><br>                     Set the address above which the program environment is<br>                     placed.<br><br>              <b>PR_SET_MM_ENV_END</b><br>                     Set the address below which the program environment is<br>                     placed.<br><br>                     The address passed with <b>PR_SET_MM_ARG_START</b>,<br>                     <b>PR_SET_MM_ARG_END</b>, <b>PR_SET_MM_ENV_START</b>, and<br>                     <b>PR_SET_MM_ENV_END </b>should belong to a process stack<br>                     area.  Thus, the corresponding memory area must be<br>                     readable, writable, and (depending on the kernel<br>                     configuration) have the <b>MAP_GROWSDOWN </b>attribute set<br>                     (see mmap(2)).<br><br>              <b>PR_SET_MM_AUXV</b><br>                     Set a new auxiliary vector.  The <i>arg3</i> argument should<br>                     provide the address of the vector.  The <i>arg4</i> is the<br>                     size of the vector.<br><br>              <b>PR_SET_MM_EXE_FILE</b><br>                     Supersede the <i>/proc/pid/exe</i> symbolic link with a new<br>                     one pointing to a new executable file identified by the<br>                     file descriptor provided in <i>arg3</i> argument.  The file<br>                     descriptor should be obtained with a regular open(2)<br>                     call.<br><br>                     To change the symbolic link, one needs to unmap all<br>                     existing executable memory areas, including those<br>                     created by the kernel itself (for example the kernel<br>                     usually creates at least one executable memory area for<br>                     the ELF <i>.text</i> section).<br><br>                     The second limitation is that such transitions can be<br>                     done only once in a process life time.  Any further<br>                     attempts will be rejected.  This should help system<br>                     administrators monitor unusual symbolic-link<br>                     transitions over all processes running on a system.<br><br>       <b>PR_MPX_ENABLE_MANAGEMENT</b>, <b>PR_MPX_DISABLE_MANAGEMENT </b>(since Linux<br>       3.19)<br>              Enable or disable kernel management of Memory Protection<br>              eXtensions (MPX) bounds tables.  The <i>arg2</i>, <i>arg3</i>, <i>arg4</i>, and<br>              <i>arg5</i> arguments must be zero.<br><br>              MPX is a hardware-assisted mechanism for performing bounds<br>              checking on pointers.  It consists of a set of registers<br>              storing bounds information and a set of special instruction<br>              prefixes that tell the CPU on which instructions it should do<br>              bounds enforcement.  There is a limited number of these<br>              registers and when there are more pointers than registers,<br>              their contents must be \"spilled\" into a set of tables.  These<br>              tables are called \"bounds tables\" and the MPX <b>prctl</b>()<br>              operations control whether the kernel manages their allocation<br>              and freeing.<br><br>              When management is enabled, the kernel will take over<br>              allocation and freeing of the bounds tables.  It does this by<br>              trapping the #BR exceptions that result at first use of<br>              missing bounds tables and instead of delivering the exception<br>              to user space, it allocates the table and populates the bounds<br>              directory with the location of the new table.  For freeing,<br>              the kernel checks to see if bounds tables are present for<br>              memory which is not allocated, and frees them if so.<br><br>              Before enabling MPX management using <b>PR_MPX_ENABLE_MANAGEMENT</b>,<br>              the application must first have allocated a user-space buffer<br>              for the bounds directory and placed the location of that<br>              directory in the <i>bndcfgu</i> register.<br><br>              These calls will fail if the CPU or kernel does not support<br>              MPX.  Kernel support for MPX is enabled via the<br>              <b>CONFIG_X86_INTEL_MPX </b>configuration option.  You can check<br>              whether the CPU supports MPX by looking for the 'mpx' CPUID<br>              bit, like with the following command:<br><br>                   cat /proc/cpuinfo | grep ' mpx '<br><br>              A thread may not switch in or out of long (64-bit) mode while<br>              MPX is enabled.<br><br>              All threads in a process are affected by these calls.<br><br>              The child of a fork(2) inherits the state of MPX management.<br>              During execve(2), MPX management is reset to a state as if<br>              <b>PR_MPX_DISABLE_MANAGEMENT </b>had been called.<br><br>              For further information on Intel MPX, see the kernel source<br>              file <i>Documentation/x86/intel_mpx.txt</i>.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>PR_GET_DUMPABLE</b>, <b>PR_GET_KEEPCAPS</b>, <b>PR_GET_NO_NEW_PRIVS</b>,<br>       <b>PR_GET_THP_DISABLE</b>, <b>PR_CAPBSET_READ</b>, <b>PR_GET_TIMING</b>,<br>       <b>PR_GET_TIMERSLACK</b>, <b>PR_GET_SECUREBITS</b>, <b>PR_MCE_KILL_GET</b>, and (if it<br>       returns) <b>PR_GET_SECCOMP </b>return the nonnegative values described<br>       above.  All other <i>option</i> values return 0 on success.  On error, -1 is<br>       returned, and <i>errno</i> is set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b><i>arg2</i> is an invalid address.<br><br>       <b>EFAULT </b><i>option</i> is <b>PR_SET_SECCOMP</b>, <i>arg2</i> is <b>SECCOMP_MODE_FILTER</b>, the<br>              system was built with <b>CONFIG_SECCOMP_FILTER</b>, and <i>arg3</i> is an<br>              invalid address.<br><br>       <b>EINVAL </b>The value of <i>option</i> is not recognized.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_MCE_KILL </b>or <b>PR_MCE_KILL_GET </b>or <b>PR_SET_MM</b>, and<br>              unused <b>prctl</b>() arguments were not specified as zero.<br><br>       <b>EINVAL </b><i>arg2</i> is not valid value for this <i>option</i>.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_SET_SECCOMP </b>or <b>PR_GET_SECCOMP</b>, and the kernel was<br>              not configured with <b>CONFIG_SECCOMP</b>.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_SET_SECCOMP</b>, <i>arg2</i> is <b>SECCOMP_MODE_FILTER</b>, and the<br>              kernel was not configured with <b>CONFIG_SECCOMP_FILTER</b>.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_SET_MM</b>, and one of the following is true<br><br>              *  <i>arg4</i> or <i>arg5</i> is nonzero;<br><br>              *  <i>arg3</i> is greater than <b>TASK_SIZE </b>(the limit on the size of<br>                 the user address space for this architecture);<br><br>              *  <i>arg2</i> is <b>PR_SET_MM_START_CODE</b>, <b>PR_SET_MM_END_CODE</b>,<br>                 <b>PR_SET_MM_START_DATA</b>, <b>PR_SET_MM_END_DATA</b>, or<br>                 <b>PR_SET_MM_START_STACK</b>, and the permissions of the<br>                 corresponding memory area are not as required;<br><br>              *  <i>arg2</i> is <b>PR_SET_MM_START_BRK </b>or <b>PR_SET_MM_BRK</b>, and <i>arg3</i> is<br>                 less than or equal to the end of the data segment or<br>                 specifies a value that would cause the <b>RLIMIT_DATA </b>resource<br>                 limit to be exceeded.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_SET_PTRACER </b>and <i>arg2</i> is not 0,<br>              <b>PR_SET_PTRACER_ANY</b>, or the PID of an existing process.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_SET_PDEATHSIG </b>and <i>arg2</i> is not a valid signal<br>              number.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_SET_DUMPABLE </b>and <i>arg2</i> is neither<br>              <b>SUID_DUMP_DISABLE </b>nor <b>SUID_DUMP_USER</b>.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_SET_TIMING </b>and <i>arg2</i> is not <b>PR_TIMING_STATISTICAL</b>.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_SET_NO_NEW_PRIVS </b>and <i>arg2</i> is not equal to 1 or<br>              <i>arg3</i>, <i>arg4</i>, or <i>arg5</i> is nonzero.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_GET_NO_NEW_PRIVS </b>and <i>arg2</i>, <i>arg3</i>, <i>arg4</i>, or <i>arg5</i> is<br>              nonzero.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_SET_THP_DISABLE </b>and <i>arg3</i>, <i>arg4</i>, or <i>arg5</i> is<br>              nonzero.<br><br>       <b>EINVAL </b><i>option</i> is <b>PR_GET_THP_DISABLE </b>and <i>arg2</i>, <i>arg3</i>, <i>arg4</i>, or <i>arg5</i> is<br>              nonzero.<br><br>       <b>EPERM  </b><i>option</i> is <b>PR_SET_SECUREBITS</b>, and the caller does not have the<br>              <b>CAP_SETPCAP </b>capability, or tried to unset a \"locked\" flag, or<br>              tried to set a flag whose corresponding locked flag was set<br>              (see capabilities(7)).<br><br>       <b>EPERM  </b><i>option</i> is <b>PR_SET_KEEPCAPS</b>, and the callers's<br>              <b>SECURE_KEEP_CAPS_LOCKED </b>flag is set (see capabilities(7)).<br><br>       <b>EPERM  </b><i>option</i> is <b>PR_CAPBSET_DROP</b>, and the caller does not have the<br>              <b>CAP_SETPCAP </b>capability.<br><br>       <b>EPERM  </b><i>option</i> is <b>PR_SET_MM</b>, and the caller does not have the<br>              <b>CAP_SYS_RESOURCE </b>capability.<br><br>       <b>EACCES </b><i>option</i> is <b>PR_SET_MM</b>, and <i>arg3</i> is <b>PR_SET_MM_EXE_FILE</b>, the file<br>              is not executable.<br><br>       <b>EBUSY  </b><i>option</i> is <b>PR_SET_MM</b>, <i>arg3</i> is <b>PR_SET_MM_EXE_FILE</b>, and this the<br>              second attempt to change the <i>/proc/pid/exe</i> symbolic link,<br>              which is prohibited.<br><br>       <b>EBADF  </b><i>option</i> is <b>PR_SET_MM</b>, <i>arg3</i> is <b>PR_SET_MM_EXE_FILE</b>, and the file<br>              descriptor passed in <i>arg4</i> is not valid.<br><br>       <b>ENXIO  </b><i>option</i> was <b>PR_MPX_ENABLE_MANAGEMENT </b>or<br>              <b>PR_MPX_DISABLE_MANAGEMENT </b>and the kernel or the CPU does not<br>              support MPX management.  Check that the kernel and processor<br>              have MPX support.<br></pre><br><h2>VERSIONS  </h2><pre><br>       The <b>prctl</b>() system call was introduced in Linux 2.1.57.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This call is Linux-specific.  IRIX has a <b>prctl</b>() system call (also<br>       introduced in Linux 2.1.44 as irix_prctl on the MIPS architecture),<br>       with prototype<br><br>       <b>ptrdiff_t prctl(int </b><i>option</i><b>, int </b><i>arg2</i><b>, int </b><i>arg3</i><b>);</b><br><br>       and options to get the maximum number of processes per user, get the<br>       maximum number of processors the calling process can use, find out<br>       whether a specified process is currently blocked, get or set the<br>       maximum stack size, and so on.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       signal(2), core(5)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-05-07                         PRCTL(2)</span><br></pre><br>"}