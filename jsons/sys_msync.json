{"Man page": "<pre><br><span class=\"headline\">MSYNC(2)                  Linux Programmer's Manual                 MSYNC(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       msync - synchronize a file with a memory map<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/mman.h&gt;</b><br><br>       <b>int msync(void *</b><i>addr</i><b>, size_t </b><i>length</i><b>, int </b><i>flags</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>msync</b>() flushes changes made to the in-core copy of a file that was<br>       mapped into memory using mmap(2) back to the filesystem.  Without use<br>       of this call, there is no guarantee that changes are written back<br>       before munmap(2) is called.  To be more precise, the part of the file<br>       that corresponds to the memory area starting at <i>addr</i> and having<br>       length <i>length</i> is updated.<br><br>       The <i>flags</i> argument should specify exactly one of <b>MS_ASYNC </b>and<br>       <b>MS_SYNC</b>, and may additionally include the <b>MS_INVALIDATE </b>bit.  These<br>       bits have the following meanings:<br><br>       <b>MS_ASYNC</b><br>              Specifies that an update be scheduled, but the call returns<br>              immediately.<br><br>       <b>MS_SYNC</b><br>              Requests an update and waits for it to complete.<br><br>       <b>MS_INVALIDATE</b><br>              Asks to invalidate other mappings of the same file (so that<br>              they can be updated with the fresh values just written).<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBUSY  MS_INVALIDATE </b>was specified in <i>flags</i>, and a memory lock exists<br>              for the specified address range.<br><br>       <b>EINVAL </b><i>addr</i> is not a multiple of PAGESIZE; or any bit other than<br>              <b>MS_ASYNC </b>| <b>MS_INVALIDATE </b>| <b>MS_SYNC </b>is set in <i>flags</i>; or both<br>              <b>MS_SYNC </b>and <b>MS_ASYNC </b>are set in <i>flags</i>.<br><br>       <b>ENOMEM </b>The indicated memory (or part of it) was not mapped.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008.<br><br>       This call was introduced in Linux 1.3.21, and then used <b>EFAULT</b><br>       instead of <b>ENOMEM</b>.  In Linux 2.4.19, this was changed to the POSIX<br>       value <b>ENOMEM</b>.<br></pre><br><h2>AVAILABILITY  </h2><pre><br>       On POSIX systems on which <b>msync</b>() is available, both<br>       <b>_POSIX_MAPPED_FILES </b>and <b>_POSIX_SYNCHRONIZED_IO </b>are defined in<br>       <i>&lt;unistd.h&gt;</i> to a value greater than 0.  (See also sysconf(3).)<br></pre><br><h2>NOTES  </h2><pre><br>       According to POSIX, either <b>MS_SYNC </b>or <b>MS_ASYNC </b>must be specified in<br>       <i>flags</i>, and indeed failure to include one of these flags will cause<br>       <b>msync</b>() to fail on some systems.  However, Linux permits a call to<br>       <b>msync</b>() that specifies neither of these flags, with semantics that<br>       are (currently) equivalent to specifying <b>MS_ASYNC</b>.  (Since Linux<br>       2.6.19, <b>MS_ASYNC </b>is in fact a no-op, since the kernel properly tracks<br>       dirty pages and flushes them to storage as necessary.)<br>       Notwithstanding the Linux behavior, portable, future-proof<br>       applications should ensure that they specify either <b>MS_SYNC </b>or<br>       <b>MS_ASYNC </b>in <i>flags</i>.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       mmap(2)<br><br>       B.O. Gallmeister, POSIX.4, O'Reilly, pp. 128-129 and 389-391.<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                         MSYNC(2)</span><br></pre><br>"}