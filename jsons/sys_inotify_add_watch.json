{"Man page": "<pre><br><span class=\"headline\">INOTIFY_ADD_WATCH(2)      Linux Programmer's Manual     INOTIFY_ADD_WATCH(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       inotify_add_watch - add a watch to an initialized inotify instance<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/inotify.h&gt;</b><br><br>       <b>int inotify_add_watch(int </b><i>fd</i><b>, const char *</b><i>pathname</i><b>, uint32_t </b><i>mask</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>inotify_add_watch</b>() adds a new watch, or modifies an existing watch,<br>       for the file whose location is specified in <i>pathname</i>; the caller must<br>       have read permission for this file.  The <i>fd</i> argument is a file<br>       descriptor referring to the inotify instance whose watch list is to<br>       be modified.  The events to be monitored for <i>pathname</i> are specified<br>       in the <i>mask</i> bit-mask argument.  See inotify(7) for a description of<br>       the bits that can be set in <i>mask</i>.<br><br>       A successful call to <b>inotify_add_watch</b>() returns a unique watch<br>       descriptor for this inotify instance, for the filesystem object that<br>       corresponds to <i>pathname</i>.  If the filesystem object was not previously<br>       being watched by this inotify instance, then the watch descriptor is<br>       newly allocated.  If the filesystem object was already being watched<br>       (perhaps via a different link to the same object), then the<br>       descriptor for the existing watch is returned.<br><br>       The watch descriptor is returned by later read(2)s from the inotify<br>       file descriptor.  These reads fetch <i>inotify_event</i> structures (see<br>       inotify(7)) indicating filesystem events; the watch descriptor inside<br>       this structure identifies the object for which the event occurred.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>inotify_add_watch</b>() returns a nonnegative watch<br>       descriptor.  On error, -1 is returned and <i>errno</i> is set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EACCES </b>Read access to the given file is not permitted.<br><br>       <b>EBADF  </b>The given file descriptor is not valid.<br><br>       <b>EFAULT </b><i>pathname</i> points outside of the process's accessible address<br>              space.<br><br>       <b>EINVAL </b>The given event mask contains no valid events; or <i>fd</i> is not an<br>              inotify file descriptor.<br><br>       <b>ENAMETOOLONG</b><br>              <i>pathname</i> is too long.<br><br>       <b>ENOENT </b>A directory component in <i>pathname</i> does not exist or is a<br>              dangling symbolic link.<br><br>       <b>ENOMEM </b>Insufficient kernel memory was available.<br><br>       <b>ENOSPC </b>The user limit on the total number of inotify watches was<br>              reached or the kernel failed to allocate a needed resource.<br></pre><br><h2>VERSIONS  </h2><pre><br>       Inotify was merged into the 2.6.13 Linux kernel.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This system call is Linux-specific.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       inotify_init(2), inotify_rm_watch(2), inotify(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2014-07-08             INOTIFY_ADD_WATCH(2)</span><br></pre><br>"}