{"Man page": "<pre><br><span class=\"headline\">FLOCK(2)                  Linux Programmer's Manual                 FLOCK(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       flock - apply or remove an advisory lock on an open file<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/file.h&gt;</b><br><br>       <b>int flock(int </b><i>fd</i><b>, int </b><i>operation</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       Apply or remove an advisory lock on the open file specified by <i>fd</i>.<br>       The argument <i>operation</i> is one of the following:<br><br>           <b>LOCK_SH  </b>Place a shared lock.  More than one process may hold a<br>                    shared lock for a given file at a given time.<br><br>           <b>LOCK_EX  </b>Place an exclusive lock.  Only one process may hold an<br>                    exclusive lock for a given file at a given time.<br><br>           <b>LOCK_UN  </b>Remove an existing lock held by this process.<br><br>       A call to <b>flock</b>() may block if an incompatible lock is held by<br>       another process.  To make a nonblocking request, include <b>LOCK_NB </b>(by<br>       ORing) with any of the above operations.<br><br>       A single file may not simultaneously have both shared and exclusive<br>       locks.<br><br>       Locks created by <b>flock</b>() are associated with an open file description<br>       (see open(2)).  This means that duplicate file descriptors (created<br>       by, for example, fork(2) or dup(2)) refer to the same lock, and this<br>       lock may be modified or released using any of these descriptors.<br>       Furthermore, the lock is released either by an explicit <b>LOCK_UN</b><br>       operation on any of these duplicate descriptors, or when all such<br>       descriptors have been closed.<br><br>       If a process uses open(2) (or similar) to obtain more than one<br>       descriptor for the same file, these descriptors are treated<br>       independently by <b>flock</b>().  An attempt to lock the file using one of<br>       these file descriptors may be denied by a lock that the calling<br>       process has already placed via another descriptor.<br><br>       A process may hold only one type of lock (shared or exclusive) on a<br>       file.  Subsequent <b>flock</b>() calls on an already locked file will<br>       convert an existing lock to the new lock mode.<br><br>       Locks created by <b>flock</b>() are preserved across an execve(2).<br><br>       A shared or exclusive lock can be placed on a file regardless of the<br>       mode in which the file was opened.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBADF  </b><i>fd</i> is not an open file descriptor.<br><br>       <b>EINTR  </b>While waiting to acquire a lock, the call was interrupted by<br>              delivery of a signal caught by a handler; see signal(7).<br><br>       <b>EINVAL </b><i>operation</i> is invalid.<br><br>       <b>ENOLCK </b>The kernel ran out of memory for allocating lock records.<br><br>       <b>EWOULDBLOCK</b><br>              The file is locked and the <b>LOCK_NB </b>flag was selected.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       4.4BSD (the <b>flock</b>() call first appeared in 4.2BSD).  A version of<br>       <b>flock</b>(), possibly implemented in terms of fcntl(2), appears on most<br>       UNIX systems.<br></pre><br><h2>NOTES  </h2><pre><br>       Since kernel 2.0, <b>flock</b>() is implemented as a system call in its own<br>       right rather than being emulated in the GNU C library as a call to<br>       fcntl(2).  With this implementation, there is no interaction between<br>       the types of lock placed by <b>flock</b>() and fcntl(2), and <b>flock</b>() does<br>       not detect deadlock.  (Note, however, that on some systems, such as<br>       the modern BSDs, <b>flock</b>() and fcntl(2) locks <i>do</i> interact with one<br>       another.)<br><br>       In Linux kernels up to 2.6.11, <b>flock</b>() does not lock files over NFS<br>       (i.e., the scope of locks was limited to the local system).  Instead,<br>       one could use fcntl(2) byte-range locking, which does work over NFS,<br>       given a sufficiently recent version of Linux and a server which<br>       supports locking.  Since Linux 2.6.12, NFS clients support <b>flock</b>()<br>       locks by emulating them as byte-range locks on the entire file.  This<br>       means that fcntl(2) and <b>flock</b>() locks <i>do</i> interact with one another<br>       over NFS.  Since Linux 2.6.37, the kernel supports a compatibility<br>       mode that allows <b>flock</b>() locks (and also fcntl(2) byte region locks)<br>       to be treated as local; see the discussion of the <i>local_lock</i> option<br>       in nfs(5).<br><br>       <b>flock</b>() places advisory locks only; given suitable permissions on a<br>       file, a process is free to ignore the use of <b>flock</b>() and perform I/O<br>       on the file.<br><br>       <b>flock</b>() and fcntl(2) locks have different semantics with respect to<br>       forked processes and dup(2).  On systems that implement <b>flock</b>() using<br>       fcntl(2), the semantics of <b>flock</b>() will be different from those<br>       described in this manual page.<br><br>       Converting a lock (shared to exclusive, or vice versa) is not<br>       guaranteed to be atomic: the existing lock is first removed, and then<br>       a new lock is established.  Between these two steps, a pending lock<br>       request by another process may be granted, with the result that the<br>       conversion either blocks, or fails if <b>LOCK_NB </b>was specified.  (This<br>       is the original BSD behavior, and occurs on many other<br>       implementations.)<br></pre><br><h2>SEE ALSO  </h2><pre><br>       flock(1), close(2), dup(2), execve(2), fcntl(2), fork(2), open(2),<br>       lockf(3)<br><br>       <i>Documentation/filesystems/locks.txt</i> in the Linux kernel source tree<br>       (<i>Documentation/locks.txt</i> in older kernels)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2014-09-21                         FLOCK(2)</span><br></pre><br>"}