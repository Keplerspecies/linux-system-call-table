{"Man page": "<pre><br><span class=\"headline\">SYSLOG(2)                 Linux Programmer's Manual                SYSLOG(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       syslog,  klogctl  - read and/or clear kernel message ring buffer; set<br>       console_loglevel<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>int syslog(int </b><i>type</i><b>, char *</b><i>bufp</i><b>, int </b><i>len</i><b>);</b><br>                       <b>/* No wrapper provided in glibc */</b><br><br>       /* The glibc interface */<br>       <b>#include &lt;sys/klog.h&gt;</b><br><br>       <b>int klogctl(int </b><i>type</i><b>, char *</b><i>bufp</i><b>, int </b><i>len</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <i>Note</i>: Probably, you are looking for the C library function <b>syslog</b>(),<br>       which talks to <b>syslogd</b>(8); see syslog(3) for details.<br><br>       This page describes the kernel <b>syslog</b>() system call, which is used to<br>       control the kernel <i>printk</i>() buffer; the glibc wrapper function for<br>       the system call is called <b>klogctl</b>().<br><br>   <b>The kernel log buffer</b><br>       The kernel has a cyclic buffer of length <b>LOG_BUF_LEN </b>in which<br>       messages given as arguments to the kernel function <b>printk</b>() are<br>       stored (regardless of their log level).  In early kernels,<br>       <b>LOG_BUF_LEN </b>had the value 4096; from kernel 1.3.54, it was 8192; from<br>       kernel 2.1.113, it was 16384; since kernel 2.4.23/2.6, the value is a<br>       kernel configuration option (<b>CONFIG_LOG_BUF_SHIFT</b>, default value<br>       dependent on the architecture).  Since Linux 2.6.6, the size can be<br>       queried with command type 10 (see below).<br><br>   <b>Commands</b><br>       The <i>type</i> argument determines the action taken by this function.  The<br>       list below specifies the values for <i>type</i>.  The symbolic names are<br>       defined in the kernel source, but are not exported to user space; you<br>       will either need to use the numbers, or define the names yourself.<br><br>       <b>SYSLOG_ACTION_CLOSE </b>(0)<br>              Close the log.  Currently a NOP.<br><br>       <b>SYSLOG_ACTION_OPEN </b>(1)<br>              Open the log.  Currently a NOP.<br><br>       <b>SYSLOG_ACTION_READ </b>(2)<br>              Read from the log.  The call waits until the kernel log buffer<br>              is nonempty, and then reads at most <i>len</i> bytes into the buffer<br>              pointed to by <i>bufp</i>.  The call returns the number of bytes<br>              read.  Bytes read from the log disappear from the log buffer:<br>              the information can be read only once.  This is the function<br>              executed by the kernel when a user program reads <i>/proc/kmsg</i>.<br><br>       <b>SYSLOG_ACTION_READ_ALL </b>(3)<br>              Read all messages remaining in the ring buffer, placing them<br>              in the buffer pointed to by <i>bufp</i>.  The call reads the last <i>len</i><br>              bytes from the log buffer (nondestructively), but will not<br>              read more than was written into the buffer since the last<br>              \"clear ring buffer\" command (see command 5 below)).  The call<br>              returns the number of bytes read.<br><br>       <b>SYSLOG_ACTION_READ_CLEAR </b>(4)<br>              Read and clear all messages remaining in the ring buffer.  The<br>              call does precisely the same as for a <i>type</i> of 3, but also<br>              executes the \"clear ring buffer\" command.<br><br>       <b>SYSLOG_ACTION_CLEAR </b>(5)<br>              The call executes just the \"clear ring buffer\" command.  The<br>              <i>bufp</i> and <i>len</i> arguments are ignored.<br><br>              This command does not really clear the ring buffer.  Rather,<br>              it sets a kernel bookkeeping variable that determines the<br>              results returned by commands 3 (<b>SYSLOG_ACTION_READ_ALL</b>) and 4<br>              (<b>SYSLOG_ACTION_READ_CLEAR</b>).  This command has no effect on<br>              commands 2 (<b>SYSLOG_ACTION_READ</b>) and 9<br>              (<b>SYSLOG_ACTION_SIZE_UNREAD</b>).<br><br>       <b>SYSLOG_ACTION_CONSOLE_OFF </b>(6)<br>              The command saves the current value of <i>console_loglevel</i> and<br>              then sets <i>console_loglevel</i> to <i>minimum_console_loglevel</i>, so<br>              that no messages are printed to the console.  Before Linux<br>              2.6.32, the command simply sets <i>console_loglevel</i> to<br>              <i>minimum_console_loglevel</i>.  See the discussion of<br>              <i>/proc/sys/kernel/printk</i>, below.<br><br>              The <i>bufp</i> and <i>len</i> arguments are ignored.<br><br>       <b>SYSLOG_ACTION_CONSOLE_ON </b>(7)<br>              If a previous <b>SYSLOG_ACTION_CONSOLE_OFF </b>command has been<br>              performed, this command restores <i>console_loglevel</i> to the value<br>              that was saved by that command.  Before Linux 2.6.32, this<br>              command simply sets <i>console_loglevel</i> to<br>              <i>default_console_loglevel</i>.  See the discussion of<br>              <i>/proc/sys/kernel/printk</i>, below.<br><br>              The <i>bufp</i> and <i>len</i> arguments are ignored.<br><br>       <b>SYSLOG_ACTION_CONSOLE_LEVEL </b>(8)<br>              The call sets <i>console_loglevel</i> to the value given in <i>len</i>,<br>              which must be an integer between 1 and 8 (inclusive).  The<br>              kernel silently enforces a minimum value of<br>              <i>minimum_console_loglevel</i> for <i>len</i>.  See the <i>log level</i> section<br>              for details.  The <i>bufp</i> argument is ignored.<br><br>       <b>SYSLOG_ACTION_SIZE_UNREAD </b>(9) (since Linux 2.4.10)<br>              The call returns the number of bytes currently available to be<br>              read from the kernel log buffer via command 2<br>              (<b>SYSLOG_ACTION_READ</b>).  The <i>bufp</i> and <i>len</i> arguments are ignored.<br><br>       <b>SYSLOG_ACTION_SIZE_BUFFER </b>(10) (since Linux 2.6.6)<br>              This command returns the total size of the kernel log buffer.<br>              The <i>bufp</i> and <i>len</i> arguments are ignored.<br><br>       All commands except 3 and 10 require privilege.  In Linux kernels<br>       before 2.6.37, command types 3 and 10 are allowed to unprivileged<br>       processes; since Linux 2.6.37, these commands are allowed to<br>       unprivileged processes only if <i>/proc/sys/kernel/dmesg_restrict</i> has<br>       the value 0.  Before Linux 2.6.37, \"privileged\" means that the caller<br>       has the <b>CAP_SYS_ADMIN </b>capability.  Since Linux 2.6.37, \"privileged\"<br>       means that the caller has either the <b>CAP_SYS_ADMIN </b>capability (now<br>       deprecated for this purpose) or the (new) <b>CAP_SYSLOG </b>capability.<br><br>   <b>/proc/sys/kernel/printk</b><br>       <i>/proc/sys/kernel/printk</i> is a writable file containing four integer<br>       values that influence kernel <i>printk()</i> behavior when printing or<br>       logging error messages.  The four values are:<br><br>       <i>console_loglevel</i><br>              Only messages with a log level lower than this value will be<br>              printed to the console.  The default value for this field is<br>              <b>DEFAULT_CONSOLE_LOGLEVEL </b>(7), but it is set to 4 if the kernel<br>              command line contains the word \"quiet\", 10 if the kernel<br>              command line contains the word \"debug\", and to 15 in case of a<br>              kernel fault (the 10 and 15 are just silly, and equivalent to<br>              8).  The value of <i>console_loglevel</i> can be set (to a value in<br>              the range 1-8) by a <b>syslog</b>() call with a <i>type</i> of 8.<br><br>       <i>default_message_loglevel</i><br>              This value will be used as the log level for <i>printk()</i> messages<br>              that do not have an explicit level.  Up to and including Linux<br>              2.6.38, the hard-coded default value for this field was 4<br>              (<b>KERN_WARNING</b>); since Linux 2.6.39, the default value is a<br>              defined by the kernel configuration option<br>              <b>CONFIG_DEFAULT_MESSAGE_LOGLEVEL</b>, which defaults to 4.<br><br>       <i>minimum_console_loglevel</i><br>              The value in this field is the minimum value to which<br>              <i>console_loglevel</i> can be set.<br><br>       <i>default_console_loglevel</i><br>              This is the default value for <i>console_loglevel</i>.<br><br>   <b>The log level</b><br>       Every <i>printk</i>() message has its own log level.  If the log level is<br>       not explicitly specified as part of the message, it defaults to<br>       <i>default_message_loglevel</i>.  The conventional meaning of the log level<br>       is as follows:<br><br>       <b>Kernel constant   Level value   Meaning</b><br>       <b>KERN_EMERG             </b>0        System is unusable<br>       <b>KERN_ALERT             </b>1        Action must be taken immediately<br>       <b>KERN_CRIT              </b>2        Critical conditions<br>       <b>KERN_ERR               </b>3        Error conditions<br>       <b>KERN_WARNING           </b>4        Warning conditions<br>       <b>KERN_NOTICE            </b>5        Normal but significant condition<br>       <b>KERN_INFO              </b>6        Informational<br>       <b>KERN_DEBUG             </b>7        Debug-level messages<br><br>       The kernel <i>printk()</i> routine will print a message on the console only<br>       if it has a log level less than the value of <i>console_loglevel</i>.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       For <i>type</i> equal to 2, 3, or 4, a successful call to <b>syslog</b>() returns<br>       the number of bytes read.  For <i>type</i> 9, <b>syslog</b>() returns the number of<br>       bytes currently available to be read on the kernel log buffer.  For<br>       <i>type</i> 10, <b>syslog</b>() returns the total size of the kernel log buffer.<br>       For other values of <i>type</i>, 0 is returned on success.<br><br>       In case of error, -1 is returned, and <i>errno</i> is set to indicate the<br>       error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EINVAL </b>Bad arguments (e.g., bad <i>type</i>; or for <i>type</i> 2, 3, or 4, <i>buf</i> is<br>              NULL, or <i>len</i> is less than zero; or for <i>type</i> 8, the <i>level</i> is<br>              outside the range 1 to 8).<br><br>       <b>ENOSYS </b>This <b>syslog</b>() system call is not available, because the kernel<br>              was compiled with the <b>CONFIG_PRINTK </b>kernel-configuration<br>              option disabled.<br><br>       <b>EPERM  </b>An attempt was made to change <i>console_loglevel</i> or clear the<br>              kernel message ring buffer by a process without sufficient<br>              privilege (more precisely: without the <b>CAP_SYS_ADMIN </b>or<br>              <b>CAP_SYSLOG </b>capability).<br><br>       <b>ERESTARTSYS</b><br>              System call was interrupted by a signal; nothing was read.<br>              (This can be seen only during a trace.)<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This system call is Linux-specific and should not be used in programs<br>       intended to be portable.<br></pre><br><h2>NOTES  </h2><pre><br>       From the very start, people noted that it is unfortunate that a<br>       system call and a library routine of the same name are entirely<br>       different animals.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       dmesg(1), syslog(3), capabilities(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-05-07                        SYSLOG(2)</span><br></pre><br>"}