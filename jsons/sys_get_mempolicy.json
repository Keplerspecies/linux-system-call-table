{"Man page": "<pre><br><span class=\"headline\">GET_MEMPOLICY(2)          Linux Programmer's Manual         GET_MEMPOLICY(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       get_mempolicy - retrieve NUMA memory policy for a thread<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;numaif.h&gt;</b><br><br>       <b>int get_mempolicy(int *</b><i>mode</i><b>, unsigned long *</b><i>nodemask</i><b>,</b><br>                         <b>unsigned long </b><i>maxnode</i><b>, unsigned long </b><i>addr</i><b>,</b><br>                         <b>unsigned long </b><i>flags</i><b>);</b><br><br>       Link with <i>-lnuma</i>.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>get_mempolicy</b>() retrieves the NUMA policy of the calling thread or of<br>       a memory address, depending on the setting of <i>flags</i>.<br><br>       A NUMA machine has different memory controllers with different<br>       distances to specific CPUs.  The memory policy defines from which<br>       node memory is allocated for the thread.<br><br>       If <i>flags</i> is specified as 0, then information about the calling<br>       thread's default policy (as set by set_mempolicy(2)) is returned.<br>       The policy returned [<i>mode</i> and <i>nodemask</i>] may be used to restore the<br>       thread's policy to its state at the time of the call to<br>       <b>get_mempolicy</b>() using set_mempolicy(2).<br><br>       If <i>flags</i> specifies <b>MPOL_F_MEMS_ALLOWED </b>(available since Linux<br>       2.6.24), the <i>mode</i> argument is ignored and the set of nodes [memories]<br>       that the thread is allowed to specify in subsequent calls to mbind(2)<br>       or set_mempolicy(2) [in the absence of any <i>mode flags</i>] is returned in<br>       <i>nodemask</i>.  It is not permitted to combine <b>MPOL_F_MEMS_ALLOWED </b>with<br>       either <b>MPOL_F_ADDR </b>or <b>MPOL_F_NODE</b>.<br><br>       If <i>flags</i> specifies <b>MPOL_F_ADDR</b>, then information is returned about<br>       the policy governing the memory address given in <i>addr</i>.  This policy<br>       may be different from the thread's default policy if mbind(2) or one<br>       of the helper functions described in numa(3) has been used to<br>       establish a policy for the memory range containing <i>addr</i>.<br><br>       If the <i>mode</i> argument is not NULL, then <b>get_mempolicy</b>() will store the<br>       policy mode and any optional <i>mode flags</i> of the requested NUMA policy<br>       in the location pointed to by this argument.  If <i>nodemask</i> is not<br>       NULL, then the nodemask associated with the policy will be stored in<br>       the location pointed to by this argument.  <i>maxnode</i> specifies the<br>       number of node IDs that can be stored into <i>nodemask</i>&#8212;that is, the<br>       maximum node ID plus one.  The value specified by <i>maxnode</i> is always<br>       rounded to a multiple of <i>sizeof(unsigned long)</i>.<br><br>       If <i>flags</i> specifies both <b>MPOL_F_NODE </b>and <b>MPOL_F_ADDR</b>, <b>get_mempolicy</b>()<br>       will return the node ID of the node on which the address <i>addr</i> is<br>       allocated into the location pointed to by <i>mode</i>.  If no page has yet<br>       been allocated for the specified address, <b>get_mempolicy</b>() will<br>       allocate a page as if the thread had performed a read [load] access<br>       to that address, and return the ID of the node where that page was<br>       allocated.<br><br>       If <i>flags</i> specifies <b>MPOL_F_NODE</b>, but not <b>MPOL_F_ADDR</b>, and the thread's<br>       current policy is <b>MPOL_INTERLEAVE</b>, then <b>get_mempolicy</b>() will return<br>       in the location pointed to by a non-NULL <i>mode</i> argument, the node ID<br>       of the next node that will be used for interleaving of internal<br>       kernel pages allocated on behalf of the thread.  These allocations<br>       include pages for memory-mapped files in process memory ranges mapped<br>       using the mmap(2) call with the <b>MAP_PRIVATE </b>flag for read accesses,<br>       and in memory ranges mapped with the <b>MAP_SHARED </b>flag for all<br>       accesses.<br><br>       Other flag values are reserved.<br><br>       For an overview of the possible policies see set_mempolicy(2).<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>get_mempolicy</b>() returns 0; on error, -1 is returned and<br>       <i>errno</i> is set to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b>Part of all of the memory range specified by <i>nodemask</i> and<br>              <i>maxnode</i> points outside your accessible address space.<br><br>       <b>EINVAL </b>The value specified by <i>maxnode</i> is less than the number of node<br>              IDs supported by the system.  Or <i>flags</i> specified values other<br>              than <b>MPOL_F_NODE </b>or <b>MPOL_F_ADDR</b>; or <i>flags</i> specified<br>              <b>MPOL_F_ADDR </b>and <i>addr</i> is NULL, or <i>flags</i> did not specify<br>              <b>MPOL_F_ADDR </b>and <i>addr</i> is not NULL.  Or, <i>flags</i> specified<br>              <b>MPOL_F_NODE </b>but not <b>MPOL_F_ADDR </b>and the current thread policy<br>              is not <b>MPOL_INTERLEAVE</b>.  Or, <i>flags</i> specified<br>              <b>MPOL_F_MEMS_ALLOWED </b>with either <b>MPOL_F_ADDR </b>or <b>MPOL_F_NODE</b>.<br>              (And there are other <b>EINVAL </b>cases.)<br></pre><br><h2>VERSIONS  </h2><pre><br>       The <b>get_mempolicy</b>() system call was added to the Linux kernel in<br>       version 2.6.7.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This system call is Linux-specific.<br></pre><br><h2>NOTES  </h2><pre><br>       For information on library support, see numa(7).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       getcpu(2), mbind(2), mmap(2), set_mempolicy(2), numa(3), numa(7),<br>       numactl(8)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-05-07                 GET_MEMPOLICY(2)</span><br></pre><br>"}