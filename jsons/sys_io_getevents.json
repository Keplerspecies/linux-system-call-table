{"Man page": "<pre><br><span class=\"headline\">IO_GETEVENTS(2)           Linux Programmer's Manual          IO_GETEVENTS(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       io_getevents - read asynchronous I/O events from the completion queue<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;linux/aio_abi.h&gt;         </b>/* Defines needed types */<br>       <b>#include &lt;linux/time.h&gt;            </b>/* Defines 'struct timespec' */<br><br>       <b>int io_getevents(aio_context_t </b><i>ctx_id</i><b>, long </b><i>min_nr</i><b>, long </b><i>nr</i><b>,</b><br>                        <b>struct io_event *</b><i>events</i><b>, struct timespec *</b><i>timeout</i><b>);</b><br><br>       <i>Note</i>: There is no glibc wrapper for this system call; see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>io_getevents</b>() system call attempts to read at least <i>min_nr</i><br>       events and up to <i>nr</i> events from the completion queue of the AIO<br>       context specified by <i>ctx_id</i>.<br><br>       The <i>timeout</i> argument specifies the amount of time to wait for events,<br>       and is specified as a relative timeout in a structure of the<br>       following form:<br><br>           struct timespec {<br>               time_t tv_sec;      /* seconds */<br>               long   tv_nsec;     /* nanoseconds [0 .. 999999999] */<br>           };<br><br>       The specified time will be rounded up to the system clock granularity<br>       and is guaranteed not to expire     early.<br><br>       Specifying <i>timeout</i> as NULL means block indefinitely until at least<br>       <i>min_nr</i> events have been obtained.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>io_getevents</b>() returns the number of events read.  This<br>       may be 0, or a value less than <i>min_nr</i>, if the <i>timeout</i> expired.  It<br>       may also be a nonzero value less than <i>min_nr</i>, if the call was<br>       interrupted by a signal handler.<br><br>       For the failure return, see NOTES.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b>Either <i>events</i> or <i>timeout</i> is an invalid pointer.<br><br>       <b>EINVAL </b><i>ctx_id</i> is invalid.  <i>min_nr</i> is out of range or <i>nr</i> is out of<br>              range.<br><br>       <b>EINTR  </b>Interrupted by a signal handler; see signal(7).<br><br>       <b>ENOSYS io_getevents</b>() is not implemented on this architecture.<br></pre><br><h2>VERSIONS  </h2><pre><br>       The asynchronous I/O system calls first appeared in Linux 2.5.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>io_getevents</b>() is Linux-specific and should not be used in programs<br>       that are intended to be portable.<br></pre><br><h2>NOTES  </h2><pre><br>       Glibc does not provide a wrapper function for this system call.  You<br>       could invoke it using syscall(2).  But instead, you probably want to<br>       use the <b>io_getevents</b>() wrapper function provided by <i>libaio</i>.<br><br>       Note that the <i>libaio</i> wrapper function uses a different type<br>       (<i>io_context_t</i>) for the <i>ctx_id</i> argument.  Note also that the <i>libaio</i><br>       wrapper does not follow the usual C library conventions for<br>       indicating errors: on error it returns a negated error number (the<br>       negative of one of the values listed in ERRORS).  If the system call<br>       is invoked via syscall(2), then the return value follows the usual<br>       conventions for indicating an error: -1, with <i>errno</i> set to a<br>       (positive) value that indicates the error.<br></pre><br><h2>BUGS  </h2><pre><br>       An invalid <i>ctx_id</i> may cause a segmentation fault instead of<br>       generating the error <b>EINVAL</b>.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       io_cancel(2), io_destroy(2), io_setup(2), io_submit(2), aio(7),<br>       time(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                  IO_GETEVENTS(2)</span><br></pre><br>"}