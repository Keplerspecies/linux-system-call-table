{"Man page": "<pre><br><span class=\"headline\">ARCH_PRCTL(2)             Linux Programmer's Manual            ARCH_PRCTL(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       arch_prctl - set architecture-specific thread state<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;asm/prctl.h&gt;</b><br>       <b>#include &lt;sys/prctl.h&gt;</b><br><br>       <b>int arch_prctl(int </b><i>code</i><b>, unsigned long </b><i>addr</i><b>);</b><br>       <b>int arch_prctl(int </b><i>code</i><b>, unsigned long *</b><i>addr</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>arch_prctl</b>() function sets architecture-specific process or<br>       thread state.  <i>code</i> selects a subfunction and passes argument <i>addr</i> to<br>       it; <i>addr</i> is interpreted as either an <i>unsigned long</i> for the \"set\"<br>       operations, or as an <i>unsigned long *</i>, for the \"get\" operations.<br><br>       Subfunctions for x86-64 are:<br><br>       <b>ARCH_SET_FS</b><br>              Set the 64-bit base for the <i>FS</i> register to <i>addr</i>.<br><br>       <b>ARCH_GET_FS</b><br>              Return the 64-bit base value for the <i>FS</i> register of the<br>              current thread in the <i>unsigned long</i> pointed to by <i>addr</i>.<br><br>       <b>ARCH_SET_GS</b><br>              Set the 64-bit base for the <i>GS</i> register to <i>addr</i>.<br><br>       <b>ARCH_GET_GS</b><br>              Return the 64-bit base value for the <i>GS</i> register of the<br>              current thread in the <i>unsigned long</i> pointed to by <i>addr</i>.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>arch_prctl</b>() returns 0; on error, -1 is returned, and<br>       <i>errno</i> is set to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b><i>addr</i> points to an unmapped address or is outside the process<br>              address space.<br><br>       <b>EINVAL </b><i>code</i> is not a valid subcommand.<br><br>       <b>EPERM  </b><i>addr</i> is outside the process address space.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>arch_prctl</b>() is a Linux/x86-64 extension and should not be used in<br>       programs intended to be portable.<br></pre><br><h2>NOTES  </h2><pre><br>       <b>arch_prctl</b>() is supported only on Linux/x86-64 for 64-bit programs<br>       currently.<br><br>       The 64-bit base changes when a new 32-bit segment selector is loaded.<br><br>       <b>ARCH_SET_GS </b>is disabled in some kernels.<br><br>       Context switches for 64-bit segment bases are rather expensive.  As<br>       an optimization, if a 32-bit TLS base address is used, arch_prctl(2)<br>       may use a real TLS entry as if set_thread_area(2) had been called,<br>       instead of manipulating the segment base register directly.  Memory<br>       in the first 2GB of address space can be allocated by using mmap(2)<br>       with the <b>MAP_32BIT </b>flag.<br><br>       Because of the aforementioned optimization, using arch_prctl(2) and<br>       set_thread_area(2) in the same thread is dangerous, as they may<br>       overwrite each other's TLS entries.<br><br>       As of version 2.7, glibc provides no prototype for <b>arch_prctl</b>().  You<br>       have to declare it yourself for now.  This may be fixed in future<br>       glibc versions.<br><br>       <i>FS</i> may be already used by the threading library.  Programs that use<br>       <b>ARCH_SET_FS </b>directly are very likely to crash.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       mmap(2), modify_ldt(2), prctl(2), set_thread_area(2)<br><br>       AMD X86-64 Programmer's manual<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-02-21                    ARCH_PRCTL(2)</span><br></pre><br>"}