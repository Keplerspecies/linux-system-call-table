{"Man page": "<pre><br><span class=\"headline\">UTIMENSAT(2)              Linux Programmer's Manual             UTIMENSAT(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       utimensat,  futimens  - change file timestamps with nanosecond preci&#8208;<br>       sion<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;fcntl.h&gt; /* Definition of AT_* constants */</b><br>       <b>#include &lt;sys/stat.h&gt;</b><br><br>       <b>int utimensat(int </b><i>dirfd</i><b>, const char *</b><i>pathname</i><b>,</b><br>                     <b>const struct timespec </b><i>times</i><b>[2], int </b><i>flags</i><b>);</b><br><br>       <b>int futimens(int </b><i>fd</i><b>, const struct timespec </b><i>times</i><b>[2]);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>utimensat</b>():<br>           Since glibc 2.10:<br>               _XOPEN_SOURCE &gt;= 700 || _POSIX_C_SOURCE &gt;= 200809L<br>           Before glibc 2.10:<br>               _ATFILE_SOURCE<br>       <b>futimens</b>():<br>           Since glibc 2.10:<br>                  _XOPEN_SOURCE &gt;= 700 || _POSIX_C_SOURCE &gt;= 200809L<br>           Before glibc 2.10:<br>                  _GNU_SOURCE<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>utimensat</b>() and <b>futimens</b>() update the timestamps of a file with<br>       nanosecond precision.  This contrasts with the historical utime(2)<br>       and utimes(2), which permit only second and microsecond precision,<br>       respectively, when setting file timestamps.<br><br>       With <b>utimensat</b>() the file is specified via the pathname given in<br>       <i>pathname</i>.  With <b>futimens</b>() the file whose timestamps are to be<br>       updated is specified via an open file descriptor, <i>fd</i>.<br><br>       For both calls, the new file timestamps are specified in the array<br>       <i>times</i>: <i>times</i>[0] specifies the new \"last access time\" (<i>atime</i>);<br>       <i>times</i>[1] specifies the new \"last modification time\" (<i>mtime</i>).  Each of<br>       the elements of <i>times</i> specifies a time as the number of seconds and<br>       nanoseconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC).  This<br>       information is conveyed in a structure of the following form:<br><br>           struct timespec {<br>               time_t tv_sec;        /* seconds */<br>               long   tv_nsec;       /* nanoseconds */<br>           };<br><br>       Updated file timestamps are set to the greatest value supported by<br>       the filesystem that is not greater than the specified time.<br><br>       If the <i>tv_nsec</i> field of one of the <i>timespec</i> structures has the<br>       special value <b>UTIME_NOW</b>, then the corresponding file timestamp is set<br>       to the current time.  If the <i>tv_nsec</i> field of one of the <i>timespec</i><br>       structures has the special value <b>UTIME_OMIT</b>, then the corresponding<br>       file timestamp is left unchanged.  In both of these cases, the value<br>       of the corresponding <i>tv_sec</i> field is ignored.<br><br>       If <i>times</i> is NULL, then both timestamps are set to the current time.<br><br>   <b>Permissions requirements</b><br>       To set both file timestamps to the current time (i.e., <i>times</i> is NULL,<br>       or both <i>tv_nsec</i> fields specify <b>UTIME_NOW</b>), either:<br><br>       1. the caller must have write access to the file;<br><br>       2. the caller's effective user ID must match the owner of the file;<br>          or<br><br>       3. the caller must have appropriate privileges.<br><br>       To make any change other than setting both timestamps to the current<br>       time (i.e., <i>times</i> is not NULL, and neither <i>tv_nsec</i> field is <b>UTIME_NOW</b><br>       and neither <i>tv_nsec</i> field is <b>UTIME_OMIT</b>), either condition 2 or 3<br>       above must apply.<br><br>       If both <i>tv_nsec</i> fields are specified as <b>UTIME_OMIT</b>, then no file<br>       ownership or permission checks are performed, and the file timestamps<br>       are not modified, but other error conditions may still be detected.<br><br>   <b>utimensat() specifics</b><br>       If <i>pathname</i> is relative, then by default it is interpreted relative<br>       to the directory referred to by the open file descriptor, <i>dirfd</i><br>       (rather than relative to the current working directory of the calling<br>       process, as is done by utimes(2) for a relative pathname).  See<br>       openat(2) for an explanation of why this can be useful.<br><br>       If <i>pathname</i> is relative and <i>dirfd</i> is the special value <b>AT_FDCWD</b>, then<br>       <i>pathname</i> is interpreted relative to the current working directory of<br>       the calling process (like utimes(2)).<br><br>       If <i>pathname</i> is absolute, then <i>dirfd</i> is ignored.<br><br>       The <i>flags</i> field is a bit mask that may be 0, or include the following<br>       constant, defined in <i>&lt;fcntl.h&gt;</i>:<br><br>       <b>AT_SYMLINK_NOFOLLOW</b><br>              If <i>pathname</i> specifies a symbolic link, then update the<br>              timestamps of the link, rather than the file to which it<br>              refers.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>utimensat</b>() and <b>futimens</b>() return 0.  On error, -1 is<br>       returned and <i>errno</i> is set to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EACCES </b><i>times</i> is NULL, or both <i>tv_nsec</i> values are <b>UTIME_NOW</b>, and:<br>              * the effective user ID of the caller does not match the owner<br>                of the file, the caller does not have write access to the<br>                file, and the caller is not privileged (Linux: does not have<br>                either the <b>CAP_FOWNER </b>or the <b>CAP_DAC_OVERRIDE </b>capability);<br>                or,<br>              * the file is marked immutable (see chattr(1)).<br><br>       <b>EBADF  </b>(<b>futimens</b>()) <i>fd</i> is not a valid file descriptor.<br><br>       <b>EBADF  </b>(<b>utimensat</b>()) <i>pathname</i> is a relative pathname, but <i>dirfd</i> is<br>              neither <b>AT_FDCWD </b>nor a valid file descriptor.<br><br>       <b>EFAULT </b><i>times</i> pointed to an invalid address; or, <i>dirfd</i> was <b>AT_FDCWD</b>,<br>              and <i>pathname</i> is NULL or an invalid address.<br><br>       <b>EINVAL </b>Invalid value in <i>flags</i>.<br><br>       <b>EINVAL </b>Invalid value in one of the <i>tv_nsec</i> fields (value outside<br>              range 0 to 999,999,999, and not <b>UTIME_NOW </b>or <b>UTIME_OMIT</b>); or<br>              an invalid value in one of the <i>tv_sec</i> fields.<br><br>       <b>EINVAL </b><i>pathname</i> is NULL, <i>dirfd</i> is not <b>AT_FDCWD</b>, and <i>flags</i> contains<br>              <b>AT_SYMLINK_NOFOLLOW</b>.<br><br>       <b>ELOOP  </b>(<b>utimensat</b>()) Too many symbolic links were encountered in<br>              resolving <i>pathname</i>.<br><br>       <b>ENAMETOOLONG</b><br>              (<b>utimensat</b>()) <i>pathname</i> is too long.<br><br>       <b>ENOENT </b>(<b>utimensat</b>()) A component of <i>pathname</i> does not refer to an<br>              existing directory or file, or <i>pathname</i> is an empty string.<br><br>       <b>ENOTDIR</b><br>              (<b>utimensat</b>()) <i>pathname</i> is a relative pathname, but <i>dirfd</i> is<br>              neither <b>AT_FDCWD </b>nor a file descriptor referring to a<br>              directory; or, one of the prefix components of <i>pathname</i> is not<br>              a directory.<br><br>       <b>EPERM  </b>The caller attempted to change one or both timestamps to a<br>              value other than the current time, or to change one of the<br>              timestamps to the current time while leaving the other<br>              timestamp unchanged, (i.e., <i>times</i> is not NULL, neither <i>tv_nsec</i><br>              field is <b>UTIME_NOW</b>, and neither <i>tv_nsec</i> field is <b>UTIME_OMIT</b>)<br>              and:<br>              * the caller's effective user ID does not match the owner of<br>                file, and the caller is not privileged (Linux: does not have<br>                the <b>CAP_FOWNER </b>capability); or,<br>              * the file is marked append-only or immutable (see chattr(1)).<br><br>       <b>EROFS  </b>The file is on a read-only filesystem.<br><br>       <b>ESRCH  </b>(<b>utimensat</b>()) Search permission is denied for one of the<br>              prefix components of <i>pathname</i>.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>utimensat</b>() was added to Linux in kernel 2.6.22; glibc support was<br>       added with version 2.6.<br><br>       Support for <b>futimens</b>() first appeared in glibc 2.6.<br></pre><br><h2>ATTRIBUTES  </h2><pre><br>       For an explanation of the terms used in this section, see<br>       attributes(7).<br><br>       &#9484;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9488;<br>       &#9474;<b>Interface               </b>&#9474; <b>Attribute     </b>&#9474; <b>Value   </b>&#9474;<br>       &#9500;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9532;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9532;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9508;<br>       &#9474;<b>utimensat</b>(), <b>futimens</b>() &#9474; Thread safety &#9474; MT-Safe &#9474;<br>       &#9492;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9496;<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>futimens</b>() and <b>utimensat</b>() are specified in POSIX.1-2008.<br></pre><br><h2>NOTES  </h2><pre><br>       <b>utimensat</b>() obsoletes futimesat(2).<br><br>       On Linux, timestamps cannot be changed for a file marked immutable,<br>       and the only change permitted for files marked append-only is to set<br>       the timestamps to the current time.  (This is consistent with the<br>       historical behavior of utime(2) and utimes(2) on Linux.)<br><br>       On Linux, <b>futimens</b>() is a library function implemented on top of the<br>       <b>utimensat</b>() system call.  To support this, the Linux <b>utimensat</b>()<br>       system call implements a nonstandard feature: if <i>pathname</i> is NULL,<br>       then the call modifies the timestamps of the file referred to by the<br>       file descriptor <i>dirfd</i> (which may refer to any type of file).  Using<br>       this feature, the call <i>futimens(fd, times)</i> is implemented as:<br><br>           utimensat(fd, NULL, times, 0);<br><br>       If both <i>tv_nsec</i> fields are specified as <b>UTIME_OMIT</b>, then the Linux<br>       implementation of <b>utimensat</b>() succeeds even if the file referred to<br>       by <i>dirfd</i> and <i>pathname</i> does not exist.<br></pre><br><h2>BUGS  </h2><pre><br>       Several bugs afflict <b>utimensat</b>() and <b>futimens</b>() on kernels before<br>       2.6.26.  These bugs are either nonconformances with the POSIX.1 draft<br>       specification or inconsistencies with historical Linux behavior.<br><br>       * POSIX.1 specifies that if one of the <i>tv_nsec</i> fields has the value<br>         <b>UTIME_NOW </b>or <b>UTIME_OMIT</b>, then the value of the corresponding <i>tv_sec</i><br>         field should be ignored.  Instead, the value of the <i>tv_sec</i> field is<br>         required to be 0 (or the error <b>EINVAL </b>results).<br><br>       * Various bugs mean that for the purposes of permission checking, the<br>         case where both <i>tv_nsec</i> fields are set to <b>UTIME_NOW </b>isn't always<br>         treated the same as specifying <i>times</i> as NULL, and the case where<br>         one <i>tv_nsec</i> value is <b>UTIME_NOW </b>and the other is <b>UTIME_OMIT </b>isn't<br>         treated the same as specifying <i>times</i> as a pointer to an array of<br>         structures containing arbitrary time values.  As a result, in some<br>         cases: a) file timestamps can be updated by a process that<br>         shouldn't have permission to perform updates; b) file timestamps<br>         can't be updated by a process that should have permission to<br>         perform updates; and c) the wrong <i>errno</i> value is returned in case<br>         of an error.<br><br>       * POSIX.1 says that a process that has <i>write access to the file</i> can<br>         make a call with <i>times</i> as NULL, or with <i>times</i> pointing to an array<br>         of structures in which both <i>tv_nsec</i> fields are <b>UTIME_NOW</b>, in order<br>         to update both timestamps to the current time.  However, <b>futimens</b>()<br>         instead checks whether the <i>access mode of the file descriptor</i><br>         <i>allows writing</i>.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       chattr(1), futimesat(2), openat(2), stat(2), utimes(2), futimes(3),<br>       path_resolution(7), symlink(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                     UTIMENSAT(2)</span><br></pre><br>"}