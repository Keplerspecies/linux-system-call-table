{"Man page": "<pre><br><span class=\"headline\">SETPGID(2)                Linux Programmer's Manual               SETPGID(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       setpgid, getpgid, setpgrp, getpgrp - set/get process group<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int setpgid(pid_t </b><i>pid</i><b>, pid_t </b><i>pgid</i><b>);</b><br>       <b>pid_t getpgid(pid_t </b><i>pid</i><b>);</b><br><br>       <b>pid_t getpgrp(void);                 </b>/* POSIX.1 version */<br>       <b>pid_t getpgrp(pid_t </b><i>pid</i><b>);            </b>/* BSD version */<br><br>       <b>int setpgrp(void);                   </b>/* System V version */<br>       <b>int setpgrp(pid_t </b><i>pid</i><b>, pid_t </b><i>pgid</i><b>);  </b>/* BSD version */<br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>getpgid</b>():<br>           _XOPEN_SOURCE &gt;= 500 || _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED<br>           || /* Since glibc 2.12: */ _POSIX_C_SOURCE &gt;= 200809L<br><br>       <b>setpgrp</b>() (POSIX.1):<br>           _SVID_SOURCE || _XOPEN_SOURCE &gt;= 500 ||<br>           _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED<br>           || /* Since glibc 2.19: */ _BSD_SOURCE<br><br>       <b>setpgrp</b>() (BSD), <b>getpgrp</b>() (BSD) [before glibc 2.19]:<br>           _BSD_SOURCE &amp;&amp;<br>               ! (_POSIX_SOURCE || _POSIX_C_SOURCE || _XOPEN_SOURCE ||<br>                  _XOPEN_SOURCE_EXTENDED || _GNU_SOURCE || _SVID_SOURCE)<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       All of these interfaces are available on Linux, and are used for<br>       getting and setting the process group ID (PGID) of a process.  The<br>       preferred, POSIX.1-specified ways of doing this are: <b>getpgrp</b>(void),<br>       for retrieving the calling process's PGID; and <b>setpgid</b>(), for setting<br>       a process's PGID.<br><br>       <b>setpgid</b>() sets the PGID of the process specified by <i>pid</i> to <i>pgid</i>.  If<br>       <i>pid</i> is zero, then the process ID of the calling process is used.  If<br>       <i>pgid</i> is zero, then the PGID of the process specified by <i>pid</i> is made<br>       the same as its process ID.  If <b>setpgid</b>() is used to move a process<br>       from one process group to another (as is done by some shells when<br>       creating pipelines), both process groups must be part of the same<br>       session (see setsid(2) and credentials(7)).  In this case, the <i>pgid</i><br>       specifies an existing process group to be joined and the session ID<br>       of that group must match the session ID of the joining process.<br><br>       The POSIX.1 version of <b>getpgrp</b>(), which takes no arguments, returns<br>       the PGID of the calling process.<br><br>       <b>getpgid</b>() returns the PGID of the process specified by <i>pid</i>.  If <i>pid</i><br>       is zero, the process ID of the calling process is used.  (Retrieving<br>       the PGID of a process other than the caller is rarely necessary, and<br>       the POSIX.1 <b>getpgrp</b>() is preferred for that task.)<br><br>       The System V-style <b>setpgrp</b>(), which takes no arguments, is equivalent<br>       to <i>setpgid(0, 0)</i>.<br><br>       The BSD-specific <b>setpgrp</b>() call, which takes arguments <i>pid</i> and <i>pgid</i>,<br>       is a wrapper function that calls<br><br>           setpgid(pid, pgid)<br><br>       Since glibc 2.19, the BSD-specific <b>setpgrp</b>() function is no longer<br>       exposed by <i>&lt;unistd.h&gt;</i>; calls should be replaced with the <b>setpgid</b>()<br>       call shown above.<br><br>       The BSD-specific <b>getpgrp</b>() call, which takes a single <i>pid</i> argument,<br>       is a wrapper function that calls<br><br>           getpgid(pid)<br><br>       Since glibc 2.19, the BSD-specific <b>getpgrp</b>() function is no longer<br>       exposed by <i>&lt;unistd.h&gt;</i>; calls should be replaced with calls to the<br>       POSIX.1 <b>getpgrp</b>() which takes no arguments (if the intent is to<br>       obtain the caller's PGID), or with the <b>getpgid</b>() call shown above.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>setpgid</b>() and <b>setpgrp</b>() return zero.  On error, -1 is<br>       returned, and <i>errno</i> is set appropriately.<br><br>       The POSIX.1 <b>getpgrp</b>() always returns the PGID of the caller.<br><br>       <b>getpgid</b>(), and the BSD-specific <b>getpgrp</b>() return a process group on<br>       success.  On error, -1 is returned, and <i>errno</i> is set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EACCES </b>An attempt was made to change the process group ID of one of<br>              the children of the calling process and the child had already<br>              performed an execve(2) (<b>setpgid</b>(), <b>setpgrp</b>()).<br><br>       <b>EINVAL </b><i>pgid</i> is less than 0 (<b>setpgid</b>(), <b>setpgrp</b>()).<br><br>       <b>EPERM  </b>An attempt was made to move a process into a process group in<br>              a different session, or to change the process group ID of one<br>              of the children of the calling process and the child was in a<br>              different session, or to change the process group ID of a<br>              session leader (<b>setpgid</b>(), <b>setpgrp</b>()).<br><br>       <b>ESRCH  </b>For <b>getpgid</b>(): <i>pid</i> does not match any process.  For <b>setpgid</b>():<br>              <i>pid</i> is not the calling process and not a child of the calling<br>              process.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>setpgid</b>() and the version of <b>getpgrp</b>() with no arguments conform to<br>       POSIX.1-2001.<br><br>       POSIX.1-2001 also specifies <b>getpgid</b>() and the version of <b>setpgrp</b>()<br>       that takes no arguments.  (POSIX.1-2008 marks this <b>setpgrp</b>()<br>       specification as obsolete.)<br><br>       The version of <b>getpgrp</b>() with one argument and the version of<br>       <b>setpgrp</b>() that takes two arguments derive from 4.2BSD, and are not<br>       specified by POSIX.1.<br></pre><br><h2>NOTES  </h2><pre><br>       A child created via fork(2) inherits its parent's process group ID.<br>       The PGID is preserved across an execve(2).<br><br>       Each process group is a member of a session and each process is a<br>       member of the session of which its process group is a member.<br><br>       A session can have a controlling terminal.  At any time, one (and<br>       only one) of the process groups in the session can be the foreground<br>       process group for the terminal; the remaining process groups are in<br>       the background.  If a signal is generated from the terminal (e.g.,<br>       typing the interrupt key to generate <b>SIGINT</b>), that signal is sent to<br>       the foreground process group.  (See termios(3) for a description of<br>       the characters that generate signals.)  Only the foreground process<br>       group may read(2) from the terminal; if a background process group<br>       tries to read(2) from the terminal, then the group is sent a <b>SIGTTIN</b><br>       signal, which suspends it.  The tcgetpgrp(3) and tcsetpgrp(3)<br>       functions are used to get/set the foreground process group of the<br>       controlling terminal.<br><br>       The <b>setpgid</b>() and <b>getpgrp</b>() calls are used by programs such as<br>       bash(1) to create process groups in order to implement shell job<br>       control.<br><br>       If a session has a controlling terminal, and the <b>CLOCAL </b>flag for that<br>       terminal is not set, and a terminal hangup occurs, then the session<br>       leader is sent a <b>SIGHUP</b>.  If the session leader exits, then a <b>SIGHUP</b><br>       signal will also be sent to each process in the foreground process<br>       group of the controlling terminal.<br><br>       If the exit of the process causes a process group to become orphaned,<br>       and if any member of the newly orphaned process group is stopped,<br>       then a <b>SIGHUP </b>signal followed by a <b>SIGCONT </b>signal will be sent to<br>       each process in the newly orphaned process group.  An orphaned<br>       process group is one in which the parent of every member of process<br>       group is either itself also a member of the process group or is a<br>       member of a process group in a different session (see also<br>       credentials(7)).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       getuid(2), setsid(2), tcgetpgrp(3), tcsetpgrp(3), termios(3),<br>       credentials(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2014-01-07                       SETPGID(2)</span><br></pre><br>"}