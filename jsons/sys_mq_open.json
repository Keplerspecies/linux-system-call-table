{"Man page": "<pre><br><span class=\"headline\">MQ_OPEN(3)                Linux Programmer's Manual               MQ_OPEN(3)</span><br></pre><br><h2>NAME  </h2><pre><br>       mq_open - open a message queue<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;fcntl.h&gt;           </b>/* For O_* constants */<br>       <b>#include &lt;sys/stat.h&gt;        </b>/* For mode constants */<br>       <b>#include &lt;mqueue.h&gt;</b><br><br>       <b>mqd_t mq_open(const char *</b><i>name</i><b>, int </b><i>oflag</i><b>);</b><br>       <b>mqd_t mq_open(const char *</b><i>name</i><b>, int </b><i>oflag</i><b>, mode_t </b><i>mode</i><b>,</b><br>                     <b>struct mq_attr *</b><i>attr</i><b>);</b><br><br>       Link with <i>-lrt</i>.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>mq_open</b>() creates a new POSIX message queue or opens an existing<br>       queue.  The queue is identified by <i>name</i>.  For details of the<br>       construction of <i>name</i>, see mq_overview(7).<br><br>       The <i>oflag</i> argument specifies flags that control the operation of the<br>       call.  (Definitions of the flags values can be obtained by including<br>       <i>&lt;fcntl.h&gt;</i>.)  Exactly one of the following must be specified in <i>oflag</i>:<br><br>       <b>O_RDONLY</b><br>              Open the queue to receive messages only.<br><br>       <b>O_WRONLY</b><br>              Open the queue to send messages only.<br><br>       <b>O_RDWR </b>Open the queue to both send and receive messages.<br><br>       Zero or more of the following flags can additionally be <i>OR</i>ed in<br>       <i>oflag</i>:<br><br>       <b>O_CLOEXEC </b>(since Linux 2.6.26)<br>              Set the close-on-exec flag for the message queue descriptor.<br>              See open(2) for a discussion of why this flag is useful.<br><br>       <b>O_CREAT</b><br>              Create the message queue if it does not exist.  The owner<br>              (user ID) of the message queue is set to the effective user ID<br>              of the calling process.  The group ownership (group ID) is set<br>              to the effective group ID of the calling process.<br><br>       <b>O_EXCL </b>If <b>O_CREAT </b>was specified in <i>oflag</i>, and a queue with the given<br>              <i>name</i> already exists, then fail with the error <b>EEXIST</b>.<br><br>       <b>O_NONBLOCK</b><br>              Open the queue in nonblocking mode.  In circumstances where<br>              mq_receive(3) and mq_send(3) would normally block, these<br>              functions instead fail with the error <b>EAGAIN</b>.<br><br>       If <b>O_CREAT </b>is specified in <i>oflag</i>, then two additional arguments must<br>       be supplied.  The <i>mode</i> argument specifies the permissions to be<br>       placed on the new queue, as for open(2).  (Symbolic definitions for<br>       the permissions bits can be obtained by including <i>&lt;sys/stat.h&gt;</i>.)  The<br>       permissions settings are masked against the process umask.<br><br>       The <i>attr</i> argument specifies attributes for the queue.  See<br>       mq_getattr(3) for details.  If <i>attr</i> is NULL, then the queue is<br>       created with implementation-defined default attributes.  Since Linux<br>       3.5, two <i>/proc</i> files can be used to control these defaults; see<br>       mq_overview(7) for details.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>mq_open</b>() returns a message queue descriptor for use by<br>       other message queue functions.  On error, <b>mq_open</b>() returns<br>       <i>(mqd_t) -1</i>, with <i>errno</i> set to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EACCES </b>The queue exists, but the caller does not have permission to<br>              open it in the specified mode.<br><br>       <b>EACCES </b><i>name</i> contained more than one slash.<br><br>       <b>EEXIST </b>Both <b>O_CREAT </b>and <b>O_EXCL </b>were specified in <i>oflag</i>, but a queue<br>              with this <i>name</i> already exists.<br><br>       <b>EINVAL </b><i>name</i> doesn't follow the format in mq_overview(7).<br><br>       <b>EINVAL O_CREAT </b>was specified in <i>oflag</i>, and <i>attr</i> was not NULL, but<br>              <i>attr-&gt;mq_maxmsg</i> or <i>attr-&gt;mq_msqsize</i> was invalid.  Both of<br>              these fields must be greater than zero.  In a process that is<br>              unprivileged (does not have the <b>CAP_SYS_RESOURCE </b>capability),<br>              <i>attr-&gt;mq_maxmsg</i> must be less than or equal to the <i>msg_max</i><br>              limit, and <i>attr-&gt;mq_msgsize</i> must be less than or equal to the<br>              <i>msgsize_max</i> limit.  In addition, even in a privileged process,<br>              <i>attr-&gt;mq_maxmsg</i> cannot exceed the <b>HARD_MAX </b>limit.  (See<br>              mq_overview(7) for details of these limits.)<br><br>       <b>EMFILE </b>The process already has the maximum number of files and<br>              message queues open.<br><br>       <b>ENAMETOOLONG</b><br>              <i>name</i> was too long.<br><br>       <b>ENFILE </b>The system limit on the total number of open files and message<br>              queues has been reached.<br><br>       <b>ENOENT </b>The <b>O_CREAT </b>flag was not specified in <i>oflag</i>, and no queue with<br>              this <i>name</i> exists.<br><br>       <b>ENOENT </b><i>name</i> was just \"/\" followed by no other characters.<br><br>       <b>ENOMEM </b>Insufficient memory.<br><br>       <b>ENOSPC </b>Insufficient space for the creation of a new message queue.<br>              This probably occurred because the <i>queues_max</i> limit was<br>              encountered; see mq_overview(7).<br></pre><br><h2>ATTRIBUTES  </h2><pre><br>       For an explanation of the terms used in this section, see<br>       attributes(7).<br><br>       &#9484;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9488;<br>       &#9474;<b>Interface </b>&#9474; <b>Attribute     </b>&#9474; <b>Value   </b>&#9474;<br>       &#9500;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9532;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9532;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9508;<br>       &#9474;<b>mq_open</b>() &#9474; Thread safety &#9474; MT-Safe &#9474;<br>       &#9492;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9496;<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008.<br></pre><br><h2>NOTES  </h2><pre><br>   <b>C library/kernel differences</b><br>       The <b>mq_open</b>() library function is implemented on top of a system call<br>       of the same name.  The library function performs the check that the<br>       <i>name</i> starts with a slash (/), giving the <b>EINVAL </b>error if it does not.<br>       The kernel system call expects <i>name</i> to contain no preceding slash, so<br>       the C library function passes <i>name</i> without the preceding slash (i.e.,<br>       <i>name+1</i>) to the system call.<br></pre><br><h2>BUGS  </h2><pre><br>       In kernels before 2.6.14, the process umask was not applied to the<br>       permissions specified in <i>mode</i>.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       mq_close(3), mq_getattr(3), mq_notify(3), mq_receive(3), mq_send(3),<br>       mq_unlink(3), mq_overview(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                       MQ_OPEN(3)</span><br></pre><br>"}