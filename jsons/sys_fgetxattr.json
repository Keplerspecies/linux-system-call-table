{"Man page": "<pre><br><span class=\"headline\">GETXATTR(2)               Linux Programmer's Manual              GETXATTR(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       getxattr, lgetxattr, fgetxattr - retrieve an extended attribute value<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;sys/xattr.h&gt;</b><br><br>       <b>ssize_t getxattr(const char *</b><i>path</i><b>, const char *</b><i>name</i><b>,</b><br>                        <b>void *</b><i>value</i><b>, size_t </b><i>size</i><b>);</b><br>       <b>ssize_t lgetxattr(const char *</b><i>path</i><b>, const char *</b><i>name</i><b>,</b><br>                        <b>void *</b><i>value</i><b>, size_t </b><i>size</i><b>);</b><br>       <b>ssize_t fgetxattr(int </b><i>fd</i><b>, const char *</b><i>name</i><b>,</b><br>                        <b>void *</b><i>value</i><b>, size_t </b><i>size</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       Extended attributes are <i>name</i>:<i>value</i> pairs associated with inodes<br>       (files, directories, symbolic links, etc.).  They are extensions to<br>       the normal attributes which are associated with all inodes in the<br>       system (i.e., the stat(2) data).  A complete overview of extended<br>       attributes concepts can be found in xattr(7).<br><br>       <b>getxattr</b>() retrieves the value of the extended attribute identified<br>       by <i>name</i> and associated with the given <i>path</i> in the filesystem.  The<br>       attribute value is placed in the buffer pointed to by <i>value</i>; <i>size</i><br>       specifies the size of that buffer.  The return value of the call is<br>       the number of bytes placed in <i>value</i>.<br><br>       <b>lgetxattr</b>() is identical to <b>getxattr</b>(), except in the case of a<br>       symbolic link, where the link itself is interrogated, not the file<br>       that it refers to.<br><br>       <b>fgetxattr</b>() is identical to <b>getxattr</b>(), only the open file referred<br>       to by <i>fd</i> (as returned by open(2)) is interrogated in place of <i>path</i>.<br><br>       An extended attribute <i>name</i> is a null-terminated string.  The name<br>       includes a namespace prefix; there may be several, disjoint<br>       namespaces associated with an individual inode.  The value of an<br>       extended attribute is a chunk of arbitrary textual or binary data<br>       that was assigned using setxattr(2).<br><br>       If <i>size</i> is specified as zero, these calls return the current size of<br>       the named extended attribute (and leave <i>value</i> unchanged).  This can<br>       be used to determine the size of the buffer that should be supplied<br>       in a subsequent call.  (But, bear in mind that there is a possibility<br>       that the attribute value may change between the two calls, so that it<br>       is still necessary to check the return status from the second call.)<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, these calls return a nonnegative value which is the size<br>       (in bytes) of the extended attribute value.  On failure, -1 is<br>       returned and <i>errno</i> is set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>ENOATTR</b><br>              The named attribute does not exist, or the process has no<br>              access to this attribute.  (<b>ENOATTR </b>is defined to be a synonym<br>              for <b>ENODATA </b>in <i>&lt;attr/xattr.h&gt;</i>.)<br><br>       <b>ENOTSUP</b><br>              Extended attributes are not supported by the filesystem, or<br>              are disabled.<br><br>       <b>ERANGE </b>The <i>size</i> of the <i>value</i> buffer is too small to hold the result.<br><br>       In addition, the errors documented in stat(2) can also occur.<br></pre><br><h2>VERSIONS  </h2><pre><br>       These system calls have been available on Linux since kernel 2.4;<br>       glibc support is provided since version 2.3.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       These system calls are Linux-specific.<br></pre><br><h2>EXAMPLE  </h2><pre><br>       See listxattr(2).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       getfattr(1), setfattr(1), listxattr(2), open(2), removexattr(2),<br>       setxattr(2), stat(2), symlink(7), xattr(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-05-07                      GETXATTR(2)</span><br></pre><br>"}