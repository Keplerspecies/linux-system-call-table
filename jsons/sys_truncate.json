{"Man page": "<pre><br><span class=\"headline\">TRUNCATE(2)               Linux Programmer's Manual              TRUNCATE(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       truncate, ftruncate - truncate a file to a specified length<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br>       <b>#include &lt;sys/types.h&gt;</b><br><br>       <b>int truncate(const char *</b><i>path</i><b>, off_t </b><i>length</i><b>);</b><br>       <b>int ftruncate(int </b><i>fd</i><b>, off_t </b><i>length</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>truncate</b>():<br>           _BSD_SOURCE || _XOPEN_SOURCE &gt;= 500 ||<br>           _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED<br>           || /* Since glibc 2.12: */ _POSIX_C_SOURCE &gt;= 200809L<br><br>       <b>ftruncate</b>():<br>           _BSD_SOURCE || _XOPEN_SOURCE &gt;= 500 ||<br>           _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED<br>           || /* Since glibc 2.3.5: */ _POSIX_C_SOURCE &gt;= 200112L<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>truncate</b>() and <b>ftruncate</b>() functions cause the regular file named<br>       by <i>path</i> or referenced by <i>fd</i> to be truncated to a size of precisely<br>       <i>length</i> bytes.<br><br>       If the file previously was larger than this size, the extra data is<br>       lost.  If the file previously was shorter, it is extended, and the<br>       extended part reads as null bytes ('\\0').<br><br>       The file offset is not changed.<br><br>       If the size changed, then the st_ctime and st_mtime fields<br>       (respectively, time of last status change and time of last<br>       modification; see stat(2)) for the file are updated, and the set-<br>       user-ID and set-group-ID mode bits may be cleared.<br><br>       With <b>ftruncate</b>(), the file must be open for writing; with <b>truncate</b>(),<br>       the file must be writable.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       For <b>truncate</b>():<br><br>       <b>EACCES </b>Search permission is denied for a component of the path<br>              prefix, or the named file is not writable by the user.  (See<br>              also path_resolution(7).)<br><br>       <b>EFAULT </b>The argument <i>path</i> points outside the process's allocated<br>              address space.<br><br>       <b>EFBIG  </b>The argument <i>length</i> is larger than the maximum file size.<br>              (XSI)<br><br>       <b>EINTR  </b>While blocked waiting to complete, the call was interrupted by<br>              a signal handler; see fcntl(2) and signal(7).<br><br>       <b>EINVAL </b>The argument <i>length</i> is negative or larger than the maximum<br>              file size.<br><br>       <b>EIO    </b>An I/O error occurred updating the inode.<br><br>       <b>EISDIR </b>The named file is a directory.<br><br>       <b>ELOOP  </b>Too many symbolic links were encountered in translating the<br>              pathname.<br><br>       <b>ENAMETOOLONG</b><br>              A component of a pathname exceeded 255 characters, or an<br>              entire pathname exceeded 1023 characters.<br><br>       <b>ENOENT </b>The named file does not exist.<br><br>       <b>ENOTDIR</b><br>              A component of the path prefix is not a directory.<br><br>       <b>EPERM  </b>The underlying filesystem does not support extending a file<br>              beyond its current size.<br><br>       <b>EPERM  </b>The operation was prevented by a file seal; see fcntl(2).<br><br>       <b>EROFS  </b>The named file resides on a read-only filesystem.<br><br>       <b>ETXTBSY</b><br>              The file is a pure procedure (shared text) file that is being<br>              executed.<br><br>       For <b>ftruncate</b>() the same errors apply, but instead of things that can<br>       be wrong with <i>path</i>, we now have things that can be wrong with the<br>       file descriptor, <i>fd</i>:<br><br>       <b>EBADF  </b><i>fd</i> is not a valid descriptor.<br><br>       <b>EBADF </b>or <b>EINVAL</b><br>              <i>fd</i> is not open for writing.<br><br>       <b>EINVAL </b><i>fd</i> does not reference a regular file.<br><br>       <b>EINVAL </b>or <b>EBADF</b><br>              The file descriptor <i>fd</i> is not open for writing.  POSIX<br>              permits, and portable applications should handle, either error<br>              for this case.  (Linux produces <b>EINVAL</b>.)<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, 4.4BSD, SVr4 (these calls first appeared<br>       in 4.2BSD).<br></pre><br><h2>NOTES  </h2><pre><br>       The details in DESCRIPTION are for XSI-compliant systems.  For non-<br>       XSI-compliant systems, the POSIX standard allows two behaviors for<br>       <b>ftruncate</b>() when <i>length</i> exceeds the file length (note that <b>truncate</b>()<br>       is not specified at all in such an environment): either returning an<br>       error, or extending the file.  Like most UNIX implementations, Linux<br>       follows the XSI requirement when dealing with native filesystems.<br>       However, some nonnative filesystems do not permit <b>truncate</b>() and<br>       <b>ftruncate</b>() to be used to extend a file beyond its current length: a<br>       notable example on Linux is VFAT.<br><br>       The original Linux <b>truncate</b>() and <b>ftruncate</b>() system calls were not<br>       designed to handle large file offsets.  Consequently, Linux 2.4 added<br>       <b>truncate64</b>() and <b>ftruncate64</b>() system calls that handle large files.<br>       However, these details can be ignored by applications using glibc,<br>       whose wrapper functions transparently employ the more recent system<br>       calls where they are available.<br><br>       On some 32-bit architectures, the calling signature for these system<br>       calls differ, for the reasons described in syscall(2).<br></pre><br><h2>BUGS  </h2><pre><br>       A header file bug in glibc 2.12 meant that the minimum value of<br>       <b>_POSIX_C_SOURCE </b>required to expose the declaration of <b>ftruncate</b>() was<br>       200809L instead of 200112L.  This has been fixed in later glibc<br>       versions.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       open(2), stat(2), path_resolution(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                      TRUNCATE(2)</span><br></pre><br>"}