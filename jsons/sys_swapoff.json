{"Man page": "<pre><br><span class=\"headline\">SWAPON(2)                 Linux Programmer's Manual                SWAPON(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       swapon, swapoff - start/stop swapping to file/device<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br>       <b>#include &lt;sys/swap.h&gt;</b><br><br>       <b>int swapon(const char *</b><i>path</i><b>, int </b><i>swapflags</i><b>);</b><br>       <b>int swapoff(const char *</b><i>path</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>swapon</b>() sets the swap area to the file or block device specified by<br>       <i>path</i>.  <b>swapoff</b>() stops swapping to the file or block device specified<br>       by <i>path</i>.<br><br>       If the <b>SWAP_FLAG_PREFER </b>flag is specified in the <b>swapon</b>() <i>swapflags</i><br>       argument, the new swap area will have a higher priority than default.<br>       The priority is encoded within <i>swapflags</i> as:<br><br>           <i>(prio &lt;&lt; SWAP_FLAG_PRIO_SHIFT) &amp; SWAP_FLAG_PRIO_MASK</i><br><br>       If the <b>SWAP_FLAG_DISCARD </b>flag is specified in the <b>swapon</b>() <i>swapflags</i><br>       argument, freed swap pages will be discarded before they are reused,<br>       if the swap device supports the discard or trim operation.  (This may<br>       improve performance on some Solid State Devices, but often it does<br>       not.)  See also NOTES.<br><br>       These functions may be used only by a privileged process (one having<br>       the <b>CAP_SYS_ADMIN </b>capability).<br><br>   <b>Priority</b><br>       Each swap area has a priority, either high or low.  The default<br>       priority is low.  Within the low-priority areas, newer areas are even<br>       lower priority than older areas.<br><br>       All priorities set with <i>swapflags</i> are high-priority, higher than<br>       default.  They may have any nonnegative value chosen by the caller.<br>       Higher numbers mean higher priority.<br><br>       Swap pages are allocated from areas in priority order, highest<br>       priority first.  For areas with different priorities, a higher-<br>       priority area is exhausted before using a lower-priority area.  If<br>       two or more areas have the same priority, and it is the highest<br>       priority available, pages are allocated on a round-robin basis<br>       between them.<br><br>       As of Linux 1.3.6, the kernel usually follows these rules, but there<br>       are exceptions.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBUSY  </b>(for <b>swapon</b>()) The specified <i>path</i> is already being used as a<br>              swap area.<br><br>       <b>EINVAL </b>The file <i>path</i> exists, but refers neither to a regular file nor<br>              to a block device;<br><br>       <b>EINVAL </b>(<b>swapon</b>()) The indicated path does not contain a valid swap<br>              signature or resides on an in-memory filesystem such as tmpfs.<br><br>       <b>EINVAL </b>(since Linux 3.4)<br>              (<b>swapon</b>()) An invalid flag value was specified in <i>flags</i>.<br><br>       <b>EINVAL </b>(<b>swapoff</b>()) <i>path</i> is not currently a swap area.<br><br>       <b>ENFILE </b>The system limit on the total number of open files has been<br>              reached.<br><br>       <b>ENOENT </b>The file <i>path</i> does not exist.<br><br>       <b>ENOMEM </b>The system has insufficient memory to start swapping.<br><br>       <b>EPERM  </b>The caller does not have the <b>CAP_SYS_ADMIN </b>capability.<br>              Alternatively, the maximum number of swap files are already in<br>              use; see NOTES below.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       These functions are Linux-specific and should not be used in programs<br>       intended to be portable.  The second <i>swapflags</i> argument was<br>       introduced in Linux 1.3.2.<br></pre><br><h2>NOTES  </h2><pre><br>       The partition or path must be prepared with mkswap(8).<br><br>       There is an upper limit on the number of swap files that may be used,<br>       defined by the kernel constant <b>MAX_SWAPFILES</b>.  Before kernel 2.4.10,<br>       <b>MAX_SWAPFILES </b>has the value 8; since kernel 2.4.10, it has the value<br>       32.  Since kernel 2.6.18, the limit is decreased by 2 (thus: 30) if<br>       the kernel is built with the <b>CONFIG_MIGRATION </b>option (which reserves<br>       two swap table entries for the page migration features of mbind(2)<br>       and migrate_pages(2)).  Since kernel 2.6.32, the limit is further<br>       decreased by 1 if the kernel is built with the <b>CONFIG_MEMORY_FAILURE</b><br>       option.<br><br>       Discard of swap pages was introduced in kernel 2.6.29, then made<br>       conditional on the <b>SWAP_FLAG_DISCARD </b>flag in kernel 2.6.36, which<br>       still discards the entire swap area when <b>swapon</b>() is called, even if<br>       that flag bit is not set.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       mkswap(8), swapoff(8), swapon(8)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2014-05-28                        SWAPON(2)</span><br></pre><br>"}