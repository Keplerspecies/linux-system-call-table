{"Man page": "<pre><br><span class=\"headline\">GETCPU(2)                 Linux Programmer's Manual                GETCPU(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       getcpu  -  determine CPU and NUMA node on which the calling thread is<br>       running<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;linux/getcpu.h&gt;</b><br><br>       <b>int getcpu(unsigned *</b><i>cpu</i><b>, unsigned *</b><i>node</i><b>, struct getcpu_cache *</b><i>tcache</i><b>);</b><br><br>       <i>Note</i>: There is no glibc wrapper for this system call; see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>getcpu</b>() system call identifies the processor and node on which<br>       the calling thread or process is currently running and writes them<br>       into the integers pointed to by the <i>cpu</i> and <i>node</i> arguments.  The<br>       processor is a unique small integer identifying a CPU.  The node is a<br>       unique small identifier identifying a NUMA node.  When either <i>cpu</i> or<br>       <i>node</i> is NULL nothing is written to the respective pointer.<br><br>       The third argument to this system call is nowadays unused, and should<br>       be specified as NULL unless portability to Linux 2.6.23 or earlier is<br>       required (see NOTES).<br><br>       The information placed in <i>cpu</i> is guaranteed to be current only at the<br>       time of the call: unless the CPU affinity has been fixed using<br>       sched_setaffinity(2), the kernel might change the CPU at any time.<br>       (Normally this does not happen because the scheduler tries to<br>       minimize movements between CPUs to keep caches hot, but it is<br>       possible.)  The caller must allow for the possibility that the<br>       information returned in <i>cpu</i> and <i>node</i> is no longer current by the time<br>       the call returns.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, 0 is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b>Arguments point outside the calling process's address space.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>getcpu</b>() was added in kernel 2.6.19 for x86_64 and i386.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>getcpu</b>() is Linux-specific.<br></pre><br><h2>NOTES  </h2><pre><br>       Linux makes a best effort to make this call as fast as possible.  The<br>       intention of <b>getcpu</b>() is to allow programs to make optimizations with<br>       per-CPU data or for NUMA optimization.<br><br>       Glibc does not provide a wrapper for this system call; call it using<br>       syscall(2); or use sched_getcpu(3) instead.<br><br>       The <i>tcache</i> argument is unused since Linux 2.6.24.  In earlier<br>       kernels, if this argument was non-NULL, then it specified a pointer<br>       to a caller-allocated buffer in thread-local storage that was used to<br>       provide a caching mechanism for <b>getcpu</b>().  Use of the cache could<br>       speed <b>getcpu</b>() calls, at the cost that there was a very small chance<br>       that the returned information would be out of date.  The caching<br>       mechanism was considered to cause problems when migrating threads<br>       between CPUs, and so the argument is now ignored.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       mbind(2), sched_setaffinity(2), set_mempolicy(2), sched_getcpu(3),<br>       cpuset(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2013-04-03                        GETCPU(2)</span><br></pre><br>"}