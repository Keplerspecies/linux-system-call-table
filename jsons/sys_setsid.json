{"Man page": "<pre><br><span class=\"headline\">SETSID(2)                 Linux Programmer's Manual                SETSID(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       setsid - creates a session and sets the process group ID<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>pid_t setsid(void);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>setsid</b>() creates a new session if the calling process is not a<br>       process group leader.  The calling process is the leader of the new<br>       session (i.e., its session ID is made the same as its process ID).<br>       The calling process also becomes the process group leader of a new<br>       process group in the session (i.e., its process group ID is made the<br>       same as it process ID).<br><br>       The calling process will be the only process in the new process group<br>       and in the new session.  The new session has no controlling terminal.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, the (new) session ID of the calling process is returned.<br>       On error, <i>(pid_t) -1</i> is returned, and <i>errno</i> is set to indicate the<br>       error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EPERM  </b>The process group ID of any process equals the PID of the<br>              calling process.  Thus, in particular, <b>setsid</b>() fails if the<br>              calling process is already a process group leader.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4.<br></pre><br><h2>NOTES  </h2><pre><br>       A child created via fork(2) inherits its parent's session ID.  The<br>       session ID is preserved across an execve(2).<br><br>       A process group leader is a process whose process group ID equals its<br>       PID.  Disallowing a process group leader from calling <b>setsid</b>()<br>       prevents the possibility that a process group leader places itself in<br>       a new session while other processes in the process group remain in<br>       the original session; such a scenario would break the strict two-<br>       level hierarchy of sessions and process groups.  In order to be sure<br>       that <b>setsid</b>() will succeed, fork(2) and _exit(2), and have the child<br>       do <b>setsid</b>().<br></pre><br><h2>SEE ALSO  </h2><pre><br>       setsid(1), getsid(2), setpgid(2), setpgrp(2), tcgetsid(3),<br>       credentials(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                        SETSID(2)</span><br></pre><br>"}