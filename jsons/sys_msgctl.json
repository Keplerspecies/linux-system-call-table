{"Man page": "<pre><br><span class=\"headline\">MSGCTL(2)                 Linux Programmer's Manual                MSGCTL(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       msgctl - System V message control operations<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;sys/ipc.h&gt;</b><br>       <b>#include &lt;sys/msg.h&gt;</b><br><br>       <b>int msgctl(int </b><i>msqid</i><b>, int </b><i>cmd</i><b>, struct msqid_ds *</b><i>buf</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>msgctl</b>() performs the control operation specified by <i>cmd</i> on the<br>       System V message queue with identifier <i>msqid</i>.<br><br>       The <i>msqid_ds</i> data structure is defined in <i>&lt;sys/msg.h&gt;</i> as follows:<br><br>           struct msqid_ds {<br>               struct ipc_perm msg_perm;     /* Ownership and permissions */<br>               time_t          msg_stime;    /* Time of last msgsnd(2) */<br>               time_t          msg_rtime;    /* Time of last msgrcv(2) */<br>               time_t          msg_ctime;    /* Time of last change */<br>               unsigned long   __msg_cbytes; /* Current number of bytes in<br>                                                queue (nonstandard) */<br>               msgqnum_t       msg_qnum;     /* Current number of messages<br>                                                in queue */<br>               msglen_t        msg_qbytes;   /* Maximum number of bytes<br>                                                allowed in queue */<br>               pid_t           msg_lspid;    /* PID of last msgsnd(2) */<br>               pid_t           msg_lrpid;    /* PID of last msgrcv(2) */<br>           };<br><br>       The <i>ipc_perm</i> structure is defined as follows (the highlighted fields<br>       are settable using <b>IPC_SET</b>):<br><br>           struct ipc_perm {<br>               key_t          __key;       /* Key supplied to msgget(2) */<br>               uid_t          <b>uid</b>;         /* Effective UID of owner */<br>               gid_t          <b>gid</b>;         /* Effective GID of owner */<br>               uid_t          cuid;        /* Effective UID of creator */<br>               gid_t          cgid;        /* Effective GID of creator */<br>               unsigned short <b>mode</b>;        /* Permissions */<br>               unsigned short __seq;       /* Sequence number */<br>           };<br><br>       Valid values for <i>cmd</i> are:<br><br>       <b>IPC_STAT</b><br>              Copy information from the kernel data structure associated<br>              with <i>msqid</i> into the <i>msqid_ds</i> structure pointed to by <i>buf</i>.  The<br>              caller must have read permission on the message queue.<br><br>       <b>IPC_SET</b><br>              Write the values of some members of the <i>msqid_ds</i> structure<br>              pointed to by <i>buf</i> to the kernel data structure associated with<br>              this message queue, updating also its <i>msg_ctime</i> member.  The<br>              following members of the structure are updated: <i>msg_qbytes</i>,<br>              <i>msg_perm.uid</i>, <i>msg_perm.gid</i>, and (the least significant 9 bits<br>              of) <i>msg_perm.mode</i>.  The effective UID of the calling process<br>              must match the owner (<i>msg_perm.uid</i>) or creator (<i>msg_perm.cuid</i>)<br>              of the message queue, or the caller must be privileged.<br>              Appropriate privilege (Linux: the <b>CAP_SYS_RESOURCE </b>capability)<br>              is required to raise the <i>msg_qbytes</i> value beyond the system<br>              parameter <b>MSGMNB</b>.<br><br>       <b>IPC_RMID</b><br>              Immediately remove the message queue, awakening all waiting<br>              reader and writer processes (with an error return and <i>errno</i><br>              set to <b>EIDRM</b>).  The calling process must have appropriate<br>              privileges or its effective user ID must be either that of the<br>              creator or owner of the message queue.  The third argument to<br>              <b>msgctl</b>() is ignored in this case.<br><br>       <b>IPC_INFO </b>(Linux-specific)<br>              Return information about system-wide message queue limits and<br>              parameters in the structure pointed to by <i>buf</i>.  This structure<br>              is of type <i>msginfo</i> (thus, a cast is required), defined in<br>              <i>&lt;sys/msg.h&gt;</i> if the <b>_GNU_SOURCE </b>feature test macro is defined:<br><br>                  struct msginfo {<br>                      int msgpool; /* Size in kibibytes of buffer pool<br>                                      used to hold message data;<br>                                      unused within kernel */<br>                      int msgmap;  /* Maximum number of entries in message<br>                                      map; unused within kernel */<br>                      int msgmax;  /* Maximum number of bytes that can be<br>                                      written in a single message */<br>                      int msgmnb;  /* Maximum number of bytes that can be<br>                                      written to queue; used to initialize<br>                                      msg_qbytes during queue creation<br>                                      (msgget(2)) */<br>                      int msgmni;  /* Maximum number of message queues */<br>                      int msgssz;  /* Message segment size;<br>                                      unused within kernel */<br>                      int msgtql;  /* Maximum number of messages on all queues<br>                                      in system; unused within kernel */<br>                      unsigned short int msgseg;<br>                                   /* Maximum number of segments;<br>                                      unused within kernel */<br>                  };<br><br>              The <i>msgmni</i>, <i>msgmax</i>, and <i>msgmnb</i> settings can be changed via<br>              <i>/proc</i> files of the same name; see proc(5) for details.<br><br>       <b>MSG_INFO </b>(Linux-specific)<br>              Return a <i>msginfo</i> structure containing the same information as<br>              for <b>IPC_INFO</b>, except that the following fields are returned<br>              with information about system resources consumed by message<br>              queues: the <i>msgpool</i> field returns the number of message queues<br>              that currently exist on the system; the <i>msgmap</i> field returns<br>              the total number of messages in all queues on the system; and<br>              the <i>msgtql</i> field returns the total number of bytes in all<br>              messages in all queues on the system.<br><br>       <b>MSG_STAT </b>(Linux-specific)<br>              Return a <i>msqid_ds</i> structure as for <b>IPC_STAT</b>.  However, the<br>              <i>msqid</i> argument is not a queue identifier, but instead an index<br>              into the kernel's internal array that maintains information<br>              about all message queues on the system.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>IPC_STAT</b>, <b>IPC_SET</b>, and <b>IPC_RMID </b>return 0.  A successful<br>       <b>IPC_INFO </b>or <b>MSG_INFO </b>operation returns the index of the highest used<br>       entry in the kernel's internal array recording information about all<br>       message queues.  (This information can be used with repeated <b>MSG_STAT</b><br>       operations to obtain information about all queues on the system.)  A<br>       successful <b>MSG_STAT </b>operation returns the identifier of the queue<br>       whose index was given in <i>msqid</i>.<br><br>       On error, -1 is returned with <i>errno</i> indicating the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       On failure, <i>errno</i> is set to one of the following:<br><br>       <b>EACCES </b>The argument <i>cmd</i> is equal to <b>IPC_STAT </b>or <b>MSG_STAT</b>, but the<br>              calling process does not have read permission on the message<br>              queue <i>msqid</i>, and does not have the <b>CAP_IPC_OWNER </b>capability.<br><br>       <b>EFAULT </b>The argument <i>cmd</i> has the value <b>IPC_SET </b>or <b>IPC_STAT</b>, but the<br>              address pointed to by <i>buf</i> isn't accessible.<br><br>       <b>EIDRM  </b>The message queue was removed.<br><br>       <b>EINVAL </b>Invalid value for <i>cmd</i> or <i>msqid</i>.  Or: for a <b>MSG_STAT </b>operation,<br>              the index value specified in <i>msqid</i> referred to an array slot<br>              that is currently unused.<br><br>       <b>EPERM  </b>The argument <i>cmd</i> has the value <b>IPC_SET </b>or <b>IPC_RMID</b>, but the<br>              effective user ID of the calling process is not the creator<br>              (as found in <i>msg_perm.cuid</i>) or the owner (as found in<br>              <i>msg_perm.uid</i>) of the message queue, and the caller is not<br>              privileged (Linux: does not have the <b>CAP_SYS_ADMIN</b><br>              capability).<br><br>       <b>EPERM  </b>An attempt (<b>IPC_SET</b>) was made to increase <i>msg_qbytes</i> beyond<br>              the system parameter <b>MSGMNB</b>, but the caller is not privileged<br>              (Linux: does not have the <b>CAP_SYS_RESOURCE </b>capability).<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4.<br></pre><br><h2>NOTES  </h2><pre><br>       The inclusion of <i>&lt;sys/types.h&gt;</i> and <i>&lt;sys/ipc.h&gt;</i> isn't required on<br>       Linux or by any version of POSIX.  However, some old implementations<br>       required the inclusion of these header files, and the SVID also<br>       documented their inclusion.  Applications intended to be portable to<br>       such old systems may need to include these header files.<br><br>       The <b>IPC_INFO</b>, <b>MSG_STAT </b>and <b>MSG_INFO </b>operations are used by the<br>       ipcs(1) program to provide information on allocated resources.  In<br>       the future these may modified or moved to a <i>/proc</i> filesystem<br>       interface.<br><br>       Various fields in the <i>struct msqid_ds</i> were typed as <i>short</i> under Linux<br>       2.2 and have become <i>long</i> under Linux 2.4.  To take advantage of this,<br>       a recompilation under glibc-2.1.91 or later should suffice.  (The<br>       kernel distinguishes old and new calls by an <b>IPC_64 </b>flag in <i>cmd</i>.)<br></pre><br><h2>SEE ALSO  </h2><pre><br>       msgget(2), msgrcv(2), msgsnd(2), capabilities(7), mq_overview(7),<br>       svipc(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                        MSGCTL(2)</span><br></pre><br>"}