{"Man page": "<pre><br><span class=\"headline\">UNAME(2)                  Linux Programmer's Manual                 UNAME(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       uname - get name and information about current kernel<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/utsname.h&gt;</b><br><br>       <b>int uname(struct utsname *</b><i>buf</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>uname</b>() returns system information in the structure pointed to by<br>       <i>buf</i>.  The <i>utsname</i> struct is defined in <i>&lt;sys/utsname.h&gt;</i>:<br><br>           struct utsname {<br>               char sysname[];    /* Operating system name (e.g., \"Linux\") */<br>               char nodename[];   /* Name within \"some implementation-defined<br>                                     network\" */<br>               char release[];    /* Operating system release (e.g., \"2.6.28\") */<br>               char version[];    /* Operating system version */<br>               char machine[];    /* Hardware identifier */<br>           #ifdef _GNU_SOURCE<br>               char domainname[]; /* NIS or YP domain name */<br>           #endif<br>           };<br><br>       The length of the arrays in a <i>struct utsname</i> is unspecified (see<br>       NOTES); the fields are terminated by a null byte ('\\0').<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b><i>buf</i> is not valid.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4.  There is no <b>uname</b>() call in<br>       4.3BSD.<br><br>       The <i>domainname</i> member (the NIS or YP domain name) is a GNU extension.<br></pre><br><h2>NOTES  </h2><pre><br>       This is a system call, and the operating system presumably knows its<br>       name, release and version.  It also knows what hardware it runs on.<br>       So, four of the fields of the struct are meaningful.  On the other<br>       hand, the field <i>nodename</i> is meaningless: it gives the name of the<br>       present machine in some undefined network, but typically machines are<br>       in more than one network and have several names.  Moreover, the<br>       kernel has no way of knowing about such things, so it has to be told<br>       what to answer here.  The same holds for the additional <i>domainname</i><br>       field.<br><br>       To this end, Linux uses the system calls sethostname(2) and<br>       setdomainname(2).  Note that there is no standard that says that the<br>       hostname set by sethostname(2) is the same string as the <i>nodename</i><br>       field of the struct returned by <b>uname</b>() (indeed, some systems allow a<br>       256-byte hostname and an 8-byte nodename), but this is true on Linux.<br>       The same holds for setdomainname(2) and the <i>domainname</i> field.<br><br>       The length of the fields in the struct varies.  Some operating<br>       systems or libraries use a hardcoded 9 or 33 or 65 or 257.  Other<br>       systems use <b>SYS_NMLN </b>or <b>_SYS_NMLN </b>or <b>UTSLEN </b>or <b>_UTSNAME_LENGTH</b>.<br>       Clearly, it is a bad idea to use any of these constants; just use<br>       sizeof(...).  Often 257 is chosen in order to have room for an<br>       internet hostname.<br><br>       Part of the utsname information is also accessible via<br>       <i>/proc/sys/kernel/</i>{<i>ostype</i>, <i>hostname</i>, <i>osrelease</i>, <i>version</i>, <i>domainname</i>}.<br><br>   <b>C library/kernel differences</b><br>       Over time, increases in the size of the <i>utsname</i> structure have led to<br>       three successive versions of <b>uname</b>(): <i>sys_olduname</i>() (slot<br>       <i>__NR_oldolduname</i>), <i>sys_uname</i>() (slot <i>__NR_olduname</i>), and<br>       <i>sys_newuname</i>() (slot <i>__NR_uname)</i>.  The first one used length 9 for<br>       all fields; the second used 65; the third also uses 65 but adds the<br>       <i>domainname</i> field.  The glibc <b>uname</b>() wrapper function hides these<br>       details from applications, invoking the most recent version of the<br>       system call provided by the kernel.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       uname(1), getdomainname(2), gethostname(2), namespaces(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                         UNAME(2)</span><br></pre><br>"}