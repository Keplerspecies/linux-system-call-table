{"Man page": "<pre><br><span class=\"headline\">CHMOD(2)                  Linux Programmer's Manual                 CHMOD(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       chmod, fchmod, fchmodat - change permissions of a file<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/stat.h&gt;</b><br><br>       <b>int chmod(const char *</b><i>pathname</i><b>, mode_t </b><i>mode</i><b>);</b><br>       <b>int fchmod(int </b><i>fd</i><b>, mode_t </b><i>mode</i><b>);</b><br><br>       <b>#include &lt;fcntl.h&gt;           </b>/* Definition of AT_* constants */<br>       <b>#include &lt;sys/stat.h&gt;</b><br><br>       <b>int fchmodat(int </b><i>dirfd</i><b>, const char *</b><i>pathname</i><b>, mode_t </b><i>mode</i><b>, int </b><i>flags</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>fchmod</b>():<br>           _BSD_SOURCE || _XOPEN_SOURCE &gt;= 500 ||<br>           _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED<br>           || /* Since glibc 2.12: */ _POSIX_C_SOURCE &gt;= 200809L<br><br>       <b>fchmodat</b>():<br>           Since glibc 2.10:<br>               _XOPEN_SOURCE &gt;= 700 || _POSIX_C_SOURCE &gt;= 200809L<br>           Before glibc 2.10:<br>               _ATFILE_SOURCE<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>chmod</b>() and <b>fchmod</b>() system calls change the permissions of a<br>       file.  They differ only in how the file is specified:<br><br>       * <b>chmod</b>() changes the permissions of the file specified whose<br>         pathname is given in <i>pathname</i>, which is dereferenced if it is a<br>         symbolic link.<br><br>       * <b>fchmod</b>() changes the permissions of the file referred to by the<br>         open file descriptor <i>fd</i>.<br><br>       The new file permissions are specified in <i>mode</i>, which is a bit mask<br>       created by ORing together zero or more of the following:<br><br>       <b>S_ISUID  </b>(04000)  set-user-ID (set process effective user ID on<br>                         execve(2))<br><br>       <b>S_ISGID  </b>(02000)  set-group-ID (set process effective group ID on<br>                         execve(2); mandatory locking, as described in<br>                         fcntl(2); take a new file's group from parent<br>                         directory, as described in chown(2) and mkdir(2))<br><br>       <b>S_ISVTX  </b>(01000)  sticky bit (restricted deletion flag, as described<br>                         in unlink(2))<br><br>       <b>S_IRUSR  </b>(00400)  read by owner<br><br>       <b>S_IWUSR  </b>(00200)  write by owner<br><br>       <b>S_IXUSR  </b>(00100)  execute/search by owner (\"search\" applies for<br>                         directories, and means that entries within the<br>                         directory can be accessed)<br><br>       <b>S_IRGRP  </b>(00040)  read by group<br><br>       <b>S_IWGRP  </b>(00020)  write by group<br><br>       <b>S_IXGRP  </b>(00010)  execute/search by group<br><br>       <b>S_IROTH  </b>(00004)  read by others<br><br>       <b>S_IWOTH  </b>(00002)  write by others<br><br>       <b>S_IXOTH  </b>(00001)  execute/search by others<br><br>       The effective UID of the calling process must match the owner of the<br>       file, or the process must be privileged (Linux: it must have the<br>       <b>CAP_FOWNER </b>capability).<br><br>       If the calling process is not privileged (Linux: does not have the<br>       <b>CAP_FSETID </b>capability), and the group of the file does not match the<br>       effective group ID of the process or one of its supplementary group<br>       IDs, the <b>S_ISGID </b>bit will be turned off, but this will not cause an<br>       error to be returned.<br><br>       As a security measure, depending on the filesystem, the set-user-ID<br>       and set-group-ID execution bits may be turned off if a file is<br>       written.  (On Linux this occurs if the writing process does not have<br>       the <b>CAP_FSETID </b>capability.)  On some filesystems, only the superuser<br>       can set the sticky bit, which may have a special meaning.  For the<br>       sticky bit, and for set-user-ID and set-group-ID bits on directories,<br>       see stat(2).<br><br>       On NFS filesystems, restricting the permissions will immediately<br>       influence already open files, because the access control is done on<br>       the server, but open files are maintained by the client.  Widening<br>       the permissions may be delayed for other clients if attribute caching<br>       is enabled on them.<br><br>   <b>fchmodat()</b><br>       The <b>fchmodat</b>() system call operates in exactly the same way as<br>       <b>chmod</b>(), except for the differences described here.<br><br>       If the pathname given in <i>pathname</i> is relative, then it is interpreted<br>       relative to the directory referred to by the file descriptor <i>dirfd</i><br>       (rather than relative to the current working directory of the calling<br>       process, as is done by <b>chmod</b>() for a relative pathname).<br><br>       If <i>pathname</i> is relative and <i>dirfd</i> is the special value <b>AT_FDCWD</b>, then<br>       <i>pathname</i> is interpreted relative to the current working directory of<br>       the calling process (like <b>chmod</b>()).<br><br>       If <i>pathname</i> is absolute, then <i>dirfd</i> is ignored.<br><br>       <i>flags</i> can either be 0, or include the following flag:<br><br>       <b>AT_SYMLINK_NOFOLLOW</b><br>              If <i>pathname</i> is a symbolic link, do not dereference it: instead<br>              operate on the link itself.  This flag is not currently<br>              implemented.<br><br>       See openat(2) for an explanation of the need for <b>fchmodat</b>().<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       Depending on the filesystem, errors other than those listed below can<br>       be returned.<br><br>       The more general errors for <b>chmod</b>() are listed below:<br><br>       <b>EACCES </b>Search permission is denied on a component of the path prefix.<br>              (See also path_resolution(7).)<br><br>       <b>EFAULT </b><i>pathname</i> points outside your accessible address space.<br><br>       <b>EIO    </b>An I/O error occurred.<br><br>       <b>ELOOP  </b>Too many symbolic links were encountered in resolving<br>              <i>pathname</i>.<br><br>       <b>ENAMETOOLONG</b><br>              <i>pathname</i> is too long.<br><br>       <b>ENOENT </b>The file does not exist.<br><br>       <b>ENOMEM </b>Insufficient kernel memory was available.<br><br>       <b>ENOTDIR</b><br>              A component of the path prefix is not a directory.<br><br>       <b>EPERM  </b>The effective UID does not match the owner of the file, and<br>              the process is not privileged (Linux: it does not have the<br>              <b>CAP_FOWNER </b>capability).<br><br>       <b>EROFS  </b>The named file resides on a read-only filesystem.<br><br>       The general errors for <b>fchmod</b>() are listed below:<br><br>       <b>EBADF  </b>The file descriptor <i>fd</i> is not valid.<br><br>       <b>EIO    </b>See above.<br><br>       <b>EPERM  </b>See above.<br><br>       <b>EROFS  </b>See above.<br><br>       The same errors that occur for <b>chmod</b>() can also occur for <b>fchmodat</b>().<br>       The following additional errors can occur for <b>fchmodat</b>():<br><br>       <b>EBADF  </b><i>dirfd</i> is not a valid file descriptor.<br><br>       <b>EINVAL </b>Invalid flag specified in <i>flags</i>.<br><br>       <b>ENOTDIR</b><br>              <i>pathname</i> is relative and <i>dirfd</i> is a file descriptor referring<br>              to a file other than a directory.<br><br>       <b>ENOTSUP</b><br>              <i>flags</i> specified <b>AT_SYMLINK_NOFOLLOW</b>, which is not supported.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>fchmodat</b>() was added to Linux in kernel 2.6.16; library support was<br>       added to glibc in version 2.4.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>chmod</b>(), <b>fchmod</b>(): 4.4BSD, SVr4, POSIX.1-2001i, POSIX.1-2008.<br><br>       <b>fchmodat</b>(): POSIX.1-2008.<br></pre><br><h2>NOTES  </h2><pre><br>   <b>C library/kernel differences</b><br>       The GNU C library <b>fchmodat</b>() wrapper function implements the POSIX-<br>       specified interface described in this page.  This interface differs<br>       from the underlying Linux system call, which does <i>not</i> have a <i>flags</i><br>       argument.<br><br>   <b>Glibc notes</b><br>       On older kernels where <b>fchmodat</b>() is unavailable, the glibc wrapper<br>       function falls back to the use of <b>chmod</b>().  When <i>pathname</i> is a<br>       relative pathname, glibc constructs a pathname based on the symbolic<br>       link in <i>/proc/self/fd</i> that corresponds to the <i>dirfd</i> argument.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       chown(2), execve(2), open(2), stat(2), path_resolution(7), symlink(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                         CHMOD(2)</span><br></pre><br>"}