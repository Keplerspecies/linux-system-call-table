{"Man page": "<pre><br><span class=\"headline\">FALLOCATE(2)              Linux Programmer's Manual             FALLOCATE(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       fallocate - manipulate file space<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#define _GNU_SOURCE             </b>/* See feature_test_macros(7) */<br>       <b>#include &lt;fcntl.h&gt;</b><br><br>       <b>int fallocate(int </b><i>fd</i><b>, int </b><i>mode</i><b>, off_t </b><i>offset</i><b>, off_t </b><i>len</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       This is a nonportable, Linux-specific system call.  For the portable,<br>       POSIX.1-specified method of ensuring that space is allocated for a<br>       file, see posix_fallocate(3).<br><br>       <b>fallocate</b>() allows the caller to directly manipulate the allocated<br>       disk space for the file referred to by <i>fd</i> for the byte range starting<br>       at <i>offset</i> and continuing for <i>len</i> bytes.<br><br>       The <i>mode</i> argument determines the operation to be performed on the<br>       given range.  Details of the supported operations are given in the<br>       subsections below.<br><br>   <b>Allocating disk space</b><br>       The default operation (i.e., <i>mode</i> is zero) of <b>fallocate</b>() allocates<br>       the disk space within the range specified by <i>offset</i> and <i>len</i>.  The<br>       file size (as reported by stat(2)) will be changed if <i>offset</i>+<i>len</i> is<br>       greater than the file size.  Any subregion within the range specified<br>       by <i>offset</i> and <i>len</i> that did not contain data before the call will be<br>       initialized to zero.  This default behavior closely resembles the<br>       behavior of the posix_fallocate(3) library function, and is intended<br>       as a method of optimally implementing that function.<br><br>       After a successful call, subsequent writes into the range specified<br>       by <i>offset</i> and <i>len</i> are guaranteed not to fail because of lack of disk<br>       space.<br><br>       If the <b>FALLOC_FL_KEEP_SIZE </b>flag is specified in <i>mode</i>, the behavior of<br>       the call is similar, but the file size will not be changed even if<br>       <i>offset</i>+<i>len</i> is greater than the file size.  Preallocating zeroed<br>       blocks beyond the end of the file in this manner is useful for<br>       optimizing append workloads.<br><br>       Because allocation is done in block size chunks, <b>fallocate</b>() may<br>       allocate a larger range of disk space than was specified.<br><br>   <b>Deallocating file space</b><br>       Specifying the <b>FALLOC_FL_PUNCH_HOLE </b>flag (available since Linux<br>       2.6.38) in <i>mode</i> deallocates space (i.e., creates a hole) in the byte<br>       range starting at <i>offset</i> and continuing for <i>len</i> bytes.  Within the<br>       specified range, partial filesystem blocks are zeroed, and whole<br>       filesystem blocks are removed from the file.  After a successful<br>       call, subsequent reads from this range will return zeroes.<br><br>       The <b>FALLOC_FL_PUNCH_HOLE </b>flag must be ORed with <b>FALLOC_FL_KEEP_SIZE</b><br>       in <i>mode</i>; in other words, even when punching off the end of the file,<br>       the file size (as reported by stat(2)) does not change.<br><br>       Not all filesystems support <b>FALLOC_FL_PUNCH_HOLE</b>; if a filesystem<br>       doesn't support the operation, an error is returned.  The operation<br>       is supported on at least the following filesystems:<br><br>       *  XFS (since Linux 2.6.38)<br><br>       *  ext4 (since Linux 3.0)<br><br>       *  Btrfs (since Linux 3.7)<br><br>       *  tmpfs (since Linux 3.5)<br><br>   <b>Collapsing file space</b><br>       Specifying the <b>FALLOC_FL_COLLAPSE_RANGE </b>flag (available since Linux<br>       3.15) in <i>mode</i> removes a byte range from a file, without leaving a<br>       hole.  The byte range to be collapsed starts at <i>offset</i> and continues<br>       for <i>len</i> bytes.  At the completion of the operation, the contents of<br>       the file starting at the location <i>offset+len</i> will be appended at the<br>       location <i>offset</i>, and the file will be <i>len</i> bytes smaller.<br><br>       A filesystem may place limitations on the granularity of the<br>       operation, in order to ensure efficient implementation.  Typically,<br>       <i>offset</i> and <i>len</i> must be a multiple of the filesystem logical block<br>       size, which varies according to the filesystem type and<br>       configuration.  If a filesystem has such a requirement, <b>fallocate</b>()<br>       will fail with the error <b>EINVAL </b>if this requirement is violated.<br><br>       If the region specified by <i>offset</i> plus <i>len</i> reaches or passes the end<br>       of file, an error is returned; instead, use ftruncate(2) to truncate<br>       a file.<br><br>       No other flags may be specified in <i>mode</i> in conjunction with<br>       <b>FALLOC_FL_COLLAPSE_RANGE</b>.<br><br>       As at Linux 3.15, <b>FALLOC_FL_COLLAPSE_RANGE </b>is supported by ext4 (only<br>       for extent-based files) and XFS.<br><br>   <b>Zeroing file space</b><br>       Specifying the <b>FALLOC_FL_ZERO_RANGE </b>flag (available since Linux 3.15)<br>       in <i>mode</i> zeroes space in the byte range starting at <i>offset</i> and<br>       continuing for <i>len</i> bytes.  Within the specified range, blocks are<br>       preallocated for the regions that span the holes in the file.  After<br>       a successful call, subsequent reads from this range will return<br>       zeroes.<br><br>       Zeroing is done within the filesystem preferably by converting the<br>       range into unwritten extents.  This approach means that the specified<br>       range will not be physically zeroed out on the device (except for<br>       partial blocks at the either end of the range), and I/O is<br>       (otherwise) required only to update metadata.<br><br>       If the <b>FALLOC_FL_KEEP_SIZE </b>flag is additionally specified in <i>mode</i>,<br>       the behavior of the call is similar, but the file size will not be<br>       changed even if <i>offset</i>+<i>len</i> is greater than the file size.  This<br>       behavior is the same as when preallocating space with<br>       <b>FALLOC_FL_KEEP_SIZE </b>specified.<br><br>       Not all filesystems support <b>FALLOC_FL_ZERO_RANGE</b>; if a filesystem<br>       doesn't support the operation, an error is returned.  The operation<br>       is supported on at least the following filesystems:<br><br>       *  XFS (since Linux 3.15)<br><br>       *  ext4, for extent-based files (since Linux 3.15)<br><br>       *  SMB3 (since Linux 3.17)<br><br>   <b>Increasing file space</b><br>       Specifying the <b>FALLOC_FL_INSERT_RANGE </b>flag (available since Linux<br>       4.1) in <i>mode</i> increases the file space by inserting a hole within the<br>       file size without overwriting any existing data.  The hole will start<br>       at <i>offset</i> and continue for <i>len</i> bytes.  When inserting the hole inside<br>       file, the contents of the file starting at <i>offset</i> will be shifted<br>       upward (i.e., to a higher file offset) by <i>len</i> bytes.  Inserting a<br>       hole inside a file increases the file size by <i>len</i> bytes.<br><br>       This mode has the same limitations as <b>FALLOC_FL_COLLAPSE_RANGE</b><br>       regarding the granularity of the operation.  If the granularity<br>       requirements are not met, <b>fallocate</b>() will fail with the error<br>       <b>EINVAL.  </b>If the <i>offset</i> is equal to or greater than the end of file,<br>       an error is returned.  For such operations (i.e., inserting a hole at<br>       the end of file), ftruncate(2) should be used.<br><br>       No other flags may be specified in <i>mode</i> in conjunction with<br>       <b>FALLOC_FL_INSERT_RANGE</b>.<br><br>       <b>FALLOC_FL_INSERT_RANGE </b>requires filesystem support.  Filesystems that<br>       support this operation include XFS (since Linux 4.1) and ext4 (since<br>       Linux 4.2).<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>fallocate</b>() returns zero.  On error, -1 is returned and<br>       <i>errno</i> is set to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBADF  </b><i>fd</i> is not a valid file descriptor, or is not opened for<br>              writing.<br><br>       <b>EFBIG  </b><i>offset</i>+<i>len</i> exceeds the maximum file size.<br><br>       <b>EFBIG  </b><i>mode</i> is <b>FALLOC_FL_INSERT_RANGE</b>, and the current file size+<i>len</i><br>              exceeds the maximum file size.<br><br>       <b>EINTR  </b>A signal was caught during execution.<br><br>       <b>EINVAL </b><i>offset</i> was less than 0, or <i>len</i> was less than or equal to 0.<br><br>       <b>EINVAL </b><i>mode</i> is <b>FALLOC_FL_COLLAPSE_RANGE </b>and the range specified by<br>              <i>offset</i> plus <i>len</i> reaches or passes the end of the file.<br><br>       <b>EINVAL </b><i>mode</i> is <b>FALLOC_FL_INSERT_RANGE </b>and the range specified by<br>              <i>offset</i> reaches or passes the end of the file.<br><br>       <b>EINVAL </b><i>mode</i> is <b>FALLOC_FL_COLLAPSE_RANGE </b>or <b>FALLOC_FL_INSERT_RANGE</b>,<br>              but either <i>offset</i> or <i>len</i> is not a multiple of the filesystem<br>              block size.<br><br>       <b>EINVAL </b><i>mode</i> contains one of <b>FALLOC_FL_COLLAPSE_RANGE </b>or<br>              <b>FALLOC_FL_INSERT_RANGE </b>and also other flags; no other flags<br>              are permitted with <b>FALLOC_FL_COLLAPSE_RANGE </b>or<br>              <b>FALLOC_FL_INSERT_RANGE</b>.<br><br>       <b>EINVAL </b><i>mode</i> is <b>FALLOC_FL_COLLAPSE_RANGE </b>or <b>FALLOC_FL_ZERO_RANGE </b>or<br>              <b>FALLOC_FL_INSERT_RANGE</b>, but the file referred to by <i>fd</i> is not<br>              a regular file.<br><br>       <b>EIO    </b>An I/O error occurred while reading from or writing to a<br>              filesystem.<br><br>       <b>ENODEV </b><i>fd</i> does not refer to a regular file or a directory.  (If <i>fd</i> is<br>              a pipe or FIFO, a different error results.)<br><br>       <b>ENOSPC </b>There is not enough space left on the device containing the<br>              file referred to by <i>fd</i>.<br><br>       <b>ENOSYS </b>This kernel does not implement <b>fallocate</b>().<br><br>       <b>EOPNOTSUPP</b><br>              The filesystem containing the file referred to by <i>fd</i> does not<br>              support this operation; or the <i>mode</i> is not supported by the<br>              filesystem containing the file referred to by <i>fd</i>.<br><br>       <b>EPERM  </b>The file referred to by <i>fd</i> is marked immutable (see<br>              chattr(1)).<br><br>       <b>EPERM  </b><i>mode</i> specifies <b>FALLOC_FL_PUNCH_HOLE </b>or<br>              <b>FALLOC_FL_COLLAPSE_RANGE </b>or <b>FALLOC_FL_INSERT_RANGE </b>and the<br>              file referred to by <i>fd</i> is marked append-only (see chattr(1)).<br><br>       <b>EPERM  </b>The operation was prevented by a file seal; see fcntl(2).<br><br>       <b>ESPIPE </b><i>fd</i> refers to a pipe or FIFO.<br><br>       <b>ETXTBSY</b><br>              <i>mode</i> specifies <b>FALLOC_FL_COLLAPSE_RANGE </b>or<br>              <b>FALLOC_FL_INSERT_RANGE</b>, but the file referred to by <i>fd</i> is<br>              currently being executed.<br></pre><br><h2>VERSIONS  </h2><pre><br>       <b>fallocate</b>() is available on Linux since kernel 2.6.23.  Support is<br>       provided by glibc since version 2.10.  The <b>FALLOC_FL_* </b>flags are<br>       defined in glibc headers only since version 2.18.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>fallocate</b>() is Linux-specific.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       fallocate(1), ftruncate(2), <b>posix_fadvise</b>(3), posix_fallocate(3)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                     FALLOCATE(2)</span><br></pre><br>"}