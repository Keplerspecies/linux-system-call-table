{"Man page": "<pre><br><span class=\"headline\">GETSOCKOPT(2)             Linux Programmer's Manual            GETSOCKOPT(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       getsockopt, setsockopt - get and set options on sockets<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;          </b>/* See NOTES */<br>       <b>#include &lt;sys/socket.h&gt;</b><br><br>       <b>int getsockopt(int </b><i>sockfd</i><b>, int </b><i>level</i><b>, int </b><i>optname</i><b>,</b><br>                      <b>void *</b><i>optval</i><b>, socklen_t *</b><i>optlen</i><b>);</b><br>       <b>int setsockopt(int </b><i>sockfd</i><b>, int </b><i>level</i><b>, int </b><i>optname</i><b>,</b><br>                      <b>const void *</b><i>optval</i><b>, socklen_t </b><i>optlen</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>getsockopt</b>() and <b>setsockopt</b>() manipulate options for the socket<br>       referred to by the file descriptor <i>sockfd</i>.  Options may exist at<br>       multiple protocol levels; they are always present at the uppermost<br>       socket level.<br><br>       When manipulating socket options, the level at which the option<br>       resides and the name of the option must be specified.  To manipulate<br>       options at the sockets API level, <i>level</i> is specified as <b>SOL_SOCKET</b>.<br>       To manipulate options at any other level the protocol number of the<br>       appropriate protocol controlling the option is supplied.  For<br>       example, to indicate that an option is to be interpreted by the <b>TCP</b><br>       protocol, <i>level</i> should be set to the protocol number of <b>TCP</b>; see<br>       getprotoent(3).<br><br>       The arguments <i>optval</i> and <i>optlen</i> are used to access option values for<br>       <b>setsockopt</b>().  For <b>getsockopt</b>() they identify a buffer in which the<br>       value for the requested option(s) are to be returned.  For<br>       <b>getsockopt</b>(), <i>optlen</i> is a value-result argument, initially containing<br>       the size of the buffer pointed to by <i>optval</i>, and modified on return<br>       to indicate the actual size of the value returned.  If no option<br>       value is to be supplied or returned, <i>optval</i> may be NULL.<br><br>       <i>Optname</i> and any specified options are passed uninterpreted to the<br>       appropriate protocol module for interpretation.  The include file<br>       <i>&lt;sys/socket.h&gt;</i> contains definitions for socket level options,<br>       described below.  Options at other protocol levels vary in format and<br>       name; consult the appropriate entries in section 4 of the manual.<br><br>       Most socket-level options utilize an <i>int</i> argument for <i>optval</i>.  For<br>       <b>setsockopt</b>(), the argument should be nonzero to enable a boolean<br>       option, or zero if the option is to be disabled.<br><br>       For a description of the available socket options see socket(7) and<br>       the appropriate protocol man pages.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned for the standard options.  On error, -1<br>       is returned, and <i>errno</i> is set appropriately.<br><br>       Netfilter allows the programmer to define custom socket options with<br>       associated handlers; for such options, the return value on success is<br>       the value returned by the handler.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EBADF     </b>The argument <i>sockfd</i> is not a valid descriptor.<br><br>       <b>EFAULT    </b>The address pointed to by <i>optval</i> is not in a valid part of<br>                 the process address space.  For <b>getsockopt</b>(), this error<br>                 may also be returned if <i>optlen</i> is not in a valid part of<br>                 the process address space.<br><br>       <b>EINVAL    </b><i>optlen</i> invalid in <b>setsockopt</b>().  In some cases this error<br>                 can also occur for an invalid value in <i>optval</i> (e.g., for<br>                 the <b>IP_ADD_MEMBERSHIP </b>option described in ip(7)).<br><br>       <b>ENOPROTOOPT</b><br>                 The option is unknown at the level indicated.<br><br>       <b>ENOTSOCK  </b>The argument <i>sockfd</i> is a file, not a socket.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4, 4.4BSD (these system calls first<br>       appeared in 4.2BSD).<br></pre><br><h2>NOTES  </h2><pre><br>       POSIX.1 does not require the inclusion of <i>&lt;sys/types.h&gt;</i>, and this<br>       header file is not required on Linux.  However, some historical (BSD)<br>       implementations required this header file, and portable applications<br>       are probably wise to include it.<br><br>       The <i>optlen</i> argument of <b>getsockopt</b>() and <b>setsockopt</b>() is in reality an<br>       <i>int [*]</i> (and this is what 4.x BSD and libc4 and libc5 have).  Some<br>       POSIX confusion resulted in the present <i>socklen_t</i>, also used by<br>       glibc.  See also accept(2).<br></pre><br><h2>BUGS  </h2><pre><br>       Several of the socket options should be handled at lower levels of<br>       the system.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       ioctl(2), socket(2), getprotoent(3), protocols(5), ip(7), packet(7),<br>       socket(7), tcp(7), udp(7), unix(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                    GETSOCKOPT(2)</span><br></pre><br>"}