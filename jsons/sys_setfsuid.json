{"Man page": "<pre><br><span class=\"headline\">SETFSUID(2)               Linux Programmer's Manual              SETFSUID(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       setfsuid - set user identity used for filesystem checks<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/fsuid.h&gt;</b><br><br>       <b>int setfsuid(uid_t </b><i>fsuid</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The system call <b>setfsuid</b>() changes the value of the caller's<br>       filesystem user ID&#8212;the user ID that the Linux kernel uses to check<br>       for all accesses to the filesystem.  Normally, the value of the<br>       filesystem user ID will shadow the value of the effective user ID.<br>       In fact, whenever the effective user ID is changed, the filesystem<br>       user ID will also be changed to the new value of the effective user<br>       ID.<br><br>       Explicit calls to <b>setfsuid</b>() and setfsgid(2) are usually used only by<br>       programs such as the Linux NFS server that need to change what user<br>       and group ID is used for file access without a corresponding change<br>       in the real and effective user and group IDs.  A change in the normal<br>       user IDs for a program such as the NFS server is a security hole that<br>       can expose it to unwanted signals.  (But see below.)<br><br>       <b>setfsuid</b>() will succeed only if the caller is the superuser or if<br>       <i>fsuid</i> matches either the caller's real user ID, effective user ID,<br>       saved set-user-ID, or current filesystem user ID.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On both success and failure, this call returns the previous<br>       filesystem user ID of the caller.<br></pre><br><h2>VERSIONS  </h2><pre><br>       This system call is present in Linux since version 1.2.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>setfsuid</b>() is Linux-specific and should not be used in programs<br>       intended to be portable.<br></pre><br><h2>NOTES  </h2><pre><br>       When glibc determines that the argument is not a valid user ID, it<br>       will return -1 and set <i>errno</i> to <b>EINVAL </b>without attempting the system<br>       call.<br><br>       At the time when this system call was introduced, one process could<br>       send a signal to another process with the same effective user ID.<br>       This meant that if a privileged process changed its effective user ID<br>       for the purpose of file permission checking, then it could become<br>       vulnerable to receiving signals sent by another (unprivileged)<br>       process with the same user ID.  The filesystem user ID attribute was<br>       thus added to allow a process to change its user ID for the purposes<br>       of file permission checking without at the same time becoming<br>       vulnerable to receiving unwanted signals.  Since Linux 2.0, signal<br>       permission handling is different (see kill(2)), with the result that<br>       a process change can change its effective user ID without being<br>       vulnerable to receiving signals from unwanted processes.  Thus,<br>       <b>setfsuid</b>() is nowadays unneeded and should be avoided in new<br>       applications (likewise for setfsgid(2)).<br><br>       The original Linux <b>setfsuid</b>() system call supported only 16-bit user<br>       IDs.  Subsequently, Linux 2.4 added <b>setfsuid32</b>() supporting 32-bit<br>       IDs.  The glibc <b>setfsuid</b>() wrapper function transparently deals with<br>       the variation across kernel versions.<br></pre><br><h2>BUGS  </h2><pre><br>       No error indications of any kind are returned to the caller, and the<br>       fact that both successful and unsuccessful calls return the same<br>       value makes it impossible to directly determine whether the call<br>       succeeded or failed.  Instead, the caller must resort to looking at<br>       the return value from a further call such as <i>setfsuid(-1)</i> (which will<br>       always fail), in order to determine if a preceding call to <b>setfsuid</b>()<br>       changed the filesystem user ID.  At the very least, <b>EPERM </b>should be<br>       returned when the call fails (because the caller lacks the <b>CAP_SETUID</b><br>       capability).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       kill(2), setfsgid(2), capabilities(7), credentials(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2013-08-08                      SETFSUID(2)</span><br></pre><br>"}