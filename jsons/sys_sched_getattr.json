{"Man page": "<pre><br><span class=\"headline\">SCHED_SETATTR(2)          Linux Programmer's Manual         SCHED_SETATTR(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       sched_setattr,  sched_getattr  -  set  and  get scheduling policy and<br>       attributes<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sched.h&gt;</b><br><br>       <b>int sched_setattr(pid_t </b><i>pid</i><b>, struct sched_attr *</b><i>attr</i><b>,</b><br>                         <b>unsigned int </b><i>flags</i><b>);</b><br><br>       <b>int sched_getattr(pid_t </b><i>pid</i><b>, struct sched_attr *</b><i>attr</i><b>,</b><br>                         <b>unsigned int </b><i>size</i><b>, unsigned int </b><i>flags</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>   <b>sched_setattr()</b><br>       The <b>sched_setattr</b>() system call sets the scheduling policy and<br>       associated attributes for the thread whose ID is specified in <i>pid</i>.<br>       If <i>pid</i> equals zero, the scheduling policy and attributes of the<br>       calling thread will be set.<br><br>       Currently, Linux supports the following \"normal\" (i.e., non-real-<br>       time) scheduling policies as values that may be specified in <i>policy</i>:<br><br>       <b>SCHED_OTHER   </b>the standard round-robin time-sharing policy;<br><br>       <b>SCHED_BATCH   </b>for \"batch\" style execution of processes; and<br><br>       <b>SCHED_IDLE    </b>for running <i>very</i> low priority background jobs.<br><br>       Various \"real-time\" policies are also supported, for special time-<br>       critical applications that need precise control over the way in which<br>       runnable threads are selected for execution.  For the rules governing<br>       when a process may use these policies, see sched(7).  The real-time<br>       policies that may be specified in <i>policy</i> are:<br><br>       <b>SCHED_FIFO    </b>a first-in, first-out policy; and<br><br>       <b>SCHED_RR      </b>a round-robin policy.<br><br>       Linux also provides the following policy:<br><br>       <b>SCHED_DEADLINE</b><br>                     a deadline scheduling policy; see sched(7) for details.<br><br>       The <i>attr</i> argument is a pointer to a structure that defines the new<br>       scheduling policy and attributes for the specified thread.  This<br>       structure has the following form:<br><br>           struct sched_attr {<br>               u32 size;              /* Size of this structure */<br>               u32 sched_policy;      /* Policy (SCHED_*) */<br>               u64 sched_flags;       /* Flags */<br>               s32 sched_nice;        /* Nice value (SCHED_OTHER,<br>                                         SCHED_BATCH) */<br>               u32 sched_priority;    /* Static priority (SCHED_FIFO,<br>                                         SCHED_RR) */<br>               /* Remaining fields are for SCHED_DEADLINE */<br>               u64 sched_runtime;<br>               u64 sched_deadline;<br>               u64 sched_period;<br>           };<br><br>       The fields of this structure are as follows:<br><br>       <b>size   </b>This field should be set to the size of the structure in<br>              bytes, as in <i>sizeof(struct sched_attr)</i>.  If the provided<br>              structure is smaller than the kernel structure, any additional<br>              fields are assumed to be '0'.  If the provided structure is<br>              larger than the kernel structure, the kernel verifies that all<br>              additional fields are 0; if they are not, <b>sched_setattr</b>()<br>              fails with the error <b>E2BIG </b>and updates <i>size</i> to contain the<br>              size of the kernel structure.<br><br>              The above behavior when the size of the user-space <i>sched_attr</i><br>              structure does not match the size of the kernel structure<br>              allows for future extensibility of the interface.  Malformed<br>              applications that pass oversize structures won't break in the<br>              future if the size of the kernel <i>sched_attr</i> structure is<br>              increased.  In the future, it could also allow applications<br>              that know about a larger user-space <i>sched_attr</i> structure to<br>              determine whether they are running on an older kernel that<br>              does not support the larger structure.<br><br>       <i>sched_policy</i><br>              This field specifies the scheduling policy, as one of the<br>              <b>SCHED_* </b>values listed above.<br><br>       <i>sched_flags</i><br>              This field contains flags controlling scheduling behavior.<br>              Only one such flag is currently defined:<br>              <b>SCHED_FLAG_RESET_ON_FORK</b>.  As a result of including this flag,<br>              children created by fork(2) do not inherit privileged<br>              scheduling policies.  See sched(7) for details.<br><br>       <i>sched_nice</i><br>              This field specifies the nice value to be set when specifying<br>              <i>sched_policy</i> as <b>SCHED_OTHER </b>or <b>SCHED_BATCH</b>.  The nice value is<br>              a number in the range -20 (high priority) to +19 (low<br>              priority); see setpriority(2).<br><br>       <i>sched_priority</i><br>              This field specifies the static priority to be set when<br>              specifying <i>sched_policy</i> as <b>SCHED_FIFO </b>or <b>SCHED_RR</b>.  The<br>              allowed range of priorities for these policies can be<br>              determined using sched_get_priority_min(2) and<br>              sched_get_priority_max(2).  For other policies, this field<br>              must be specified as 0.<br><br>       <i>sched_runtime</i><br>              This field specifies the \"Runtime\" parameter for deadline<br>              scheduling.  The value is expressed in nanoseconds.  This<br>              field, and the next two fields, are used only for<br>              <b>SCHED_DEADLINE </b>scheduling; for further details, see sched(7).<br><br>       <i>sched_deadline</i><br>              This field specifies the \"Deadline\" parameter for deadline<br>              scheduling.  The value is expressed in nanoseconds.<br><br>       <i>sched_period</i><br>              This field specifies the \"Period\" parameter for deadline<br>              scheduling.  The value is expressed in nanoseconds.<br><br>       The <i>flags</i> argument is provided to allow for future extensions to the<br>       interface; in the current implementation it must be specified as 0.<br><br>   <b>sched_getattr()</b><br>       The <b>sched_getattr</b>() system call fetches the scheduling policy and the<br>       associated attributes for the thread whose ID is specified in <i>pid</i>.<br>       If <i>pid</i> equals zero, the scheduling policy and attributes of the<br>       calling thread will be retrieved.<br><br>       The <i>size</i> argument should be set to the size of the <i>sched_attr</i><br>       structure as known to user space.  The value must be at least as<br>       large as the size of the initially published <i>sched_attr</i> structure, or<br>       the call fails with the error <b>EINVAL</b>.<br><br>       The retrieved scheduling attributes are placed in the fields of the<br>       <i>sched_attr</i> structure pointed to by <i>attr</i>.  The kernel sets <i>attr.size</i><br>       to the size of its <i>sched_attr</i> structure.<br><br>       If the caller-provided <i>attr</i> buffer is larger than the kernel's<br>       <i>sched_attr</i> structure, the additional bytes in the user-space<br>       structure are not touched.  If the caller-provided structure is<br>       smaller than the kernel <i>sched_attr</i> structure and the kernel needs to<br>       return values outside the provided space, <b>sched_getattr</b>() fails with<br>       the error <b>E2BIG</b>.  As with <b>sched_setattr</b>(), these semantics allow for<br>       future extensibility of the interface.<br><br>       The <i>flags</i> argument is provided to allow for future extensions to the<br>       interface; in the current implementation it must be specified as 0.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>sched_setattr</b>() and <b>sched_getattr</b>() return 0.  On error,<br>       -1 is returned, and <i>errno</i> is set to indicate the cause of the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>sched_getattr</b>() and <b>sched_setattr</b>() can both fail for the following<br>       reasons:<br><br>       <b>EINVAL </b><i>attr</i> is NULL; or <i>pid</i> is negative; or <i>flags</i> is not zero.<br><br>       <b>ESRCH  </b>The thread whose ID is <i>pid</i> could not be found.<br><br>       In addition, <b>sched_getattr</b>() can fail for the following reasons:<br><br>       <b>E2BIG  </b>The buffer specified by <i>size</i> and <i>attr</i> is too small.<br><br>       <b>EINVAL </b><i>size</i> is invalid; that is, it is smaller than the initial<br>              version of the <i>sched_attr</i> structure (48 bytes) or larger than<br>              the system page size.<br><br>       In addition, <b>sched_setattr</b>() can fail for the following reasons:<br><br>       <b>E2BIG  </b>The buffer specified by <i>size</i> and <i>attr</i> is larger than the<br>              kernel structure, and one or more of the excess bytes is<br>              nonzero.<br><br>       <b>EBUSY  SCHED_DEADLINE </b>admission control failure, see sched(7).<br><br>       <b>EINVAL </b><i>attr.sched_policy</i> is not one of the recognized policies;<br>              <i>attr.sched_flags</i> contains a flag other than<br>              <b>SCHED_FLAG_RESET_ON_FORK</b>; or <i>attr.sched_priority</i> is invalid;<br>              or <i>attr.sched_policy</i> is <b>SCHED_DEADLINE </b>and the deadline<br>              scheduling parameters in <i>attr</i> are invalid.<br><br>       <b>EPERM  </b>The caller does not have appropriate privileges.<br><br>       <b>EPERM  </b>The caller's CPU affinity mask does not include all CPUs in<br>              the system (see sched_setaffinity(2)).<br></pre><br><h2>VERSIONS  </h2><pre><br>       These system calls first appeared in Linux 3.14.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       These system calls are nonstandard Linux extensions.<br></pre><br><h2>NOTES  </h2><pre><br>       <b>sched_setattr</b>() provides a superset of the functionality of<br>       sched_setscheduler(2), sched_setparam(2), nice(2), and (other than<br>       the ability to set the priority of all processes belonging to a<br>       specified user or all processes in a specified group) setpriority(2).<br>       Analogously, <b>sched_getattr</b>() provides a superset of the functionality<br>       of sched_getscheduler(2), sched_getparam(2), and (partially)<br>       getpriority(2).<br></pre><br><h2>BUGS  </h2><pre><br>       In Linux versions up to 3.15, <b>sched_settattr</b>() failed with the error<br>       <b>EFAULT </b>instead of <b>E2BIG </b>for the case described in ERRORS.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       chrt(1), nice(2), sched_get_priority_max(2),<br>       sched_get_priority_min(2), sched_getaffinity(2),<br>       sched_getscheduler(2), sched_getparam(2), sched_rr_get_interval(2),<br>       sched_setaffinity(2), sched_setscheduler(2), sched_setparam(2),<br>       sched_yield(2), setpriority(2), pthread_getschedparam(3),<br>       pthread_setschedparam(3), pthread_setschedprio(3), capabilities(7),<br>       cpuset(7), sched(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                 SCHED_SETATTR(2)</span><br></pre><br>"}