{"Man page": "<pre><br><span class=\"headline\">SETGID(2)                 Linux Programmer's Manual                SETGID(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       setgid - set group identity<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>int setgid(gid_t </b><i>gid</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>setgid</b>() sets the effective group ID of the calling process.  If the<br>       caller is privileged (has the CAP_SETGID capability), the real GID<br>       and saved set-group-ID are also set.<br><br>       Under Linux, <b>setgid</b>() is implemented like the POSIX version with the<br>       <b>_POSIX_SAVED_IDS </b>feature.  This allows a set-group-ID program that is<br>       not set-user-ID-root to drop all of its group privileges, do some un-<br>       privileged work, and then reengage the original effective group ID in<br>       a secure manner.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EINVAL </b>The group ID specified in <i>gid</i> is not valid in this user<br>              namespace.<br><br>       <b>EPERM  </b>The calling process is not privileged (does not have the<br>              <b>CAP_SETGID </b>capability), and <i>gid</i> does not match the real group<br>              ID or saved set-group-ID of the calling process.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4.<br></pre><br><h2>NOTES  </h2><pre><br>       The original Linux <b>setgid</b>() system call supported only 16-bit group<br>       IDs.  Subsequently, Linux 2.4 added <b>setgid32</b>() supporting 32-bit IDs.<br>       The glibc <b>setgid</b>() wrapper function transparently deals with the<br>       variation across kernel versions.<br><br>   <b>C library/kernel differences</b><br>       At the kernel level, user IDs and group IDs are a per-thread<br>       attribute.  However, POSIX requires that all threads in a process<br>       share the same credentials.  The NPTL threading implementation<br>       handles the POSIX requirements by providing wrapper functions for the<br>       various system calls that change process UIDs and GIDs.  These<br>       wrapper functions (including the one for <b>setgid</b>()) employ a signal-<br>       based technique to ensure that when one thread changes credentials,<br>       all of the other threads in the process also change their<br>       credentials.  For details, see nptl(7).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       getgid(2), setegid(2), setregid(2), capabilities(7), credentials(7),<br>       user_namespaces(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                        SETGID(2)</span><br></pre><br>"}