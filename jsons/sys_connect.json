{"Man page": "<pre><br><span class=\"headline\">CONNECT(2)                Linux Programmer's Manual               CONNECT(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       connect - initiate a connection on a socket<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;          </b>/* See NOTES */<br>       <b>#include &lt;sys/socket.h&gt;</b><br><br>       <b>int connect(int </b><i>sockfd</i><b>, const struct sockaddr *</b><i>addr</i><b>,</b><br>                   <b>socklen_t </b><i>addrlen</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>connect</b>() system call connects the socket referred to by the file<br>       descriptor <i>sockfd</i> to the address specified by <i>addr</i>.  The <i>addrlen</i><br>       argument specifies the size of <i>addr</i>.  The format of the address in<br>       <i>addr</i> is determined by the address space of the socket <i>sockfd</i>; see<br>       socket(2) for further details.<br><br>       If the socket <i>sockfd</i> is of type <b>SOCK_DGRAM</b>, then <i>addr</i> is the address<br>       to which datagrams are sent by default, and the only address from<br>       which datagrams are received.  If the socket is of type <b>SOCK_STREAM</b><br>       or <b>SOCK_SEQPACKET</b>, this call attempts to make a connection to the<br>       socket that is bound to the address specified by <i>addr</i>.<br><br>       Generally, connection-based protocol sockets may successfully<br>       <b>connect</b>() only once; connectionless protocol sockets may use<br>       <b>connect</b>() multiple times to change their association.  Connectionless<br>       sockets may dissolve the association by connecting to an address with<br>       the <i>sa_family</i> member of <i>sockaddr</i> set to <b>AF_UNSPEC </b>(supported on Linux<br>       since kernel 2.2).<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       If the connection or binding succeeds, zero is returned.  On error,<br>       -1 is returned, and <i>errno</i> is set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       The following are general socket errors only.  There may be other<br>       domain-specific error codes.<br><br>       <b>EACCES </b>For UNIX domain sockets, which are identified by pathname:<br>              Write permission is denied on the socket file, or search<br>              permission is denied for one of the directories in the path<br>              prefix.  (See also path_resolution(7).)<br><br>       <b>EACCES</b>, <b>EPERM</b><br>              The user tried to connect to a broadcast address without<br>              having the socket broadcast flag enabled or the connection<br>              request failed because of a local firewall rule.<br><br>       <b>EADDRINUSE</b><br>              Local address is already in use.<br><br>       <b>EADDRNOTAVAIL</b><br>              (Internet domain sockets) The socket referred to by <i>sockfd</i> had<br>              not previously been bound to an address and, upon attempting<br>              to bind it to an ephemeral port, it was determined that all<br>              port numbers in the ephemeral port range are currently in use.<br>              See the discussion of <i>/proc/sys/net/ipv4/ip_local_port_range</i><br>              in ip(7).<br><br>       <b>EAFNOSUPPORT</b><br>              The passed address didn't have the correct address family in<br>              its <i>sa_family</i> field.<br><br>       <b>EAGAIN </b>Insufficient entries in the routing cache.<br><br>       <b>EALREADY</b><br>              The socket is nonblocking and a previous connection attempt<br>              has not yet been completed.<br><br>       <b>EBADF  </b>The file descriptor is not a valid index in the descriptor<br>              table.<br><br>       <b>ECONNREFUSED</b><br>              No-one listening on the remote address.<br><br>       <b>EFAULT </b>The socket structure address is outside the user's address<br>              space.<br><br>       <b>EINPROGRESS</b><br>              The socket is nonblocking and the connection cannot be<br>              completed immediately.  It is possible to select(2) or poll(2)<br>              for completion by selecting the socket for writing.  After<br>              select(2) indicates writability, use getsockopt(2) to read the<br>              <b>SO_ERROR </b>option at level <b>SOL_SOCKET </b>to determine whether<br>              <b>connect</b>() completed successfully (<b>SO_ERROR </b>is zero) or<br>              unsuccessfully (<b>SO_ERROR </b>is one of the usual error codes<br>              listed here, explaining the reason for the failure).<br><br>       <b>EINTR  </b>The system call was interrupted by a signal that was caught;<br>              see signal(7).<br><br>       <b>EISCONN</b><br>              The socket is already connected.<br><br>       <b>ENETUNREACH</b><br>              Network is unreachable.<br><br>       <b>ENOTSOCK</b><br>              The file descriptor is not associated with a socket.<br><br>       <b>EPROTOTYPE</b><br>              The socket type does not support the requested communications<br>              protocol.  This error can occur, for example, on an attempt to<br>              connect a UNIX domain datagram socket to a stream socket.<br><br>       <b>ETIMEDOUT</b><br>              Timeout while attempting connection.  The server may be too<br>              busy to accept new connections.  Note that for IP sockets the<br>              timeout may be very long when syncookies are enabled on the<br>              server.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4, 4.4BSD, (the <b>connect</b>() function<br>       first appeared in 4.2BSD).<br></pre><br><h2>NOTES  </h2><pre><br>       POSIX.1 does not require the inclusion of <i>&lt;sys/types.h&gt;</i>, and this<br>       header file is not required on Linux.  However, some historical (BSD)<br>       implementations required this header file, and portable applications<br>       are probably wise to include it.<br><br>       The third argument of <b>connect</b>() is in reality an <i>int</i> (and this is<br>       what 4.x BSD and libc4 and libc5 have).  Some POSIX confusion<br>       resulted in the present <i>socklen_t</i>, also used by glibc.  See also<br>       accept(2).<br><br>       If <b>connect</b>() fails, consider the state of the socket as unspecified.<br>       Portable applications should close the socket and create a new one<br>       for reconnecting.<br></pre><br><h2>EXAMPLE  </h2><pre><br>       An example of the use of <b>connect</b>() is shown in getaddrinfo(3).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       accept(2), bind(2), getsockname(2), listen(2), socket(2),<br>       path_resolution(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                       CONNECT(2)</span><br></pre><br>"}