{"Man page": "<pre><br><span class=\"headline\">SEMGET(2)                 Linux Programmer's Manual                SEMGET(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       semget - get a System V semaphore set identifier<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;sys/ipc.h&gt;</b><br>       <b>#include &lt;sys/sem.h&gt;</b><br><br>       <b>int semget(key_t </b><i>key</i><b>, int </b><i>nsems</i><b>, int </b><i>semflg</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       The <b>semget</b>() system call returns the System V semaphore set<br>       identifier associated with the argument <i>key</i>.  A new set of <i>nsems</i><br>       semaphores is created if <i>key</i> has the value <b>IPC_PRIVATE </b>or if no<br>       existing semaphore set is associated with <i>key</i> and <b>IPC_CREAT </b>is<br>       specified in <i>semflg</i>.<br><br>       If <i>semflg</i> specifies both <b>IPC_CREAT </b>and <b>IPC_EXCL </b>and a semaphore set<br>       already exists for <i>key</i>, then <b>semget</b>() fails with <i>errno</i> set to <b>EEXIST</b>.<br>       (This is analogous to the effect of the combination <b>O_CREAT | O_EXCL</b><br>       for open(2).)<br><br>       Upon creation, the least significant 9 bits of the argument <i>semflg</i><br>       define the permissions (for owner, group and others) for the<br>       semaphore set.  These bits have the same format, and the same<br>       meaning, as the <i>mode</i> argument of open(2) (though the execute<br>       permissions are not meaningful for semaphores, and write permissions<br>       mean permission to alter semaphore values).<br><br>       When creating a new semaphore set, <b>semget</b>() initializes the set's<br>       associated data structure, <i>semid_ds</i> (see semctl(2)), as follows:<br><br>              <i>sem_perm.cuid</i> and <i>sem_perm.uid</i> are set to the effective user<br>              ID of the calling process.<br><br>              <i>sem_perm.cgid</i> and <i>sem_perm.gid</i> are set to the effective group<br>              ID of the calling process.<br><br>              The least significant 9 bits of <i>sem_perm.mode</i> are set to the<br>              least significant 9 bits of <i>semflg</i>.<br><br>              <i>sem_nsems</i> is set to the value of <i>nsems</i>.<br><br>              <i>sem_otime</i> is set to 0.<br><br>              <i>sem_ctime</i> is set to the current time.<br><br>       The argument <i>nsems</i> can be 0 (a don't care) when a semaphore set is<br>       not being created.  Otherwise, <i>nsems</i> must be greater than 0 and less<br>       than or equal to the maximum number of semaphores per semaphore set<br>       (<b>SEMMSL</b>).<br><br>       If the semaphore set already exists, the permissions are verified.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       If successful, the return value will be the semaphore set identifier<br>       (a nonnegative integer), otherwise, -1 is returned, with <i>errno</i><br>       indicating the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       On failure, <i>errno</i> will be set to one of the following:<br><br>       <b>EACCES </b>A semaphore set exists for <i>key</i>, but the calling process does<br>              not have permission to access the set, and does not have the<br>              <b>CAP_IPC_OWNER </b>capability.<br><br>       <b>EEXIST IPC_CREAT </b>and <b>IPC_EXCL </b>were specified in <i>semflg</i>, but a<br>              semaphore set already exists for <i>key</i>.<br><br>       <b>EINVAL </b><i>nsems</i> is less than 0 or greater than the limit on the number<br>              of semaphores per semaphore set (<b>SEMMSL</b>).<br><br>       <b>EINVAL </b>A semaphore set corresponding to <i>key</i> already exists, but <i>nsems</i><br>              is larger than the number of semaphores in that set.<br><br>       <b>ENOENT </b>No semaphore set exists for <i>key</i> and <i>semflg</i> did not specify<br>              <b>IPC_CREAT</b>.<br><br>       <b>ENOMEM </b>A semaphore set has to be created but the system does not have<br>              enough memory for the new data structure.<br><br>       <b>ENOSPC </b>A semaphore set has to be created but the system limit for the<br>              maximum number of semaphore sets (<b>SEMMNI</b>), or the system wide<br>              maximum number of semaphores (<b>SEMMNS</b>), would be exceeded.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       SVr4, POSIX.1-2001.<br></pre><br><h2>NOTES  </h2><pre><br>       The inclusion of <i>&lt;sys/types.h&gt;</i> and <i>&lt;sys/ipc.h&gt;</i> isn't required on<br>       Linux or by any version of POSIX.  However, some old implementations<br>       required the inclusion of these header files, and the SVID also<br>       documented their inclusion.  Applications intended to be portable to<br>       such old systems may need to include these header files.<br><br>       <b>IPC_PRIVATE </b>isn't a flag field but a <i>key_t</i> type.  If this special<br>       value is used for <i>key</i>, the system call ignores all but the least<br>       significant 9 bits of <i>semflg</i> and creates a new semaphore set (on<br>       success).<br><br>   <b>Semaphore initialization</b><br>       The values of the semaphores in a newly created set are<br>       indeterminate.  (POSIX.1-2001 and POSIX.1-2008 are explicit on this<br>       point, although POSIX.1-2008 notes that a future version of the<br>       standard may require an implementation to initialize the semaphores<br>       to 0.)  Although Linux, like many other implementations, initializes<br>       the semaphore values to 0, a portable application cannot rely on<br>       this: it should explicitly initialize the semaphores to the desired<br>       values.<br><br>       Initialization can be done using semctl(2) <b>SETVAL </b>or <b>SETALL</b><br>       operation.  Where multiple peers do not know who will be the first to<br>       initialize the set, checking for a nonzero <i>sem_otime</i> in the<br>       associated data structure retrieved by a semctl(2) <b>IPC_STAT </b>operation<br>       can be used to avoid races.<br><br>   <b>Semaphore limits</b><br>       The following limits on semaphore set resources affect the <b>semget</b>()<br>       call:<br><br>       <b>SEMMNI </b>System-wide limit on the number of semaphore sets.  On Linux<br>              systems before version 3.19, the default value for this limit<br>              was 128.  Since Linux 3.19, the default value is 32,000.  On<br>              Linux, this limit can be read and modified via the fourth<br>              field of <i>/proc/sys/kernel/sem</i>.<br><br>       <b>SEMMSL </b>Maximum number of semaphores per semaphore ID.  On Linux<br>              systems before version 3.19, the default value for this limit<br>              was 250.  Since Linux 3.19, the default value is 32,000.  On<br>              Linux, this limit can be read and modified via the first field<br>              of <i>/proc/sys/kernel/sem</i>.<br><br>       <b>SEMMNS </b>System-wide limit on the number of semaphores: policy<br>              dependent (on Linux, this limit can be read and modified via<br>              the second field of <i>/proc/sys/kernel/sem</i>).  Note that the<br>              number of semaphores system-wide is also limited by the<br>              product of <b>SEMMSL </b>and <b>SEMMNI</b>.<br></pre><br><h2>BUGS  </h2><pre><br>       The name choice <b>IPC_PRIVATE </b>was perhaps unfortunate, <b>IPC_NEW </b>would<br>       more clearly show its function.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       semctl(2), semop(2), ftok(3), capabilities(7), sem_overview(7),<br>       svipc(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-02-21                        SEMGET(2)</span><br></pre><br>"}