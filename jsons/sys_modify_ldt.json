{"Man page": "<pre><br><span class=\"headline\">MODIFY_LDT(2)             Linux Programmer's Manual            MODIFY_LDT(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       modify_ldt - get or set a per-process LDT entry<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br><br>       <b>int modify_ldt(int </b><i>func</i><b>, void *</b><i>ptr</i><b>, unsigned long </b><i>bytecount</i><b>);</b><br><br>       <i>Note</i>: There is no glibc wrapper for this system call; see NOTES.<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>modify_ldt</b>() reads or writes the local descriptor table (LDT) for a<br>       process.  The LDT is an array of segment descriptors that can be<br>       referenced by user code.  Linux allows processes to configure a per-<br>       process (actually per-mm) LDT.  For more information about the LDT,<br>       see the Intel Software Developer's Manual or the AMD Architecture<br>       Programming Manual.<br><br>       When <i>func</i> is 0, <b>modify_ldt</b>() reads the LDT into the memory pointed to<br>       by <i>ptr</i>.  The number of bytes read is the smaller of <i>bytecount</i> and the<br>       actual size of the LDT, although the kernel may act as though the LDT<br>       is padded with additional trailing zero bytes.  On success,<br>       <b>modify_ldt</b>() will return the number of bytes read.<br><br>       When <i>func</i> is 1 or 0x11, <b>modify_ldt</b>() modifies the LDT entry indicated<br>       by <i>ptr-&gt;entry_number</i>.  <i>ptr</i> points to a <i>user_desc</i> structure and<br>       <i>bytecount</i> must equal the size of this structure.<br><br>       The <i>user_desc</i> structure is defined in <i>&lt;asm/ldt.h&gt;</i> as:<br><br>           struct user_desc {<br>               unsigned int  entry_number;<br>               unsigned long base_addr;<br>               unsigned int  limit;<br>               unsigned int  seg_32bit:1;<br>               unsigned int  contents:2;<br>               unsigned int  read_exec_only:1;<br>               unsigned int  limit_in_pages:1;<br>               unsigned int  seg_not_present:1;<br>               unsigned int  useable:1;<br>           };<br><br>       In Linux 2.4 and earlier, this structure was named <i>modify_ldt_ldt_s</i>.<br><br>       The <i>contents</i> field is the segment type (data, expand-down data, non-<br>       conforming code, or conforming code).  The other fields match their<br>       descriptions in the CPU manual, although <b>modify_ldt</b>() cannot set the<br>       hardware-defined \"accessed\" bit described in the CPU manual.<br><br>       A <i>user_desc</i> is considered \"empty\" if <i>read_exec_only</i> and<br>       <i>seg_not_present</i> are set to 1 and all of the other fields are 0.  An<br>       LDT entry can be cleared by setting it to an \"empty\" <i>user_desc</i> or, if<br>       <i>func</i> is 1, by setting both <i>base</i> and <i>limit</i> to 0.<br><br>       A conforming code segment (i.e., one with <i>contents==3</i>) will be<br>       rejected if <i>func</i> is 1 or if <i>seg_not_present</i> is 0.<br><br>       When <i>func</i> is 2, <b>modify_ldt</b>() will read zeros.  This appears to be a<br>       leftover from Linux 2.4.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, <b>modify_ldt</b>() returns either the actual number of bytes<br>       read (for reading) or 0 (for writing).  On failure, <b>modify_ldt</b>()<br>       returns -1 and sets <i>errno</i> to indicate the error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b><i>ptr</i> points outside the address space.<br><br>       <b>EINVAL </b><i>ptr</i> is 0, or <i>func</i> is 1 and <i>bytecount</i> is not equal to the size<br>              of the structure <i>user_desc</i>, or <i>func</i> is 1 or 0x11 and the new<br>              LDT entry has invalid values.<br><br>       <b>ENOSYS </b><i>func</i> is neither 0, 1, 2, nor 0x11.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       This call is Linux-specific and should not be used in programs<br>       intended to be portable.<br></pre><br><h2>NOTES  </h2><pre><br>       Glibc does not provide a wrapper for this system call; call it using<br>       syscall(2).<br><br>       <b>modify_ldt</b>() should not be used for thread-local storage, as it slows<br>       down context switches and only supports a limited number of threads.<br>       Threading libraries should use set_thread_area(2) or arch_prctl(2)<br>       instead, except on extremely old kernels that do not support those<br>       system calls.<br><br>       The normal use for modify_ldt(2) is to run legacy 16-bit or segmented<br>       32-bit code.  Not all kernels allow 16-bit segments to be installed,<br>       however.<br><br>       Even on 64-bit kernels, modify_ldt(2) cannot be used to create a long<br>       mode (i.e., 64-bit) code segment.  The undocumented field \"lm\" in<br>       <i>user_desc</i> is not useful, and, despite its name, does not result in a<br>       long mode segment.<br></pre><br><h2>BUGS  </h2><pre><br>       On 64-bit kernels before Linux 3.19, setting the \"lm\" bit in<br>       <i>user_desc</i> prevents the descriptor from being considered empty.  Keep<br>       in mind that the \"lm\" bit does not exist in the 32-bit headers, but<br>       these buggy kernels will still notice the bit even when set in a<br>       32-bit process.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       arch_prctl(2), set_thread_area(2), vm86(2)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-02-21                    MODIFY_LDT(2)</span><br></pre><br>"}