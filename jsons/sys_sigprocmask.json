{"Man page": "<pre><br><span class=\"headline\">SIGPROCMASK(2)            Linux Programmer's Manual           SIGPROCMASK(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       sigprocmask, rt_sigprocmask - examine and change blocked signals<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;signal.h&gt;</b><br><br>       <b>int sigprocmask(int </b><i>how</i><b>, const sigset_t *</b><i>set</i><b>, sigset_t *</b><i>oldset</i><b>);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>sigprocmask</b>(): _POSIX_C_SOURCE &gt;= 1 || _XOPEN_SOURCE || _POSIX_SOURCE<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>sigprocmask</b>() is used to fetch and/or change the signal mask of the<br>       calling thread.  The signal mask is the set of signals whose delivery<br>       is currently blocked for the caller (see also signal(7) for more<br>       details).<br><br>       The behavior of the call is dependent on the value of <i>how</i>, as<br>       follows.<br><br>       <b>SIG_BLOCK</b><br>              The set of blocked signals is the union of the current set and<br>              the <i>set</i> argument.<br><br>       <b>SIG_UNBLOCK</b><br>              The signals in <i>set</i> are removed from the current set of blocked<br>              signals.  It is permissible to attempt to unblock a signal<br>              which is not blocked.<br><br>       <b>SIG_SETMASK</b><br>              The set of blocked signals is set to the argument <i>set</i>.<br><br>       If <i>oldset</i> is non-NULL, the previous value of the signal mask is<br>       stored in <i>oldset</i>.<br><br>       If <i>set</i> is NULL, then the signal mask is unchanged (i.e., <i>how</i> is<br>       ignored), but the current value of the signal mask is nevertheless<br>       returned in <i>oldset</i> (if it is not NULL).<br><br>       The use of <b>sigprocmask</b>() is unspecified in a multithreaded process;<br>       see pthread_sigmask(3).<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       <b>sigprocmask</b>() returns 0 on success and -1 on error.  In the event of<br>       an error, <i>errno</i> is set to indicate the cause.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b>The <i>set</i> or <i>oldset</i> argument points outside the process's<br>              allocated address space.<br><br>       <b>EINVAL </b>The value specified in <i>how</i> was invalid.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008.<br></pre><br><h2>NOTES  </h2><pre><br>       It is not possible to block <b>SIGKILL </b>or <b>SIGSTOP</b>.  Attempts to do so<br>       are silently ignored.<br><br>       Each of the threads in a process has its own signal mask.<br><br>       A child created via fork(2) inherits a copy of its parent's signal<br>       mask; the signal mask is preserved across execve(2).<br><br>       If <b>SIGBUS</b>, <b>SIGFPE</b>, <b>SIGILL</b>, or <b>SIGSEGV </b>are generated while they are<br>       blocked, the result is undefined, unless the signal was generated by<br>       kill(2), sigqueue(3), or raise(3).<br><br>       See sigsetops(3) for details on manipulating signal sets.<br><br>   <b>C library/kernel differences</b><br>       The glibc wrapper function for <b>sigprocmask</b>() silently ignores<br>       attempts to block the two real-time signals that are used internally<br>       by the NPTL threading implementation.  See nptl(7) for details.<br><br>       The original Linux system call was named <b>sigprocmask</b>().  However,<br>       with the addition of real-time signals in Linux 2.2, the fixed-size,<br>       32-bit <i>sigset_t</i> type supported by that system call was no longer fit<br>       for purpose.  Consequently, a new system call, <b>rt_sigprocmask</b>(), was<br>       added to support an enlarged <i>sigset_t</i> type.  The new system call<br>       takes a fourth argument, <i>size_t sigsetsize</i>, which specifies the size<br>       in bytes of the signal sets in <i>set</i> and <i>oldset</i>.  This argument is<br>       currently required to have the value <i>sizeof(sigset_t)</i> (or the error<br>       <b>EINVAL </b>results).  The glibc <b>sigprocmask</b>() wrapper function hides<br>       these details from us, transparently calling <b>rt_sigprocmask</b>() when<br>       the kernel provides it.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       kill(2), pause(2), sigaction(2), signal(2), sigpending(2),<br>       sigsuspend(2), pthread_sigmask(3), sigqueue(3), sigsetops(3),<br>       signal(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                   SIGPROCMASK(2)</span><br></pre><br>"}