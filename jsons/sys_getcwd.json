{"Man page": "<pre><br><span class=\"headline\">GETCWD(3)                 Linux Programmer's Manual                GETCWD(3)</span><br></pre><br><h2>NAME  </h2><pre><br>       getcwd, getwd, get_current_dir_name - get current working directory<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;unistd.h&gt;</b><br><br>       <b>char *getcwd(char *</b><i>buf</i><b>, size_t </b><i>size</i><b>);</b><br><br>       <b>char *getwd(char *</b><i>buf</i><b>);</b><br><br>       <b>char *get_current_dir_name(void);</b><br><br>   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):<br><br>       <b>get_current_dir_name</b>():<br>              _GNU_SOURCE<br><br>       <b>getwd</b>():<br>           Since glibc 2.12:<br>               _BSD_SOURCE ||<br>                   (_XOPEN_SOURCE &gt;= 500 ||<br>                       _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED) &amp;&amp;<br>                   !(_POSIX_C_SOURCE &gt;= 200809L || _XOPEN_SOURCE &gt;= 700)<br>           Before glibc 2.12:<br>               _BSD_SOURCE || _XOPEN_SOURCE &gt;= 500 ||<br>               _XOPEN_SOURCE &amp;&amp; _XOPEN_SOURCE_EXTENDED<br></pre><br><h2>DESCRIPTION  </h2><pre><br>       These functions return a null-terminated string containing an<br>       absolute pathname that is the current working directory of the<br>       calling process.  The pathname is returned as the function result and<br>       via the argument <i>buf</i>, if present.<br><br>       If the current directory is not below the root directory of the<br>       current process (e.g., because the process set a new filesystem root<br>       using chroot(2) without changing its current directory into the new<br>       root), then, since Linux 2.6.36, the returned path will be prefixed<br>       with the string \"(unreachable)\".  Such behavior can also be caused by<br>       an unprivileged user by changing the current directory into another<br>       mount namespace.  When dealing with paths from untrusted sources,<br>       callers of these functions should consider checking whether the<br>       returned path starts with '/' or '(' to avoid misinterpreting an<br>       unreachable path as a relative path.<br><br>       The <b>getcwd</b>() function copies an absolute pathname of the current<br>       working directory to the array pointed to by <i>buf</i>, which is of length<br>       <i>size</i>.<br><br>       If the length of the absolute pathname of the current working<br>       directory, including the terminating null byte, exceeds <i>size</i> bytes,<br>       NULL is returned, and <i>errno</i> is set to <b>ERANGE</b>; an application should<br>       check for this error, and allocate a larger buffer if necessary.<br><br>       As an extension to the POSIX.1-2001 standard, glibc's <b>getcwd</b>()<br>       allocates the buffer dynamically using malloc(3) if <i>buf</i> is NULL.  In<br>       this case, the allocated buffer has the length <i>size</i> unless <i>size</i> is<br>       zero, when <i>buf</i> is allocated as big as necessary.  The caller should<br>       free(3) the returned buffer.<br><br>       <b>get_current_dir_name</b>() will malloc(3) an array big enough to hold the<br>       absolute pathname of the current working directory.  If the<br>       environment variable <b>PWD </b>is set, and its value is correct, then that<br>       value will be returned.  The caller should free(3) the returned<br>       buffer.<br><br>       <b>getwd</b>() does not malloc(3) any memory.  The <i>buf</i> argument should be a<br>       pointer to an array at least <b>PATH_MAX </b>bytes long.  If the length of<br>       the absolute pathname of the current working directory, including the<br>       terminating null byte, exceeds <b>PATH_MAX </b>bytes, NULL is returned, and<br>       <i>errno</i> is set to <b>ENAMETOOLONG</b>.  (Note that on some systems, <b>PATH_MAX</b><br>       may not be a compile-time constant; furthermore, its value may depend<br>       on the filesystem, see pathconf(3).)  For portability and security<br>       reasons, use of <b>getwd</b>() is deprecated.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, these functions return a pointer to a string containing<br>       the pathname of the current working directory.  In the case <b>getcwd</b>()<br>       and <b>getwd</b>() this is the same value as <i>buf</i>.<br><br>       On failure, these functions return NULL, and <i>errno</i> is set to indicate<br>       the error.  The contents of the array pointed to by <i>buf</i> are undefined<br>       on error.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EACCES </b>Permission to read or search a component of the filename was<br>              denied.<br><br>       <b>EFAULT </b><i>buf</i> points to a bad address.<br><br>       <b>EINVAL </b>The <i>size</i> argument is zero and <i>buf</i> is not a null pointer.<br><br>       <b>EINVAL getwd</b>(): <i>buf</i> is NULL.<br><br>       <b>ENAMETOOLONG</b><br>              <b>getwd</b>(): The size of the null-terminated absolute pathname<br>              string exceeds <b>PATH_MAX </b>bytes.<br><br>       <b>ENOMEM </b>Out of memory.<br><br>       <b>ENOENT </b>The current working directory has been unlinked.<br><br>       <b>ERANGE </b>The <i>size</i> argument is less than the length of the absolute<br>              pathname of the working directory, including the terminating<br>              null byte.  You need to allocate a bigger array and try again.<br></pre><br><h2>ATTRIBUTES  </h2><pre><br>       For an explanation of the terms used in this section, see<br>       attributes(7).<br><br>       &#9484;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9488;<br>       &#9474;<b>Interface              </b>&#9474; <b>Attribute     </b>&#9474; <b>Value       </b>&#9474;<br>       &#9500;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9532;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9532;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9508;<br>       &#9474;<b>getcwd</b>(), <b>getwd</b>()      &#9474; Thread safety &#9474; MT-Safe     &#9474;<br>       &#9500;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9532;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9532;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9508;<br>       &#9474;<b>get_current_dir_name</b>() &#9474; Thread safety &#9474; MT-Safe env &#9474;<br>       &#9492;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9496;<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       <b>getcwd</b>() conforms to POSIX.1-2001.  Note however that POSIX.1-2001<br>       leaves the behavior of <b>getcwd</b>() unspecified if <i>buf</i> is NULL.<br><br>       <b>getwd</b>() is present in POSIX.1-2001, but marked LEGACY.  POSIX.1-2008<br>       removes the specification of <b>getwd</b>().  Use <b>getcwd</b>() instead.<br>       POSIX.1-2001 does not define any errors for <b>getwd</b>().<br><br>       <b>get_current_dir_name</b>() is a GNU extension.<br></pre><br><h2>NOTES  </h2><pre><br>       Under Linux, the function <b>getcwd</b>() is a system call (since 2.1.92).<br>       On older systems it would query <i>/proc/self/cwd</i>.  If both system call<br>       and proc filesystem are missing, a generic implementation is called.<br>       Only in that case can these calls fail under Linux with <b>EACCES</b>.<br><br>       These functions are often used to save the location of the current<br>       working directory for the purpose of returning to it later.  Opening<br>       the current directory (\".\") and calling fchdir(2) to return is<br>       usually a faster and more reliable alternative when sufficiently many<br>       file descriptors are available, especially on platforms other than<br>       Linux.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       chdir(2), fchdir(2), open(2), unlink(2), free(3), malloc(3)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">GNU                              2015-04-19                        GETCWD(3)</span><br></pre><br>"}