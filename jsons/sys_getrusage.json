{"Man page": "<pre><br><span class=\"headline\">GETRUSAGE(2)              Linux Programmer's Manual             GETRUSAGE(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       getrusage - get resource usage<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/time.h&gt;</b><br>       <b>#include &lt;sys/resource.h&gt;</b><br><br>       <b>int getrusage(int </b><i>who</i><b>, struct rusage *</b><i>usage</i><b>);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>getrusage</b>() returns resource usage measures for <i>who</i>, which can be one<br>       of the following:<br><br>       <b>RUSAGE_SELF</b><br>              Return resource usage statistics for the calling process,<br>              which is the sum of resources used by all threads in the<br>              process.<br><br>       <b>RUSAGE_CHILDREN</b><br>              Return resource usage statistics for all children of the<br>              calling process that have terminated and been waited for.<br>              These statistics will include the resources used by<br>              grandchildren, and further removed descendants, if all of the<br>              intervening descendants waited on their terminated children.<br><br>       <b>RUSAGE_THREAD </b>(since Linux 2.6.26)<br>              Return resource usage statistics for the calling thread.  The<br>              <b>_GNU_SOURCE </b>feature test macro must be defined (before<br>              including <i>any</i> header file) in order to obtain the definition<br>              of this constant from <i>&lt;sys/resource.h&gt;</i>.<br><br>       The resource usages are returned in the structure pointed to by<br>       <i>usage</i>, which has the following form:<br><br>           struct rusage {<br>               struct timeval ru_utime; /* user CPU time used */<br>               struct timeval ru_stime; /* system CPU time used */<br>               long   ru_maxrss;        /* maximum resident set size */<br>               long   ru_ixrss;         /* integral shared memory size */<br>               long   ru_idrss;         /* integral unshared data size */<br>               long   ru_isrss;         /* integral unshared stack size */<br>               long   ru_minflt;        /* page reclaims (soft page faults) */<br>               long   ru_majflt;        /* page faults (hard page faults) */<br>               long   ru_nswap;         /* swaps */<br>               long   ru_inblock;       /* block input operations */<br>               long   ru_oublock;       /* block output operations */<br>               long   ru_msgsnd;        /* IPC messages sent */<br>               long   ru_msgrcv;        /* IPC messages received */<br>               long   ru_nsignals;      /* signals received */<br>               long   ru_nvcsw;         /* voluntary context switches */<br>               long   ru_nivcsw;        /* involuntary context switches */<br>           };<br><br>       Not all fields are completed; unmaintained fields are set to zero by<br>       the kernel.  (The unmaintained fields are provided for compatibility<br>       with other systems, and because they may one day be supported on<br>       Linux.)  The fields are interpreted as follows:<br><br>       <i>ru_utime</i><br>              This is the total amount of time spent executing in user mode,<br>              expressed in a <i>timeval</i> structure (seconds plus microseconds).<br><br>       <i>ru_stime</i><br>              This is the total amount of time spent executing in kernel<br>              mode, expressed in a <i>timeval</i> structure (seconds plus<br>              microseconds).<br><br>       <i>ru_maxrss</i> (since Linux 2.6.32)<br>              This is the maximum resident set size used (in kilobytes).<br>              For <b>RUSAGE_CHILDREN</b>, this is the resident set size of the<br>              largest child, not the maximum resident set size of the<br>              process tree.<br><br>       <i>ru_ixrss</i> (unmaintained)<br>              This field is currently unused on Linux.<br><br>       <i>ru_idrss</i> (unmaintained)<br>              This field is currently unused on Linux.<br><br>       <i>ru_isrss</i> (unmaintained)<br>              This field is currently unused on Linux.<br><br>       <i>ru_minflt</i><br>              The number of page faults serviced without any I/O activity;<br>              here I/O activity is avoided by &#8220;reclaiming&#8221; a page frame from<br>              the list of pages awaiting reallocation.<br><br>       <i>ru_majflt</i><br>              The number of page faults serviced that required I/O activity.<br><br>       <i>ru_nswap</i> (unmaintained)<br>              This field is currently unused on Linux.<br><br>       <i>ru_inblock</i> (since Linux 2.6.22)<br>              The number of times the filesystem had to perform input.<br><br>       <i>ru_oublock</i> (since Linux 2.6.22)<br>              The number of times the filesystem had to perform output.<br><br>       <i>ru_msgsnd</i> (unmaintained)<br>              This field is currently unused on Linux.<br><br>       <i>ru_msgrcv</i> (unmaintained)<br>              This field is currently unused on Linux.<br><br>       <i>ru_nsignals</i> (unmaintained)<br>              This field is currently unused on Linux.<br><br>       <i>ru_nvcsw</i> (since Linux 2.6)<br>              The number of times a context switch resulted due to a process<br>              voluntarily giving up the processor before its time slice was<br>              completed (usually to await availability of a resource).<br><br>       <i>ru_nivcsw</i> (since Linux 2.6)<br>              The number of times a context switch resulted due to a higher<br>              priority process becoming runnable or because the current<br>              process exceeded its time slice.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On success, zero is returned.  On error, -1 is returned, and <i>errno</i> is<br>       set appropriately.<br></pre><br><h2>ERRORS  </h2><pre><br>       <b>EFAULT </b><i>usage</i> points outside the accessible address space.<br><br>       <b>EINVAL </b><i>who</i> is invalid.<br></pre><br><h2>ATTRIBUTES  </h2><pre><br>       For an explanation of the terms used in this section, see<br>       attributes(7).<br><br>       &#9484;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9488;<br>       &#9474;<b>Interface   </b>&#9474; <b>Attribute     </b>&#9474; <b>Value   </b>&#9474;<br>       &#9500;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9532;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9532;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9508;<br>       &#9474;<b>getrusage</b>() &#9474; Thread safety &#9474; MT-Safe &#9474;<br>       &#9492;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9496;<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD.  POSIX.1 specifies<br>       <b>getrusage</b>(), but specifies only the fields <i>ru_utime</i> and <i>ru_stime</i>.<br><br>       <b>RUSAGE_THREAD </b>is Linux-specific.<br></pre><br><h2>NOTES  </h2><pre><br>       Resource usage metrics are preserved across an execve(2).<br><br>       Including <i>&lt;sys/time.h&gt;</i> is not required these days, but increases<br>       portability.  (Indeed, <i>struct timeval</i> is defined in <i>&lt;sys/time.h&gt;</i>.)<br><br>       In Linux kernel versions before 2.6.9, if the disposition of <b>SIGCHLD</b><br>       is set to <b>SIG_IGN </b>then the resource usages of child processes are<br>       automatically included in the value returned by <b>RUSAGE_CHILDREN</b>,<br>       although POSIX.1-2001 explicitly prohibits this.  This nonconformance<br>       is rectified in Linux 2.6.9 and later.<br><br>       The structure definition shown at the start of this page was taken<br>       from 4.3BSD Reno.<br><br>       Ancient systems provided a <b>vtimes</b>() function with a similar purpose<br>       to <b>getrusage</b>().  For backward compatibility, glibc also provides<br>       <b>vtimes</b>().  All new applications should be written using <b>getrusage</b>().<br><br>       See also the description of <i>/proc/PID/stat</i> in proc(5).<br></pre><br><h2>SEE ALSO  </h2><pre><br>       clock_gettime(2), getrlimit(2), times(2), wait(2), wait4(2), clock(3)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-07-23                     GETRUSAGE(2)</span><br></pre><br>"}