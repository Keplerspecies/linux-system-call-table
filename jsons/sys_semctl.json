{"Man page": "<pre><br><span class=\"headline\">SEMCTL(2)                 Linux Programmer's Manual                SEMCTL(2)</span><br></pre><br><h2>NAME  </h2><pre><br>       semctl - System V semaphore control operations<br></pre><br><h2>SYNOPSIS  </h2><pre><br>       <b>#include &lt;sys/types.h&gt;</b><br>       <b>#include &lt;sys/ipc.h&gt;</b><br>       <b>#include &lt;sys/sem.h&gt;</b><br><br>       <b>int semctl(int </b><i>semid</i><b>, int </b><i>semnum</i><b>, int </b><i>cmd</i><b>, ...);</b><br></pre><br><h2>DESCRIPTION  </h2><pre><br>       <b>semctl</b>() performs the control operation specified by <i>cmd</i> on the<br>       System V semaphore set identified by <i>semid</i>, or on the <i>semnum</i>-th<br>       semaphore of that set.  (The semaphores in a set are numbered<br>       starting at 0.)<br><br>       This function has three or four arguments, depending on <i>cmd</i>.  When<br>       there are four, the fourth has the type <i>union semun</i>.  The <i>calling</i><br>       <i>program</i> must define this union as follows:<br><br>           union semun {<br>               int              val;    /* Value for SETVAL */<br>               struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */<br>               unsigned short  *array;  /* Array for GETALL, SETALL */<br>               struct seminfo  *__buf;  /* Buffer for IPC_INFO<br>                                           (Linux-specific) */<br>           };<br><br>       The <i>semid_ds</i> data structure is defined in <i>&lt;sys/sem.h&gt;</i> as follows:<br><br>           struct semid_ds {<br>               struct ipc_perm sem_perm;  /* Ownership and permissions */<br>               time_t          sem_otime; /* Last semop time */<br>               time_t          sem_ctime; /* Last change time */<br>               unsigned long   sem_nsems; /* No. of semaphores in set */<br>           };<br><br>       The <i>ipc_perm</i> structure is defined as follows (the highlighted fields<br>       are settable using <b>IPC_SET</b>):<br><br>           struct ipc_perm {<br>               key_t          __key; /* Key supplied to semget(2) */<br>               uid_t          <b>uid</b>;   /* Effective UID of owner */<br>               gid_t          <b>gid</b>;   /* Effective GID of owner */<br>               uid_t          cuid;  /* Effective UID of creator */<br>               gid_t          cgid;  /* Effective GID of creator */<br>               unsigned short <b>mode</b>;  /* Permissions */<br>               unsigned short __seq; /* Sequence number */<br>           };<br><br>       Valid values for <i>cmd</i> are:<br><br>       <b>IPC_STAT  </b>Copy information from the kernel data structure associated<br>                 with <i>semid</i> into the <i>semid_ds</i> structure pointed to by<br>                 <i>arg.buf</i>.  The argument <i>semnum</i> is ignored.  The calling<br>                 process must have read permission on the semaphore set.<br><br>       <b>IPC_SET   </b>Write the values of some members of the <i>semid_ds</i> structure<br>                 pointed to by <i>arg.buf</i> to the kernel data structure<br>                 associated with this semaphore set, updating also its<br>                 <i>sem_ctime</i> member.  The following members of the structure<br>                 are updated: <i>sem_perm.uid</i>, <i>sem_perm.gid</i>, and (the least<br>                 significant 9 bits of) <i>sem_perm.mode</i>.  The effective UID of<br>                 the calling process must match the owner (<i>sem_perm.uid</i>) or<br>                 creator (<i>sem_perm.cuid</i>) of the semaphore set, or the caller<br>                 must be privileged.  The argument <i>semnum</i> is ignored.<br><br>       <b>IPC_RMID  </b>Immediately remove the semaphore set, awakening all<br>                 processes blocked in semop(2) calls on the set (with an<br>                 error return and <i>errno</i> set to <b>EIDRM</b>).  The effective user<br>                 ID of the calling process must match the creator or owner<br>                 of the semaphore set, or the caller must be privileged.<br>                 The argument <i>semnum</i> is ignored.<br><br>       <b>IPC_INFO </b>(Linux-specific)<br>                 Return information about system-wide semaphore limits and<br>                 parameters in the structure pointed to by <i>arg.__buf</i>.  This<br>                 structure is of type <i>seminfo</i>, defined in <i>&lt;sys/sem.h&gt;</i> if the<br>                 <b>_GNU_SOURCE </b>feature test macro is defined:<br><br>                     struct  seminfo {<br>                         int semmap;  /* Number of entries in semaphore<br>                                         map; unused within kernel */<br>                         int semmni;  /* Maximum number of semaphore sets */<br>                         int semmns;  /* Maximum number of semaphores in all<br>                                         semaphore sets */<br>                         int semmnu;  /* System-wide maximum number of undo<br>                                         structures; unused within kernel */<br>                         int semmsl;  /* Maximum number of semaphores in a<br>                                         set */<br>                         int semopm;  /* Maximum number of operations for<br>                                         semop(2) */<br>                         int semume;  /* Maximum number of undo entries per<br>                                         process; unused within kernel */<br>                         int semusz;  /* Size of struct sem_undo */<br>                         int semvmx;  /* Maximum semaphore value */<br>                         int semaem;  /* Max. value that can be recorded for<br>                                         semaphore adjustment (SEM_UNDO) */<br>                     };<br><br>                 The <i>semmsl</i>, <i>semmns</i>, <i>semopm</i>, and <i>semmni</i> settings can be<br>                 changed via <i>/proc/sys/kernel/sem</i>; see proc(5) for details.<br><br>       <b>SEM_INFO </b>(Linux-specific)<br>                 Return a <i>seminfo</i> structure containing the same information<br>                 as for <b>IPC_INFO</b>, except that the following fields are<br>                 returned with information about system resources consumed<br>                 by semaphores: the <i>semusz</i> field returns the number of<br>                 semaphore sets that currently exist on the system; and the<br>                 <i>semaem</i> field returns the total number of semaphores in all<br>                 semaphore sets on the system.<br><br>       <b>SEM_STAT </b>(Linux-specific)<br>                 Return a <i>semid_ds</i> structure as for <b>IPC_STAT</b>.  However, the<br>                 <i>semid</i> argument is not a semaphore identifier, but instead<br>                 an index into the kernel's internal array that maintains<br>                 information about all semaphore sets on the system.<br><br>       <b>GETALL    </b>Return <b>semval </b>(i.e., the current value) for all semaphores<br>                 of the set into <i>arg.array</i>.  The argument <i>semnum</i> is ignored.<br>                 The calling process must have read permission on the<br>                 semaphore set.<br><br>       <b>GETNCNT   </b>Return the value of <b>semncnt </b>for the <i>semnum</i>-th semaphore of<br>                 the set (i.e., the number of processes waiting for an<br>                 increase of <b>semval </b>for the <i>semnum</i>-th semaphore of the set).<br>                 The calling process must have read permission on the<br>                 semaphore set.<br><br>       <b>GETPID    </b>Return the value of <b>sempid </b>for the <i>semnum</i>-th semaphore of<br>                 the set (i.e., the PID of the process that executed the<br>                 last semop(2) call for the <i>semnum</i>-th semaphore of the set).<br>                 The calling process must have read permission on the<br>                 semaphore set.<br><br>       <b>GETVAL    </b>Return the value of <b>semval </b>for the <i>semnum</i>-th semaphore of<br>                 the set.  The calling process must have read permission on<br>                 the semaphore set.<br><br>       <b>GETZCNT   </b>Return the value of <b>semzcnt </b>for the <i>semnum</i>-th semaphore of<br>                 the set (i.e., the number of processes waiting for <b>semval</b><br>                 of the <i>semnum</i>-th semaphore of the set to become 0).  The<br>                 calling process must have read permission on the semaphore<br>                 set.<br><br>       <b>SETALL    </b>Set <b>semval </b>for all semaphores of the set using <i>arg.array</i>,<br>                 updating also the <i>sem_ctime</i> member of the <i>semid_ds</i><br>                 structure associated with the set.  Undo entries (see<br>                 semop(2)) are cleared for altered semaphores in all<br>                 processes.  If the changes to semaphore values would permit<br>                 blocked semop(2) calls in other processes to proceed, then<br>                 those processes are woken up.  The argument <i>semnum</i> is<br>                 ignored.  The calling process must have alter (write)<br>                 permission on the semaphore set.<br><br>       <b>SETVAL    </b>Set the value of <b>semval </b>to <i>arg.val</i> for the <i>semnum</i>-th<br>                 semaphore of the set, updating also the <i>sem_ctime</i> member of<br>                 the <i>semid_ds</i> structure associated with the set.  Undo<br>                 entries are cleared for altered semaphores in all<br>                 processes.  If the changes to semaphore values would permit<br>                 blocked semop(2) calls in other processes to proceed, then<br>                 those processes are woken up.  The calling process must<br>                 have alter permission on the semaphore set.<br></pre><br><h2>RETURN VALUE  </h2><pre><br>       On failure, <b>semctl</b>() returns -1 with <i>errno</i> indicating the error.<br><br>       Otherwise, the system call returns a nonnegative value depending on<br>       <i>cmd</i> as follows:<br><br>       <b>GETNCNT   </b>the value of <b>semncnt</b>.<br><br>       <b>GETPID    </b>the value of <b>sempid</b>.<br><br>       <b>GETVAL    </b>the value of <b>semval</b>.<br><br>       <b>GETZCNT   </b>the value of <b>semzcnt</b>.<br><br>       <b>IPC_INFO  </b>the index of the highest used entry in the kernel's<br>                 internal array recording information about all semaphore<br>                 sets.  (This information can be used with repeated <b>SEM_STAT</b><br>                 operations to obtain information about all semaphore sets<br>                 on the system.)<br><br>       <b>SEM_INFO  </b>as for <b>IPC_INFO</b>.<br><br>       <b>SEM_STAT  </b>the identifier of the semaphore set whose index was given<br>                 in <i>semid</i>.<br><br>       All other <i>cmd</i> values return 0 on success.<br></pre><br><h2>ERRORS  </h2><pre><br>       On failure, <i>errno</i> will be set to one of the following:<br><br>       <b>EACCES </b>The argument <i>cmd</i> has one of the values <b>GETALL</b>, <b>GETPID</b>, <b>GETVAL</b>,<br>              <b>GETNCNT</b>, <b>GETZCNT</b>, <b>IPC_STAT</b>, <b>SEM_STAT</b>, <b>SETALL</b>, or <b>SETVAL </b>and<br>              the calling process does not have the required permissions on<br>              the semaphore set and does not have the <b>CAP_IPC_OWNER</b><br>              capability.<br><br>       <b>EFAULT </b>The address pointed to by <i>arg.buf</i> or <i>arg.array</i> isn't<br>              accessible.<br><br>       <b>EIDRM  </b>The semaphore set was removed.<br><br>       <b>EINVAL </b>Invalid value for <i>cmd</i> or <i>semid</i>.  Or: for a <b>SEM_STAT </b>operation,<br>              the index value specified in <i>semid</i> referred to an array slot<br>              that is currently unused.<br><br>       <b>EPERM  </b>The argument <i>cmd</i> has the value <b>IPC_SET </b>or <b>IPC_RMID </b>but the<br>              effective user ID of the calling process is not the creator<br>              (as found in <i>sem_perm.cuid</i>) or the owner (as found in<br>              <i>sem_perm.uid</i>) of the semaphore set, and the process does not<br>              have the <b>CAP_SYS_ADMIN </b>capability.<br><br>       <b>ERANGE </b>The argument <i>cmd</i> has the value <b>SETALL </b>or <b>SETVAL </b>and the value<br>              to which <b>semval </b>is to be set (for some semaphore of the set)<br>              is less than 0 or greater than the implementation limit<br>              <b>SEMVMX</b>.<br></pre><br><h2>CONFORMING TO  </h2><pre><br>       POSIX.1-2001, POSIX.1-2001, SVr4.<br><br>       POSIX.1 specifies the <i>sem_nsems</i> field of the <i>semid_ds</i> structure as<br>       having the type <i>unsigned short</i>, and the field is so defined on most<br>       other systems.  It was also so defined on Linux 2.2 and earlier, but,<br>       since Linux 2.4, the field has the type <i>unsigned long</i>.<br></pre><br><h2>NOTES  </h2><pre><br>       The inclusion of <i>&lt;sys/types.h&gt;</i> and <i>&lt;sys/ipc.h&gt;</i> isn't required on<br>       Linux or by any version of POSIX.  However, some old implementations<br>       required the inclusion of these header files, and the SVID also<br>       documented their inclusion.  Applications intended to be portable to<br>       such old systems may need to include these header files.<br><br>       The <b>IPC_INFO</b>, <b>SEM_STAT </b>and <b>SEM_INFO </b>operations are used by the<br>       ipcs(1) program to provide information on allocated resources.  In<br>       the future these may modified or moved to a <i>/proc</i> filesystem<br>       interface.<br><br>       Various fields in a <i>struct semid_ds</i> were typed as <i>short</i> under Linux<br>       2.2 and have become <i>long</i> under Linux 2.4.  To take advantage of this,<br>       a recompilation under glibc-2.1.91 or later should suffice.  (The<br>       kernel distinguishes old and new calls by an <b>IPC_64 </b>flag in <i>cmd</i>.)<br><br>       In some earlier versions of glibc, the <i>semun</i> union was defined in<br>       <i>&lt;sys/sem.h&gt;</i>, but POSIX.1 requires that the caller define this union.<br>       On versions of glibc where this union is <i>not</i> defined, the macro<br>       <b>_SEM_SEMUN_UNDEFINED </b>is defined in <i>&lt;sys/sem.h&gt;</i>.<br><br>       The following system limit on semaphore sets affects a <b>semctl</b>() call:<br><br>       <b>SEMVMX </b>Maximum value for <b>semval</b>: implementation dependent (32767).<br><br>       For greater portability, it is best to always call <b>semctl</b>() with four<br>       arguments.<br></pre><br><h2>SEE ALSO  </h2><pre><br>       ipc(2), semget(2), semop(2), capabilities(7), sem_overview(7),<br>       svipc(7)<br></pre><br><h2>COLOPHON  </h2><pre><br>       This page is part of release 4.02 of the Linux <i>man-pages</i> project.  A<br>       description of the project, information about reporting bugs, and the<br>       latest version of this page, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br><br><span class=\"footline\">Linux                            2015-08-08                        SEMCTL(2)</span><br></pre><br>"}